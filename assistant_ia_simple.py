# assistant_ia_simple.py - Module Assistant IA Expert sans d√©pendances externes
# Version simplifi√©e qui utilise uniquement les modules d√©j√† pr√©sents dans l'ERP

import streamlit as st
import os
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
import logging
from anthropic import Anthropic

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AssistantIASimple:
    """
    Assistant IA avec interface √©l√©gante et acc√®s √† la base de donn√©es ERP
    Version simplifi√©e sans d√©pendances externes
    """
    
    def __init__(self, db=None, api_key: Optional[str] = None):
        """
        Initialise l'assistant IA
        
        Args:
            db: Instance ERPDatabase pour acc√©der aux donn√©es
            api_key: Cl√© API Claude
        """
        self.db = db
        self.api_key = api_key or os.environ.get('ANTHROPIC_API_KEY') or os.environ.get('CLAUDE_API_KEY')
        
        if self.api_key:
            try:
                self.client = Anthropic(api_key=self.api_key)
                self.model = "claude-3-opus-20240229"
                logger.info("‚úÖ Assistant IA initialis√© avec succ√®s")
            except Exception as e:
                logger.error(f"‚ùå Erreur initialisation Claude: {e}")
                self.client = None
        else:
            logger.warning("‚ö†Ô∏è Cl√© API Claude non configur√©e")
            self.client = None
        
        # Initialiser les √©tats de session
        if "ia_messages" not in st.session_state:
            st.session_state.ia_messages = []
        if "ia_conversation_id" not in st.session_state:
            st.session_state.ia_conversation_id = None
    
    # =========================================================================
    # M√âTHODES D'ACC√àS AUX DONN√âES ERP
    # =========================================================================
    
    def _search_erp_data(self, query: str) -> Dict[str, Any]:
        """Recherche dans les donn√©es ERP"""
        if not self.db:
            return {"error": "Base de donn√©es non disponible"}
        
        results = {}
        query_lower = query.lower()
        
        try:
            # Recherche projets
            if any(word in query_lower for word in ['projet', 'project', 'chantier']):
                projects = self.db.execute_query("""
                    SELECT p.*, c.nom as client_nom 
                    FROM projects p 
                    LEFT JOIN companies c ON p.client_company_id = c.id 
                    WHERE p.nom_projet LIKE ? OR p.description LIKE ?
                    LIMIT 5
                """, (f'%{query}%', f'%{query}%'))
                
                if projects:
                    results['projets'] = [dict(p) for p in projects]
            
            # Recherche inventaire
            if any(word in query_lower for word in ['stock', 'inventaire', 'mat√©riel']):
                items = self.db.execute_query("""
                    SELECT nom, quantite_metric, statut 
                    FROM inventory_items 
                    WHERE nom LIKE ? OR description LIKE ?
                    LIMIT 5
                """, (f'%{query}%', f'%{query}%'))
                
                if items:
                    results['inventaire'] = [dict(item) for item in items]
            
            # Recherche employ√©s
            if any(word in query_lower for word in ['employ√©', 'personnel', '√©quipe']):
                employees = self.db.execute_query("""
                    SELECT nom, prenom, poste, competences 
                    FROM employees 
                    WHERE nom LIKE ? OR prenom LIKE ? OR competences LIKE ?
                    LIMIT 5
                """, (f'%{query}%', f'%{query}%', f'%{query}%'))
                
                if employees:
                    results['employes'] = [dict(emp) for emp in employees]
            
            # Recherche clients
            if any(word in query_lower for word in ['client', 'entreprise']):
                companies = self.db.execute_query("""
                    SELECT nom, secteur, ville 
                    FROM companies 
                    WHERE nom LIKE ? OR secteur LIKE ?
                    LIMIT 5
                """, (f'%{query}%', f'%{query}%'))
                
                if companies:
                    results['entreprises'] = [dict(comp) for comp in companies]
            
        except Exception as e:
            logger.error(f"Erreur recherche ERP: {e}")
            results['error'] = str(e)
        
        return results
    
    def _get_erp_statistics(self) -> Dict[str, Any]:
        """R√©cup√®re les statistiques de l'ERP"""
        if not self.db:
            return {}
        
        try:
            stats = {}
            
            # Projets par statut
            project_stats = self.db.execute_query("""
                SELECT statut, COUNT(*) as count, SUM(prix_estime) as valeur
                FROM projects 
                GROUP BY statut
            """)
            stats['projets'] = {row['statut']: {
                'nombre': row['count'],
                'valeur': row['valeur'] or 0
            } for row in project_stats}
            
            # Stock faible
            low_stock = self.db.execute_query("""
                SELECT COUNT(*) as count 
                FROM inventory_items 
                WHERE quantite_metric <= limite_minimale_metric
            """)
            stats['stock_faible'] = low_stock[0]['count'] if low_stock else 0
            
            # Employ√©s disponibles
            available_emp = self.db.execute_query("""
                SELECT COUNT(*) as count 
                FROM employees 
                WHERE disponible = 1
            """)
            stats['employes_disponibles'] = available_emp[0]['count'] if available_emp else 0
            
            # Bons de travail en cours
            active_bt = self.db.execute_query("""
                SELECT COUNT(*) as count 
                FROM formulaires 
                WHERE type_formulaire = 'BON_TRAVAIL' 
                AND statut IN ('VALID√â', 'EN_COURS')
            """)
            stats['bons_travail_actifs'] = active_bt[0]['count'] if active_bt else 0
            
            return stats
            
        except Exception as e:
            logger.error(f"Erreur statistiques: {e}")
            return {}
    
    def _get_current_projects(self) -> List[Dict]:
        """R√©cup√®re sp√©cifiquement les projets en cours"""
        if not self.db:
            return []
        
        try:
            # Requ√™te simple pour les projets en cours
            projects = self.db.execute_query("""
                SELECT 
                    p.nom_projet,
                    p.statut,
                    p.priorite,
                    p.prix_estime,
                    p.description,
                    p.date_prevu,
                    c.nom as client_nom
                FROM projects p
                LEFT JOIN companies c ON p.client_company_id = c.id
                WHERE p.statut = 'EN COURS'
                ORDER BY p.priorite DESC, p.updated_at DESC
            """)
            
            return [dict(p) for p in projects] if projects else []
            
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration projets en cours: {e}")
            # Essai sans jointure si erreur
            try:
                projects = self.db.execute_query("""
                    SELECT nom_projet, statut, priorite, prix_estime, description, date_prevu
                    FROM projects
                    WHERE statut = 'EN COURS'
                    ORDER BY priorite DESC
                """)
                return [dict(p) for p in projects] if projects else []
            except Exception as e2:
                logger.error(f"Erreur requ√™te simple: {e2}")
                return []
    
    # =========================================================================
    # M√âTHODES CLAUDE
    # =========================================================================
    
    def _get_claude_response(self, prompt: str, context: Dict = None) -> str:
        """Obtient une r√©ponse de Claude"""
        if not self.client:
            return "‚ùå Assistant IA non configur√©. Veuillez d√©finir la cl√© API Claude."
        
        try:
            # Construire le message syst√®me avec contexte ERP
            system_message = """Tu es un assistant expert en gestion ERP pour l'industrie m√©tallurgique.
Tu as acc√®s aux donn√©es du syst√®me ERP incluant projets, inventaire, employ√©s, clients et production.

IMPORTANT - Format de r√©ponse:
- Utilise des tableaux markdown pour pr√©senter des listes de donn√©es (projets, inventaire, etc.)
- Utilise des titres avec ## et ### pour structurer les r√©ponses
- Utilise des **gras** pour les √©l√©ments importants
- Utilise des emojis pertinents (üìÅ projets, üì¶ inventaire, üë• employ√©s, etc.)
- Pour les montants, formate avec des espaces: 1 500 $ au lieu de 1500$
- Pr√©sente les dates en format lisible: 8 septembre 2025

Exemple de tableau pour projets:
| **Nom du projet** | **Statut** | **Priorit√©** | **Prix estim√©** | **Date pr√©vue** |
|-------------------|------------|--------------|-----------------|-----------------|
| Projet ABC | EN COURS | HAUTE | 25 000 $ | 15 mars 2025 |

R√©ponds de mani√®re professionnelle et structur√©e."""
            
            if context:
                system_message += f"\n\nContexte ERP actuel:\n{json.dumps(context, ensure_ascii=False, indent=2)}"
            
            # Historique de conversation
            messages = []
            for msg in st.session_state.ia_messages[-10:]:  # Limiter l'historique
                if msg['role'] != 'system':
                    messages.append({
                        "role": msg['role'],
                        "content": msg['content']
                    })
            
            # Ajouter le nouveau message
            messages.append({
                "role": "user",
                "content": prompt
            })
            
            # Appel API Claude
            response = self.client.messages.create(
                model=self.model,
                max_tokens=2000,
                temperature=0.7,
                system=system_message,
                messages=messages
            )
            
            return response.content[0].text
            
        except Exception as e:
            logger.error(f"Erreur Claude: {e}")
            return f"‚ùå Erreur: {str(e)}"
    
    # =========================================================================
    # M√âTHODES D'INTERFACE
    # =========================================================================
    
    def show_page(self):
        """Affiche la page de l'assistant IA"""
        
        # Styles CSS
        st.markdown("""
        <style>
        .ia-header {
            background: linear-gradient(135deg, #00A971 0%, #00673D 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .ia-header h1 {
            margin: 0;
            font-size: 2.5rem;
        }
        
        .stats-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
            border-left: 4px solid #00A971;
            margin-bottom: 0.5rem;
        }
        
        .search-result {
            background: #e6f7f1;
            border-radius: 8px;
            padding: 1rem;
            margin: 0.5rem 0;
            border-left: 4px solid #00A971;
        }
        
        .message-user {
            background: #e3f2fd;
            border-radius: 8px;
            padding: 1rem;
            margin: 0.5rem 0;
            margin-left: 20%;
        }
        
        .message-assistant {
            background: #f5f5f5;
            border-radius: 8px;
            padding: 1rem;
            margin: 0.5rem 0;
            margin-right: 20%;
        }
        
        .help-box {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
        }
        
        /* Styles pour les tableaux markdown */
        .message-assistant table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        
        .message-assistant table th {
            background: linear-gradient(135deg, #00A971 0%, #00673D 100%);
            color: white;
            padding: 0.75rem;
            text-align: left;
            font-weight: 600;
        }
        
        .message-assistant table td {
            padding: 0.75rem;
            border-bottom: 1px solid #e5e5e5;
        }
        
        .message-assistant table tr:hover {
            background: #f8f9fa;
        }
        
        .message-assistant table tr:last-child td {
            border-bottom: none;
        }
        
        /* Styles pour les titres */
        .message-assistant h2 {
            color: #00673D;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }
        
        .message-assistant h3 {
            color: #00A971;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            font-size: 1.2rem;
        }
        
        /* Styles pour le code inline */
        .message-assistant code {
            background: #e6f7f1;
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
            color: #00673D;
            font-size: 0.9em;
        }
        
        /* Am√©lioration des listes */
        .message-assistant ul, .message-assistant ol {
            margin: 0.5rem 0;
            padding-left: 2rem;
        }
        
        .message-assistant li {
            margin: 0.25rem 0;
        }
        </style>
        """, unsafe_allow_html=True)
        
        # Header
        st.markdown("""
        <div class="ia-header">
            <h1>ü§ñ Assistant IA Expert ERP</h1>
            <p>Intelligence artificielle int√©gr√©e pour l'analyse de vos donn√©es m√©tallurgiques</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Sidebar
        with st.sidebar:
            st.markdown("### üîß Options")
            
            if st.button("üîÑ Nouvelle conversation", use_container_width=True):
                st.session_state.ia_messages = []
                st.rerun()
            
            st.divider()
            
            # Statistiques ERP
            st.markdown("### üìä Statistiques ERP")
            stats = self._get_erp_statistics()
            
            if stats:
                # Projets
                if 'projets' in stats:
                    total_projets = sum(v['nombre'] for v in stats['projets'].values())
                    st.metric("Projets totaux", total_projets)
                    
                    if stats['projets'].get('EN COURS'):
                        st.metric("En cours", stats['projets']['EN COURS']['nombre'])
                
                # Autres m√©triques
                if 'stock_faible' in stats:
                    st.metric("Articles stock faible", stats['stock_faible'])
                
                if 'employes_disponibles' in stats:
                    st.metric("Employ√©s disponibles", stats['employes_disponibles'])
                
                if 'bons_travail_actifs' in stats:
                    st.metric("Bons travail actifs", stats['bons_travail_actifs'])
            
            st.divider()
            
            # Aide
            with st.expander("üí° Aide"):
                st.markdown("""
                **Commandes disponibles:**
                - `/erp [recherche]` - Rechercher dans l'ERP
                - `/stats` - Voir les statistiques
                - `/help` - Afficher l'aide
                
                **Exemples:**
                - `/erp projet chassis`
                - `/erp stock acier`
                - `/erp employ√© soudeur`
                """)
        
        # Zone de chat
        chat_container = st.container()
        
        # Afficher l'historique
        with chat_container:
            if not st.session_state.ia_messages:
                st.markdown("""
                <div class="help-box">
                    <h4>üëã Bienvenue dans l'Assistant IA ERP!</h4>
                    <p>Je peux vous aider √†:</p>
                    <ul>
                        <li>Analyser vos donn√©es de production</li>
                        <li>Rechercher dans vos projets, inventaire et ressources</li>
                        <li>Fournir des recommandations bas√©es sur vos donn√©es</li>
                        <li>R√©pondre √† vos questions sur la m√©tallurgie</li>
                    </ul>
                    <p><strong>Essayez:</strong> "Montre-moi les projets en cours" ou "/erp stock acier"</p>
                </div>
                """, unsafe_allow_html=True)
            
            # Afficher les messages
            for msg in st.session_state.ia_messages:
                if msg['role'] == 'user':
                    st.markdown(f"""
                    <div class="message-user">
                        <strong>üë§ Vous:</strong><br>
                        {msg['content']}
                    </div>
                    """, unsafe_allow_html=True)
                elif msg['role'] == 'assistant':
                    # Convertir le markdown en HTML pour un meilleur rendu
                    content = msg['content']
                    # Le markdown de Streamlit g√®re d√©j√† bien les tableaux et le formatage
                    with st.container():
                        st.markdown(f"""
                        <div class="message-assistant">
                            <strong>ü§ñ Assistant:</strong>
                        </div>
                        """, unsafe_allow_html=True)
                        # Utiliser le markdown natif de Streamlit pour le contenu
                        st.markdown(content)
        
        # Input
        user_input = st.chat_input("Posez votre question ou tapez /help...")
        
        if user_input:
            # Ajouter le message utilisateur
            st.session_state.ia_messages.append({
                'role': 'user',
                'content': user_input
            })
            
            # Traiter la commande
            response = self._process_input(user_input)
            
            # Ajouter la r√©ponse
            st.session_state.ia_messages.append({
                'role': 'assistant',
                'content': response
            })
            
            st.rerun()
    
    def _process_input(self, user_input: str) -> str:
        """Traite l'input utilisateur"""
        input_lower = user_input.lower().strip()
        
        # Commande help
        if input_lower == '/help':
            return self._get_help_text()
        
        # Commande debug (pour v√©rifier la connexion DB)
        elif input_lower == '/debug':
            return self._get_debug_info()
        
        # Commande stats
        elif input_lower == '/stats':
            stats = self._get_erp_statistics()
            return self._format_statistics(stats)
        
        # Commande recherche ERP
        elif input_lower.startswith('/erp '):
            query = user_input[5:].strip()
            results = self._search_erp_data(query)
            
            # Enrichir avec Claude si disponible
            if self.client and results:
                context = {'recherche_erp': results}
                return self._get_claude_response(
                    f"Pr√©sente ces r√©sultats de recherche ERP de mani√®re claire: {json.dumps(results, ensure_ascii=False)}",
                    context
                )
            else:
                return self._format_search_results(results)
        
        # Question normale - utiliser Claude avec contexte ERP
        else:
            # V√©rifier si la question concerne l'ERP
            erp_keywords = ['projet', 'stock', 'inventaire', 'employ√©', 'client', 'production', 'bon de travail']
            
            context = {}
            
            # Si mots-cl√©s ERP d√©tect√©s, chercher des donn√©es pertinentes
            if any(keyword in input_lower for keyword in erp_keywords):
                # Pour les questions sur les projets en cours sp√©cifiquement
                if 'en cours' in input_lower and 'projet' in input_lower:
                    projets_en_cours = self._get_current_projects()
                    if projets_en_cours:
                        context['projets_en_cours'] = projets_en_cours
                        context['format_projets'] = "tableau"  # Indication pour formater en tableau
                
                # Recherche automatique g√©n√©rale
                search_results = self._search_erp_data(user_input)
                if search_results:
                    context['donnees_erp'] = search_results
                
                # Ajouter les stats si demand√©
                if any(word in input_lower for word in ['statistique', 'stats', 'nombre', 'combien']):
                    context['statistiques'] = self._get_erp_statistics()
            
            return self._get_claude_response(user_input, context)
    
    def _get_debug_info(self) -> str:
        """Retourne des informations de debug sur la connexion DB"""
        lines = ["**üîß Debug - Informations de connexion**\n"]
        
        # Info environnement
        lines.append(f"**Environnement:**")
        lines.append(f"- OS: {os.name}")
        lines.append(f"- R√©pertoire actuel: {os.getcwd()}")
        lines.append(f"- Sur Render: {'OUI' if os.path.exists('/opt/render/project') else 'NON'}")
        lines.append("")
        
        # V√©rifier la DB
        if self.db:
            lines.append("**Base de donn√©es:**")
            lines.append(f"- Instance DB: ‚úÖ Disponible")
            
            # Afficher le chemin de la DB si disponible
            if hasattr(self.db, 'db_path'):
                lines.append(f"- Chemin DB: {self.db.db_path}")
                # V√©rifier si le fichier existe
                if os.path.exists(self.db.db_path):
                    lines.append(f"- Fichier DB existe: ‚úÖ")
                    lines.append(f"- Taille: {os.path.getsize(self.db.db_path) / 1024 / 1024:.2f} MB")
                else:
                    lines.append(f"- Fichier DB existe: ‚ùå")
            
            # Tester la connexion
            try:
                # Test simple
                result = self.db.execute_query("SELECT COUNT(*) as count FROM sqlite_master WHERE type='table'")
                if result:
                    lines.append(f"- Tables dans la DB: {result[0]['count']}")
                
                # Compter les projets
                projects_count = self.db.execute_query("SELECT COUNT(*) as count FROM projects")
                if projects_count:
                    lines.append(f"- Nombre total de projets: {projects_count[0]['count']}")
                
                # Projets en cours
                en_cours = self.db.execute_query("SELECT COUNT(*) as count FROM projects WHERE statut = 'EN COURS'")
                if en_cours:
                    lines.append(f"- Projets en cours: {en_cours[0]['count']}")
                
                # Afficher quelques projets
                sample_projects = self.db.execute_query("""
                    SELECT nom_projet, statut 
                    FROM projects 
                    WHERE statut = 'EN COURS' 
                    LIMIT 3
                """)
                
                if sample_projects:
                    lines.append("\n**Exemples de projets en cours:**")
                    for p in sample_projects:
                        lines.append(f"- {p['nom_projet']} ({p['statut']})")
                else:
                    lines.append("- ‚ö†Ô∏è Aucun projet en cours trouv√©")
                    
            except Exception as e:
                lines.append(f"- ‚ùå Erreur lors du test: {str(e)}")
        else:
            lines.append("**Base de donn√©es:** ‚ùå Non disponible")
        
        # V√©rifier la cl√© API
        lines.append("\n**API Claude:**")
        if self.api_key:
            lines.append(f"- Cl√© configur√©e: ‚úÖ (commence par {self.api_key[:10]}...)")
            lines.append(f"- Client initialis√©: {'‚úÖ' if self.client else '‚ùå'}")
        else:
            lines.append("- Cl√© configur√©e: ‚ùå")
        
        return "\n".join(lines)
    
    def _get_help_text(self) -> str:
        """Retourne le texte d'aide"""
        return """
**ü§ñ Assistant IA ERP - Aide**

**Commandes disponibles:**
- `/erp [recherche]` - Rechercher dans vos donn√©es ERP
- `/stats` - Afficher les statistiques globales
- `/help` - Afficher cette aide
- `/debug` - Afficher les informations de debug

**Exemples de recherches ERP:**
- `/erp projet automobile` - Recherche de projets
- `/erp stock acier inoxydable` - √âtat des stocks
- `/erp employ√© soudeur` - Recherche d'employ√©s
- `/erp client quebec` - Recherche de clients

**Questions directes (sans commande):**
- "Quel est l'√©tat du projet AutoTech?"
- "Combien d'employ√©s sont disponibles?"
- "Analyse la charge de travail cette semaine"
- "Quelles sont les meilleures pratiques pour souder l'aluminium?"

**Capacit√©s:**
- Analyse de vos donn√©es de production
- Recommandations bas√©es sur votre inventaire
- Expertise en m√©tallurgie et fabrication
- Optimisation des processus

L'assistant a acc√®s √† toutes vos donn√©es ERP et peut les analyser pour vous fournir des insights pertinents.
"""
    
    def _format_statistics(self, stats: Dict) -> str:
        """Formate les statistiques pour l'affichage avec style am√©lior√©"""
        if not stats:
            return "üìä Aucune statistique disponible."
        
        lines = []
        lines.append("## üìä **Statistiques ERP**\n")
        
        # Projets avec tableau
        if 'projets' in stats and stats['projets']:
            lines.append("### üìÅ **R√©partition des projets**\n")
            lines.append("| **Statut** | **Nombre** | **Valeur totale** |")
            lines.append("|------------|------------|-------------------|")
            
            total_nombre = 0
            total_valeur = 0
            
            for statut, data in stats['projets'].items():
                nombre = data['nombre']
                valeur = data['valeur']
                total_nombre += nombre
                total_valeur += valeur
                lines.append(f"| {statut} | {nombre} | {valeur:,.0f} $ |")
            
            lines.append(f"| **TOTAL** | **{total_nombre}** | **{total_valeur:,.0f} $** |")
            lines.append("")
        
        # Autres stats en cartes
        lines.append("### üìà **Indicateurs cl√©s**\n")
        
        if 'stock_faible' in stats:
            lines.append(f"**‚ö†Ô∏è Stock faible**")
            lines.append(f"- Articles concern√©s: `{stats['stock_faible']}`")
            lines.append("")
        
        if 'employes_disponibles' in stats:
            lines.append(f"**üë• Ressources humaines**")
            lines.append(f"- Employ√©s disponibles: `{stats['employes_disponibles']}`")
            lines.append("")
        
        if 'bons_travail_actifs' in stats:
            lines.append(f"**üìã Production**")
            lines.append(f"- Bons de travail actifs: `{stats['bons_travail_actifs']}`")
            lines.append("")
        
        return "\n".join(lines)
    
    def _format_search_results(self, results: Dict) -> str:
        """Formate les r√©sultats de recherche avec un style am√©lior√©"""
        if 'error' in results:
            return f"‚ùå **Erreur:** {results['error']}"
        
        if not results:
            return "üîç Aucun r√©sultat trouv√©."
        
        lines = []
        lines.append("## üîç R√©sultats de recherche ERP\n")
        
        # Projets avec tableau
        if 'projets' in results and results['projets']:
            lines.append("### üìÅ **Projets trouv√©s**\n")
            lines.append("| **Nom du projet** | **Statut** | **Client** | **Budget** |")
            lines.append("|-------------------|------------|------------|------------|")
            
            for p in results['projets']:
                nom = p['nom_projet']
                statut = p['statut']
                client = p.get('client_nom', 'N/A')
                budget = f"{p['prix_estime']:,.0f} $" if p.get('prix_estime') else "N/A"
                lines.append(f"| {nom} | {statut} | {client} | {budget} |")
            lines.append("")
        
        # Inventaire avec style carte
        if 'inventaire' in results and results['inventaire']:
            lines.append("### üì¶ **Articles d'inventaire**\n")
            for item in results['inventaire']:
                lines.append(f"**‚û§ {item['nom']}**")
                lines.append(f"- üìä Quantit√©: `{item['quantite_metric']}`")
                lines.append(f"- üìà Statut: `{item['statut']}`")
                lines.append("")
        
        # Employ√©s avec tableau
        if 'employes' in results and results['employes']:
            lines.append("### üë• **Employ√©s**\n")
            lines.append("| **Nom** | **Poste** | **Comp√©tences** |")
            lines.append("|---------|-----------|-----------------|")
            
            for emp in results['employes']:
                nom_complet = f"{emp['prenom']} {emp['nom']}"
                poste = emp['poste']
                competences = emp.get('competences', 'N/A')
                lines.append(f"| {nom_complet} | {poste} | {competences} |")
            lines.append("")
        
        # Entreprises avec style carte
        if 'entreprises' in results and results['entreprises']:
            lines.append("### üè¢ **Entreprises**\n")
            for comp in results['entreprises']:
                lines.append(f"**‚û§ {comp['nom']}**")
                lines.append(f"- üè≠ Secteur: `{comp['secteur']}`")
                lines.append(f"- üìç Ville: `{comp['ville']}`")
                lines.append("")
        
        return "\n".join(lines)


def show_assistant_ia_page(db=None):
    """
    Fonction principale pour afficher la page de l'assistant IA
    Appel√©e depuis app.py
    """
    # Initialiser l'assistant
    if 'assistant_ia_simple' not in st.session_state:
        st.session_state.assistant_ia_simple = AssistantIASimple(db=db)
    
    # Afficher la page
    st.session_state.assistant_ia_simple.show_page()