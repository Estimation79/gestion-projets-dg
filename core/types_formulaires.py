# formulaires/core/types_formulaires.py
# Constantes et types de formulaires - Base de l'architecture modulaire

"""
Constantes et √©num√©rations pour le module formulaires.
Ce fichier contient tous les types, statuts et priorit√©s utilis√©s 
dans l'ensemble du syst√®me de gestion des formulaires.
"""

# Types de formulaires avec leurs configurations
TYPES_FORMULAIRES = {
    'BON_TRAVAIL': {
        'prefix': 'BT', 
        'nom': 'Bon de Travail', 
        'icon': 'üîß',
        'description': 'Documents de travail interne - Production et maintenance'
    },
    'BON_ACHAT': {
        'prefix': 'BA', 
        'nom': "Bon d'Achats", 
        'icon': 'üõí',
        'description': 'Demandes d\'achats - Approvisionnement mat√©riaux'
    },
    'BON_COMMANDE': {
        'prefix': 'BC', 
        'nom': 'Bon de Commande', 
        'icon': 'üì¶',
        'description': 'Commandes officielles fournisseurs - Contrats d\'achat'
    },
    'DEMANDE_PRIX': {
        'prefix': 'DP', 
        'nom': 'Demande de Prix', 
        'icon': 'üí∞',
        'description': 'RFQ Multi-fournisseurs - Appels d\'offres'
    },
    'ESTIMATION': {
        'prefix': 'EST', 
        'nom': 'Estimation', 
        'icon': 'üìä',
        'description': 'Devis clients - Estimations projets'
    }
}

# Statuts possibles pour tous les formulaires
STATUTS_FORMULAIRES = [
    'BROUILLON',    # Document en cours de cr√©ation
    'VALID√â',       # Document valid√© mais pas encore envoy√©
    'ENVOY√â',       # Document envoy√© (fournisseur/client/√©quipe)
    'APPROUV√â',     # Document approuv√© par le destinataire
    'TERMIN√â',      # Document compl√®tement trait√©
    'ANNUL√â'        # Document annul√©
]

# Priorit√©s applicables aux formulaires
PRIORITES_FORMULAIRES = [
    'NORMAL',       # Priorit√© standard
    'URGENT',       # Traitement prioritaire
    'CRITIQUE'      # Traitement imm√©diat requis
]

# Configuration des ic√¥nes par statut (pour l'affichage)
ICONES_STATUTS = {
    'BROUILLON': 'üìù',
    'VALID√â': '‚úÖ', 
    'ENVOY√â': 'üì§',
    'APPROUV√â': 'üëç',
    'TERMIN√â': '‚úîÔ∏è',
    'ANNUL√â': '‚ùå'
}

# Configuration des ic√¥nes par priorit√©
ICONES_PRIORITES = {
    'NORMAL': 'üü¢',
    'URGENT': 'üü°', 
    'CRITIQUE': 'üî¥'
}

# Templates industrie pour les estimations
TEMPLATES_INDUSTRIE = {
    'AUTOMOBILE': {
        'marge_defaut': 15,
        'delai_standard': 21,
        'coefficient_complexite': 1.2,
        'cout_certification_pct': 5,
        'garantie': '12 mois pi√®ces et main d\'≈ìuvre',
        'conditions_paiement': '30 jours net'
    },
    'AERONAUTIQUE': {
        'marge_defaut': 25,
        'delai_standard': 45,
        'coefficient_complexite': 1.5,
        'cout_certification_pct': 15,
        'garantie': '24 mois certification a√©ro',
        'conditions_paiement': '50% avance + 50% livraison'
    },
    'CONSTRUCTION': {
        'marge_defaut': 12,
        'delai_standard': 14,
        'coefficient_complexite': 1.1,
        'cout_certification_pct': 2,
        'garantie': '12 mois installation',
        'conditions_paiement': '30 jours net'
    },
    'GENERAL': {
        'marge_defaut': 20,
        'delai_standard': 21,
        'coefficient_complexite': 1.0,
        'cout_certification_pct': 0,
        'garantie': '12 mois standard',
        'conditions_paiement': '30 jours net'
    }
}

# Unit√©s de mesure communes
UNITES_MESURE = [
    'UN',      # Unit√©
    'KG',      # Kilogramme
    'M',       # M√®tre
    'M¬≤',      # M√®tre carr√©
    'M¬≥',      # M√®tre cube
    'L',       # Litre
    'T',       # Tonne
    'H',       # Heure
    'J',       # Jour
    'BO√éTE',   # Bo√Æte
    'SAC',     # Sac
    'SERVICE', # Service
    'FORFAIT'  # Forfait
]

# Types de validation possibles
TYPES_VALIDATION = [
    'CREATION',              # Cr√©ation du document
    'CHANGEMENT_STATUT',     # Modification du statut
    'MODIFICATION',          # Modification du contenu
    'RECEPTION_MARCHANDISES', # R√©ception (BC)
    'SELECTION_GAGNANT',     # S√©lection fournisseur (DP)
    'CONVERSION',            # Conversion d'un type vers un autre
    'APPROBATION',           # Approbation hi√©rarchique
    'REJET'                  # Rejet du document
]

# Devises support√©es
DEVISES = ['CAD', 'USD', 'EUR']

# Conditions de paiement standards
CONDITIONS_PAIEMENT = [
    '15 jours net',
    '30 jours net', 
    '45 jours net',
    '60 jours net',
    '√Ä r√©ception',
    'Comptant',
    'Virement imm√©diat',
    '50% avance + 50% livraison'
]

def get_type_formulaire_config(type_formulaire: str) -> dict:
    """
    R√©cup√®re la configuration d'un type de formulaire.
    
    Args:
        type_formulaire: Type du formulaire (cl√© de TYPES_FORMULAIRES)
        
    Returns:
        dict: Configuration du type ou dict vide si non trouv√©
    """
    return TYPES_FORMULAIRES.get(type_formulaire, {})

def get_icone_statut(statut: str) -> str:
    """
    R√©cup√®re l'ic√¥ne correspondant √† un statut.
    
    Args:
        statut: Statut du formulaire
        
    Returns:
        str: Ic√¥ne correspondante ou '‚ùì' si non trouv√©
    """
    return ICONES_STATUTS.get(statut, '‚ùì')

def get_icone_priorite(priorite: str) -> str:
    """
    R√©cup√®re l'ic√¥ne correspondant √† une priorit√©.
    
    Args:
        priorite: Priorit√© du formulaire
        
    Returns:
        str: Ic√¥ne correspondante ou '‚ö™' si non trouv√©
    """
    return ICONES_PRIORITES.get(priorite, '‚ö™')

def valider_type_formulaire(type_formulaire: str) -> bool:
    """
    Valide qu'un type de formulaire existe.
    
    Args:
        type_formulaire: Type √† valider
        
    Returns:
        bool: True si le type existe, False sinon
    """
    return type_formulaire in TYPES_FORMULAIRES

def valider_statut(statut: str) -> bool:
    """
    Valide qu'un statut est autoris√©.
    
    Args:
        statut: Statut √† valider
        
    Returns:
        bool: True si le statut est valide, False sinon
    """
    return statut in STATUTS_FORMULAIRES

def valider_priorite(priorite: str) -> bool:
    """
    Valide qu'une priorit√© est autoris√©e.
    
    Args:
        priorite: Priorit√© √† valider
        
    Returns:
        bool: True si la priorit√© est valide, False sinon
    """
    return priorite in PRIORITES_FORMULAIRES
