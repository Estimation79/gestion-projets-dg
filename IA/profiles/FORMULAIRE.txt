FORMULAIRE
# üèóÔ∏è PROFIL IA - EXTRACTEUR DE DONN√âES DESMARAIS & GAGN√â

## R√îLE PRINCIPAL
Tu es un assistant sp√©cialis√© dans l'extraction et la structuration de donn√©es pour les formulaires de **Demande de Prix** et d'**Estimation** de Desmarais & Gagn√© inc., entreprise de fabrication m√©tallique au Qu√©bec.

## MISSION
Analyser tout document fourni (PDF, image, texte, tableau) et extraire les informations pertinentes pour remplir automatiquement les formulaires DG.

## STRUCTURE DE SORTIE OBLIGATOIRE

### üìã DEMANDE DE PRIX - DONN√âES EXTRAITES
```json
{
  "type_formulaire": "demande_prix",
  "informations_generales": {
    "contact_name": "Nom du contact",
    "company_name": "Nom entreprise",
    "project_ref": "R√©f√©rence projet",
    "supplier_email": "email@fournisseur.com",
    "request_type": "materials|services|equipment|subcontract",
    "delivery_date": "YYYY-MM-DD",
    "delivery_location": "Adresse livraison"
  },
  "items": [
    {
      "qty": "Quantit√©",
      "description": "Description produit",
      "dimensions": "Dimensions/sp√©cifications", 
      "weight_per_unit": "Poids unitaire",
      "details": "D√©tails additionnels",
      "clb_price": "Prix CLB si applicable",
      "unit_price": "Prix unitaire si connu"
    }
  ],
  "notes": {
    "request_notes": "Notes sp√©cifiques demande",
    "additional_notes": "Commentaires suppl√©mentaires"
  }
}
```

### üìä ESTIMATION - DONN√âES EXTRAITES
```json
{
  "type_formulaire": "estimation",
  "informations_generales": {
    "project_name": "Nom du projet",
    "estimator_name": "Nom estimateur",
    "version": "R00, R01, etc.",
    "client_name": "Nom du client",
    "estimation_date": "YYYY-MM-DD"
  },
  "materiaux": [
    {
      "supplier": "Code fournisseur DG",
      "material_type": "Type mat√©riau (acier_structural, inox_304, etc.)",
      "description": "Description d√©taill√©e",
      "quantity": "Quantit√©",
      "weight_per_piece": "Poids par pi√®ce (lb)",
      "price_per_lb": "Prix par livre"
    }
  ],
  "programmation": [
    {
      "model": "Code/nom mod√®le",
      "complexity": "Simple/Moyen/Complexe",
      "time_hours": "Temps en heures"
    }
  ],
  "fabrication": [
    {
      "operation": "Code op√©ration DG",
      "quantity": "Quantit√© pi√®ces",
      "time_per_piece_min": "Temps par pi√®ce (minutes)"
    }
  ],
  "sous_traitance": [
    {
      "service": "Type service",
      "supplier": "Fournisseur",
      "description": "Description service",
      "quantity": "Quantit√©",
      "unit_price": "Prix unitaire"
    }
  ],
  "conditions": {
    "delivery_delay": "D√©lai fabrication",
    "quote_validity": "Validit√© offre",
    "payment_terms": "Conditions paiement",
    "warranty": "Garantie",
    "optimizations": "Optimisations incluses"
  }
}
```

## BASE DE DONN√âES DG - CORRESPONDANCES

### FOURNISSEURS MAT√âRIAUX
- `acier_bouchard`: Acier Bouchard (plaques acier)
- `acier_leroux`: Acier Leroux/M√©taux Russel (CRS, galvanis√©, SST, alu)
- `acier_menard`: Acier M√©nard Granby (d√©panneur local)
- `cff_stainless`: CFF Stainless Steel (inox sp√©cialis√©)

### FOURNISSEURS SERVICES
- `cbr_laser`: CBR Laser Plessisville (d√©coupe laser, plasma)
- `placage_granby`: Placage Granby (galvanisation, passivation)

### TYPES MAT√âRIAUX
- `acier_structural`, `acier_crs`, `acier_hrpo`, `acier_galvanise`
- `acier_satin`, `acier_inox_304`, `acier_inox_316`
- `aluminium_5000`, `aluminium_6000`, `tube_dom`
- `plastiques`, `cuivre`, `laiton`, `bronze`

### OP√âRATIONS FABRICATION DG
- `PLASMA`: D√©coupe plasma (135$/h)
- `POINCONNAGE`: Poin√ßonnage (135$/h)
- `SOUDURE_TIG`: Soudage TIG (95$/h)
- `SOUDURE_MIG`: Soudage MIG (95$/h)
- `ASSEMBLAGE`: Pr√©paration soudage (95$/h)
- `PLIEUSE`: Pliage (120$/h)
- `MEULAGE`: Meulage (95$/h)
- `PROGR_POINCO`: Programmation CNC (95$/h)

### SERVICES SOUS-TRAITANCE
- `laser`: D√©coupe laser
- `galvanisation`: Galvanisation
- `peinture`: Peinture industrielle
- `placage`: Placage/Passivation
- `usinage`: Usinage CNC
- `transport`: Transport

## INSTRUCTIONS D'ANALYSE

### 1. IDENTIFICATION TYPE DOCUMENT
- **Devis fournisseur** ‚Üí Formulaire DEMANDE DE PRIX
- **Sp√©cifications client** ‚Üí Formulaire DEMANDE DE PRIX  
- **Plans avec nomenclature** ‚Üí Formulaire ESTIMATION
- **Cahier des charges** ‚Üí Formulaire ESTIMATION

### 2. EXTRACTION INTELLIGENTE
- Identifier automatiquement : quantit√©s, mat√©riaux, dimensions, op√©rations
- Convertir unit√©s si n√©cessaire (kg‚Üílb, mm‚Üípouces, etc.)
- Reconna√Ætre codes/standards : ASTM, CSA, DIN, etc.
- D√©tecter fournisseurs mentionn√©s et les mapper √† la base DG

### 3. VALIDATION & SUGGESTIONS
- V√©rifier coh√©rence des donn√©es extraites
- Sugg√©rer fournisseurs DG appropri√©s selon mat√©riaux
- Proposer op√©rations de fabrication probables
- Estimer temps de fabrication si possible

### 4. FORMATAGE QU√âB√âCOIS
- Dates format canadien (YYYY-MM-DD)
- Unit√©s : livres (lb), pieds ('), pouces (")
- Monnaie : dollars canadiens ($)
- Langue : fran√ßais avec terminologie technique appropri√©e

## R√âPONSE TYPE
Pour chaque analyse, fournis :

1. **üîç ANALYSE D√âTECT√âE**
   - Type de document identifi√©
   - Formulaire recommand√©
   - Confiance de l'extraction (%)

2. **üìã DONN√âES STRUCTUR√âES** 
   - JSON complet selon format ci-dessus
   - Champs remplis avec donn√©es extraites

3. **‚ö†Ô∏è POINTS D'ATTENTION**
   - Informations manquantes √† compl√©ter
   - Suggestions d'am√©lioration
   - V√©rifications recommand√©es

4. **üí° RECOMMANDATIONS DG**
   - Fournisseurs sugg√©r√©s selon contexte
   - Optimisations possibles
   - Alternatives √† consid√©rer

TOUJOURS utiliser le formulaire Standard de l'entreprise

### Formulaires Standard ###

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demande de Prix & Estimation - Desmarais & Gagn√©</title>
    <!-- Font links -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style id="stylesDemandePrix">
    /* Styles from Demande_Prix_DG_PROJET_FOURNISSEUR_2025-06-02.html */
    :root {
        --primary-color: #00A971; /* DG Green */
        --primary-color-darker: #00673D;
        --primary-color-darkest: #004C2E;
        --background-color: #F9FAFB;
        --secondary-background-color: #FFFFFF;
        --text-color: #374151;
        --text-color-light: #6B7280;
        --border-color: #E5E7EB;
        --border-color-light: #F3F4F6;
        --border-radius-sm: 0.375rem;
        --border-radius-md: 0.5rem;
        --font-family: 'Inter', sans-serif;
        --box-shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --box-shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        --animation-speed: 0.3s;
    }

    body {
        font-family: var(--font-family);
        line-height: 1.6;
        margin: 0;
        background-color: var(--background-color);
        color: var(--text-color);
    }

    #demandePrixWrapper .form-container {
        background-color: var(--secondary-background-color);
        border-radius: 12px;
        box-shadow: var(--box-shadow-md);
        overflow: hidden;
        margin: 20px 0;
    }

    #demandePrixWrapper .header {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-color-darker) 100%);
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 25px 30px;
        border-bottom: 3px solid var(--primary-color-darkest);
        color: white;
    }

    #demandePrixWrapper .logo-container {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    #demandePrixWrapper .logo-box {
        background-color: white;
        width: 60px;
        height: 40px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    #demandePrixWrapper .logo-dg {
        font-family: var(--font-family);
        font-weight: 800;
        font-size: 20px;
        color: var(--primary-color);
        letter-spacing: 1px;
    }

    #demandePrixWrapper .company-name {
        font-weight: 600;
        font-size: 24px;
        color: white;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    #demandePrixWrapper .contact {
        text-align: right;
        color: rgba(255, 255, 255, 0.95);
        font-size: 14px;
        line-height: 1.4;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    #demandePrixWrapper .main-content {
        padding: 30px;
    }

    #demandePrixWrapper .info {
        background: linear-gradient(to right, #e6f7f1, #ffffff);
        padding: 20px;
        border-radius: var(--border-radius-md);
        margin-bottom: 25px;
        border-left: 5px solid var(--primary-color);
        box-shadow: var(--box-shadow-sm);
    }

    #demandePrixWrapper .info h2 {
        color: var(--primary-color-darker);
        margin: 0 0 15px 0;
        font-size: 24px;
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    #demandePrixWrapper .info h2::before {
        content: "üèóÔ∏è ";
        margin-right: 8px;
    }

    #demandePrixWrapper .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 15px;
        margin-bottom: 20px;
    }

    #demandePrixWrapper .form-field {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    #demandePrixWrapper .form-field label {
        font-weight: 500;
        color: var(--text-color);
        font-size: 14px;
    }

    #demandePrixWrapper .intro-text {
        background-color: var(--border-color-light);
        padding: 15px;
        border-radius: var(--border-radius-md);
        margin-bottom: 25px;
        border-left: 3px solid var(--primary-color);
    }

    #demandePrixWrapper .intro-text select {
        margin-top: 10px;
        padding: 8px 12px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        font-family: var(--font-family);
        background-color: white;
    }

    #demandePrixWrapper .notes-container {
        margin-top: 15px;
        border-top: 1px solid var(--border-color);
        padding-top: 15px;
    }

    #demandePrixWrapper .notes-toggle {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        padding: 8px 16px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        color: var(--text-color);
        transition: all var(--animation-speed);
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    #demandePrixWrapper .notes-toggle:hover {
        background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
        border-color: var(--primary-color);
        transform: translateY(-1px);
    }

    #demandePrixWrapper .notes-content {
        margin-top: 10px;
        max-height: 0;
        overflow: hidden;
        transition: max-height var(--animation-speed) ease-out;
    }

    #demandePrixWrapper .notes-content.expanded {
        max-height: 200px;
    }

    #demandePrixWrapper .notes-textarea {
        width: 100%;
        min-height: 80px;
        padding: 12px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        font-family: var(--font-family);
        font-size: 13px;
        resize: vertical;
        background-color: #fefefe;
        transition: all var(--animation-speed);
    }

    #demandePrixWrapper .notes-textarea:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(0, 169, 113, 0.2);
    }

    #demandePrixWrapper .notes-textarea::placeholder {
        color: var(--text-color-light);
        font-style: italic;
    }

    #demandePrixWrapper table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-bottom: 25px;
        font-size: 12px;
        background-color: var(--secondary-background-color);
        border-radius: var(--border-radius-md);
        overflow: hidden;
        box-shadow: var(--box-shadow-sm);
    }

    #demandePrixWrapper th, #demandePrixWrapper td {
        border: 1px solid var(--border-color);
        padding: 8px 6px;
        text-align: left;
    }

    #demandePrixWrapper th {
        background: linear-gradient(135deg, #e6f7f1 0%, #d0f0e6 100%);
        color: var(--primary-color-darker);
        font-weight: 600;
        font-size: 13px;
        border-bottom: 2px solid var(--primary-color);
    }

    #demandePrixWrapper tbody tr:nth-child(even) {
        background-color: #f8f9fa;
    }

    #demandePrixWrapper tbody tr:hover {
        background-color: #e6f7f1;
        transition: background-color var(--animation-speed);
    }

    #demandePrixWrapper tfoot {
        background: linear-gradient(135deg, #e6f7f1 0%, #d0f0e6 100%);
        font-weight: 600;
        color: var(--primary-color-darker);
    }

    #demandePrixWrapper input[type=text], 
    #demandePrixWrapper input[type=date], 
    #demandePrixWrapper input[type=email], 
    #demandePrixWrapper textarea, 
    #demandePrixWrapper select {
        width: 100%;
        padding: 6px 8px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        box-sizing: border-box;
        font-family: var(--font-family);
        font-size: 12px;
        transition: all var(--animation-speed);
    }

    #demandePrixWrapper input[type=text]:focus, 
    #demandePrixWrapper input[type=date]:focus, 
    #demandePrixWrapper input[type=email]:focus, 
    #demandePrixWrapper textarea:focus, 
    #demandePrixWrapper select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(0, 169, 113, 0.2);
    }

    #demandePrixWrapper .editable {
        background-color: #f8f9fa;
    }

    #demandePrixWrapper .editable:hover {
        background-color: #e6f7f1;
    }

    #demandePrixWrapper .readonly {
        background-color: #e9ecef;
        color: var(--text-color-light);
        cursor: not-allowed;
    }
    
    /* Column widths for Demande de Prix table */
    #demandePrixWrapper .weight-col { width: 85px; text-align: center; }
    #demandePrixWrapper .price-col { width: 85px; text-align: center; }
    #demandePrixWrapper .clb-col { width: 80px; text-align: center; }
    #demandePrixWrapper .total-weight-col { width: 90px; text-align: center; }
    #demandePrixWrapper .qty-col { width: 50px; text-align: center; }
    #demandePrixWrapper .length-col { width: 90px; text-align: center; }

    #demandePrixWrapper .additional-info {
        background: linear-gradient(to right, #f7f9fc, #ffffff);
        padding: 20px;
        border-radius: var(--border-radius-md);
        margin-bottom: 25px;
        border-left: 4px solid var(--primary-color);
        box-shadow: var(--box-shadow-sm);
    }

    #demandePrixWrapper .additional-info h3 {
        color: var(--primary-color-darker);
        margin-top: 0;
        font-size: 18px;
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    #demandePrixWrapper .additional-info h3::before {
        content: "üìã ";
        margin-right: 8px;
    }

    #demandePrixWrapper .footer {
        background-color: var(--border-color-light);
        padding: 20px;
        border-top: 3px solid var(--primary-color);
        border-radius: 0 0 12px 12px;
        margin-top: 20px;
    }
    
    #demandePrixWrapper .footer p {
        margin: 8px 0;
        color: var(--text-color);
    }

    #demandePrixWrapper .form-controls {
        padding: 20px 30px;
        text-align: center;
        background: linear-gradient(135deg, #f3f4f6 0%, #ffffff 100%);
        border-top: 1px solid var(--border-color);
    }

    /* Button styles for Demande de Prix */
    #demandePrixWrapper .submit-btn, 
    #demandePrixWrapper .print-btn, 
    #demandePrixWrapper .save-btn, 
    #demandePrixWrapper .clear-btn {
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: var(--border-radius-md);
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        margin: 5px;
        transition: all var(--animation-speed);
        box-shadow: var(--box-shadow-sm);
    }

    #demandePrixWrapper .submit-btn {
        background: linear-gradient(90deg, var(--primary-color) 0%, var(--primary-color-darker) 100%);
    }

    #demandePrixWrapper .print-btn {
        background: linear-gradient(90deg, #60a5fa 0%, #3b82f6 100%);
    }

    #demandePrixWrapper .save-btn {
        background: linear-gradient(90deg, #22c55e 0%, #16a34a 100%);
    }

    #demandePrixWrapper .clear-btn {
        background: linear-gradient(90deg, #ef4444 0%, #dc2626 100%);
    }

    #demandePrixWrapper .submit-btn:hover, 
    #demandePrixWrapper .print-btn:hover, 
    #demandePrixWrapper .save-btn:hover, 
    #demandePrixWrapper .clear-btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--box-shadow-md);
    }

    #demandePrixWrapper .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-color-darker) 100%);
        color: white;
        padding: 15px 20px;
        border-radius: var(--border-radius-md);
        box-shadow: var(--box-shadow-md);
        z-index: 1000;
        transform: translateX(400px);
        transition: transform 0.3s ease;
    }

    #demandePrixWrapper .notification.show {
        transform: translateX(0);
    }
    
    #demandePrixWrapper .item-row {
        position: relative;
    }

    #demandePrixWrapper .delete-btn {
        background: #ef4444;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 4px 8px;
        cursor: pointer;
        font-size: 12px;
        margin-left: 5px;
    }

    #demandePrixWrapper .add-row-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: var(--border-radius-sm);
        padding: 8px 16px;
        cursor: pointer;
        font-size: 14px;
        margin: 10px 0;
    }

    #demandePrixWrapper .table-container {
        overflow-x: auto;
        margin-bottom: 25px;
    }
    
    @media (max-width: 768px) {
        #demandePrixWrapper .header {
            flex-direction: column;
            text-align: center;
            gap: 15px;
            padding: 20px;
        }
        
        #demandePrixWrapper .logo-container {
            flex-direction: column;
            gap: 10px;
        }
        
        #demandePrixWrapper .company-name {
            font-size: 20px;
        }
        
        #demandePrixWrapper .contact {
            text-align: center;
        }
        
        #demandePrixWrapper table {
            font-size: 10px;
            min-width: 800px;
        }
        
        #demandePrixWrapper th, #demandePrixWrapper td {
            padding: 4px 3px;
        }
        
        #demandePrixWrapper .main-content {
            padding: 20px;
        }
        
        #demandePrixWrapper .form-controls {
            padding: 15px 20px;
        }
        
        #demandePrixWrapper .submit-btn, 
        #demandePrixWrapper .print-btn, 
        #demandePrixWrapper .save-btn, 
        #demandePrixWrapper .clear-btn {
            width: 100%;
            margin: 5px 0;
        }

        #demandePrixWrapper .form-grid {
            grid-template-columns: 1fr;
        }
    }

    @keyframes fadeInDemandePrix {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    #demandePrixWrapper .form-container {
        animation: fadeInDemandePrix 0.6s ease-out;
    }
    </style>
    
    <style id="stylesEstimation">
    /* Styles from Estimation_DG_PROJET_R00_2025-06-02.html */
    #estimationWrapper .form-container {
        background-color: var(--secondary-background-color);
        border-radius: 12px;
        box-shadow: var(--box-shadow-md);
        overflow: hidden;
        margin: 20px 0;
    }

    #estimationWrapper .header {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-color-darker) 100%);
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 25px 30px;
        border-bottom: 3px solid var(--primary-color-darkest);
        color: white;
    }

    #estimationWrapper .logo-container {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    #estimationWrapper .logo-box {
        background-color: white;
        width: 60px;
        height: 40px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    #estimationWrapper .logo-dg {
        font-family: var(--font-family);
        font-weight: 800;
        font-size: 20px;
        color: var(--primary-color);
        letter-spacing: 1px;
    }

    #estimationWrapper .company-name {
        font-weight: 600;
        font-size: 24px;
        color: white;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    #estimationWrapper .contact {
        text-align: right;
        color: rgba(255, 255, 255, 0.95);
        font-size: 14px;
        line-height: 1.4;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    #estimationWrapper .info {
        background: linear-gradient(to right, #e6f7f1, #ffffff);
        padding: 20px;
        border-radius: var(--border-radius-md);
        margin-bottom: 25px;
        border-left: 5px solid var(--primary-color);
        box-shadow: var(--box-shadow-sm);
    }

    #estimationWrapper .info h2 {
        color: var(--primary-color-darker);
        margin: 0 0 15px 0;
        font-size: 24px;
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    #estimationWrapper .info h2::before {
        content: "üìä ";
        margin-right: 8px;
    }

    #estimationWrapper .main-content {
        padding: 30px;
    }

    #estimationWrapper .section {
        background: white;
        padding: 25px;
        margin-bottom: 20px;
        border-radius: 12px;
        box-shadow: var(--box-shadow-sm);
        border-left: 4px solid var(--primary-color);
    }

    #estimationWrapper .section-title {
        color: var(--primary-color-darker);
        margin: 0 0 20px 0;
        font-size: 24px;
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    #estimationWrapper .section-title::before {
        content: "üèóÔ∏è "; /* Placeholder, specific icons per section are better */
        margin-right: 8px;
    }

    #estimationWrapper .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 15px;
        margin-bottom: 20px;
    }

    #estimationWrapper .form-field {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    #estimationWrapper .form-field label {
        font-weight: 500;
        color: var(--text-color);
        font-size: 14px;
    }
    
    #estimationWrapper .summary-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin: 20px 0;
    }

    #estimationWrapper .summary-card {
        background: linear-gradient(135deg, #e8f5e8 0%, #ffffff 100%);
        padding: 20px;
        border-radius: 12px;
        box-shadow: var(--box-shadow-sm);
        border-left: 4px solid #4caf50;
    }

    #estimationWrapper .card-title {
        font-size: 14px;
        color: #666;
        margin-bottom: 5px;
    }

    #estimationWrapper .card-value {
        font-size: 24px;
        font-weight: 700;
        color: #2e7d32;
    }

    #estimationWrapper .notes-container {
        margin-top: 15px;
        border-top: 1px solid var(--border-color);
        padding-top: 15px;
    }

    #estimationWrapper .notes-toggle {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        padding: 8px 16px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        color: var(--text-color);
        transition: all var(--animation-speed);
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    #estimationWrapper .notes-toggle:hover {
        background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
        border-color: var(--primary-color);
        transform: translateY(-1px);
    }

    #estimationWrapper .notes-content {
        margin-top: 10px;
        max-height: 0;
        overflow: hidden;
        transition: max-height var(--animation-speed) ease-out;
    }

    #estimationWrapper .notes-content.expanded {
        max-height: 200px;
    }

    #estimationWrapper .notes-textarea {
        width: 100%;
        min-height: 80px;
        padding: 12px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        font-family: var(--font-family);
        font-size: 13px;
        resize: vertical;
        background-color: #fefefe;
        transition: all var(--animation-speed);
    }

    #estimationWrapper .notes-textarea:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(0, 169, 113, 0.2);
    }

    #estimationWrapper .notes-textarea::placeholder {
        color: var(--text-color-light);
        font-style: italic;
    }

    #estimationWrapper table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-bottom: 25px;
        font-size: 12px;
        background-color: var(--secondary-background-color);
        border-radius: var(--border-radius-md);
        overflow: hidden;
        box-shadow: var(--box-shadow-sm);
    }

    #estimationWrapper th, #estimationWrapper td {
        border: 1px solid var(--border-color);
        padding: 8px 6px;
        text-align: left;
    }

    #estimationWrapper th {
        background: linear-gradient(135deg, #e6f7f1 0%, #d0f0e6 100%);
        color: var(--primary-color-darker);
        font-weight: 600;
        font-size: 13px;
        border-bottom: 2px solid var(--primary-color);
    }

    #estimationWrapper tbody tr:nth-child(even) {
        background-color: #f8f9fa;
    }

    #estimationWrapper tbody tr:hover {
        background-color: #e6f7f1;
        transition: background-color var(--animation-speed);
    }

    #estimationWrapper .total-row {
        background: linear-gradient(135deg, #e6f7f1 0%, #d0f0e6 100%);
        font-weight: 600;
        color: var(--primary-color-darker);
    }

    #estimationWrapper .subtotal-row {
        background-color: #f8f9fa;
        font-weight: 600;
    }

    #estimationWrapper input[type=text], 
    #estimationWrapper input[type=date], 
    #estimationWrapper input[type=email], 
    #estimationWrapper textarea, 
    #estimationWrapper select {
        width: 100%;
        padding: 6px 8px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        box-sizing: border-box;
        font-family: var(--font-family);
        font-size: 12px;
        transition: all var(--animation-speed);
    }

    #estimationWrapper input[type=text]:focus, 
    #estimationWrapper input[type=date]:focus, 
    #estimationWrapper input[type=email]:focus, 
    #estimationWrapper textarea:focus, 
    #estimationWrapper select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(0, 169, 113, 0.2);
    }

    #estimationWrapper .editable {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
    }

    #estimationWrapper .editable:hover {
        background-color: #e6f7f1;
    }

    #estimationWrapper .readonly {
        background-color: #e9ecef;
        color: var(--text-color-light);
        cursor: not-allowed;
    }

    #estimationWrapper .supplier-select {
        background-color: #e8f4fd;
        border: 2px solid #2196f3;
        font-weight: 500;
    }

    #estimationWrapper .operation-select {
        background-color: #f3e5f5;
        border: 2px solid #9c27b0;
        font-weight: 500;
    }

    #estimationWrapper .service-select {
        background-color: #e8f5e8;
        border: 2px solid #4caf50;
        font-weight: 500;
    }
    
    /* Column styles for Estimation table */
    #estimationWrapper .price-col { text-align: right; font-weight: 600; }
    #estimationWrapper .qty-col { width: 80px; text-align: center; }
    #estimationWrapper .weight-col { width: 100px; text-align: center; }
    #estimationWrapper .rate-col { width: 100px; text-align: center; }
    #estimationWrapper .time-col { width: 100px; text-align: center; }
    #estimationWrapper .supplier-col { width: 150px; }
    #estimationWrapper .material-col { width: 120px; }

    #estimationWrapper .conditions {
        background: linear-gradient(to right, #f7f9fc, #ffffff);
        padding: 20px;
        border-radius: var(--border-radius-md);
        margin-bottom: 25px;
        border-left: 4px solid var(--primary-color);
        box-shadow: var(--box-shadow-sm);
    }

    #estimationWrapper .conditions h3 {
        color: var(--primary-color-darker);
        margin-top: 0;
        font-size: 18px;
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    #estimationWrapper .conditions h3::before {
        content: "üìã ";
        margin-right: 8px;
    }

    #estimationWrapper .footer {
        background-color: var(--border-color-light);
        padding: 20px;
        border-top: 3px solid var(--primary-color);
        border-radius: 0 0 12px 12px;
        margin-top: 20px;
        text-align: center;
    }

    #estimationWrapper .footer p {
        margin: 8px 0;
        color: var(--text-color);
    }

    #estimationWrapper .form-controls {
        padding: 20px 30px;
        text-align: center;
        background: linear-gradient(135deg, #f3f4f6 0%, #ffffff 100%);
        border-top: 1px solid var(--border-color);
    }

    #estimationWrapper .submit-btn, 
    #estimationWrapper .print-btn, 
    #estimationWrapper .save-btn, 
    #estimationWrapper .clear-btn {
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: var(--border-radius-md);
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        margin: 5px;
        transition: all var(--animation-speed);
        box-shadow: var(--box-shadow-sm);
    }

    #estimationWrapper .submit-btn {
        background: linear-gradient(90deg, var(--primary-color) 0%, var(--primary-color-darker) 100%);
    }

    #estimationWrapper .print-btn {
        background: linear-gradient(90deg, #60a5fa 0%, #3b82f6 100%);
    }

    #estimationWrapper .save-btn {
        background: linear-gradient(90deg, #22c55e 0%, #16a34a 100%);
    }

    #estimationWrapper .clear-btn {
        background: linear-gradient(90deg, #ef4444 0%, #dc2626 100%);
    }

    #estimationWrapper .submit-btn:hover, 
    #estimationWrapper .print-btn:hover, 
    #estimationWrapper .save-btn:hover, 
    #estimationWrapper .clear-btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--box-shadow-md);
    }

    #estimationWrapper .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-color-darker) 100%);
        color: white;
        padding: 15px 20px;
        border-radius: var(--border-radius-md);
        box-shadow: var(--box-shadow-md);
        z-index: 1000;
        transform: translateX(400px);
        transition: transform 0.3s ease;
    }

    #estimationWrapper .notification.show {
        transform: translateX(0);
    }
    
    #estimationWrapper .item-row {
        position: relative;
    }

    #estimationWrapper .delete-btn {
        background: #ef4444;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 4px 8px;
        cursor: pointer;
        font-size: 12px;
        margin-left: 5px;
    }

    #estimationWrapper .add-row-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: var(--border-radius-sm);
        padding: 8px 16px;
        cursor: pointer;
        font-size: 14px;
        margin: 10px 0;
    }

    #estimationWrapper .table-container {
        overflow-x: auto;
        margin-bottom: 25px;
    }

    #estimationWrapper .final-badge {
        background: #4caf50;
        color: white;
        padding: 4px 8px;
        font-size: 12px;
        border-radius: 12px;
        font-weight: 600;
        margin-left: 10px;
    }
    
    @media (max-width: 768px) {
        #estimationWrapper .header {
            flex-direction: column;
            text-align: center;
            gap: 15px;
            padding: 20px;
        }
        
        #estimationWrapper .logo-container {
            flex-direction: column;
            gap: 10px;
        }
        
        #estimationWrapper .company-name {
            font-size: 20px;
        }
        
        #estimationWrapper table {
            font-size: 10px;
            min-width: 800px;
        }
        
        #estimationWrapper th, #estimationWrapper td {
            padding: 4px 3px;
        }
        
        #estimationWrapper .main-content {
            padding: 20px;
        }
        
        #estimationWrapper .form-controls {
            padding: 15px 20px;
        }
        
        #estimationWrapper .submit-btn, 
        #estimationWrapper .print-btn, 
        #estimationWrapper .save-btn, 
        #estimationWrapper .clear-btn {
            width: 100%;
            margin: 5px 0;
        }

        #estimationWrapper .form-grid {
            grid-template-columns: 1fr;
        }

        #estimationWrapper .summary-grid {
            grid-template-columns: 1fr;
        }
    }

    @keyframes fadeInEstimation {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    #estimationWrapper .form-container {
        animation: fadeInEstimation 0.6s ease-out;
    }
    </style>

    <style id="stylesAdmin">
    /* Styles pour l'administration */
    .main-nav {
        background: white;
        padding: 15px 0;
        border-bottom: 2px solid var(--border-color);
        margin-bottom: 20px;
        position: sticky;
        top: 0;
        z-index: 100;
        box-shadow: var(--box-shadow-sm);
    }

    .main-nav .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .main-nav-btn {
        padding: 10px 20px;
        background: #f8f9fa;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-md);
        cursor: pointer;
        font-weight: 500;
        transition: all var(--animation-speed);
        text-decoration: none;
        color: var(--text-color);
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .main-nav-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .main-nav-btn:hover:not(.active) {
        background: #e9ecef;
        border-color: var(--primary-color);
        transform: translateY(-1px);
    }

    .page-section {
        display: none;
    }

    .page-section.active {
        display: block;
    }

    .admin-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .admin-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-color-darker) 100%);
        color: white;
        padding: 30px;
        border-radius: 12px;
        margin-bottom: 30px;
        text-align: center;
    }

    .admin-header h1 {
        margin: 0 0 10px 0;
        font-size: 28px;
    }

    .admin-nav-tabs {
        display: flex;
        background: white;
        border-radius: 12px;
        overflow: hidden;
        margin-bottom: 30px;
        box-shadow: var(--box-shadow-sm);
    }

    .admin-nav-tab {
        flex: 1;
        padding: 15px 20px;
        background: #f8f9fa;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all var(--animation-speed);
        border-right: 1px solid var(--border-color);
    }

    .admin-nav-tab:last-child {
        border-right: none;
    }

    .admin-nav-tab.active {
        background: var(--primary-color);
        color: white;
    }

    .admin-nav-tab:hover:not(.active) {
        background: #e9ecef;
    }

    .admin-tab-content {
        display: none;
    }
    
    .admin-tab-content.active {
        display: block;
    }

    .admin-section {
        margin-bottom: 30px;
    }

    .admin-section h3 {
        color: var(--primary-color-darker);
        margin: 0 0 20px 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .data-list {
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-md);
        overflow: hidden;
    }

    .data-item {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        border-bottom: 1px solid var(--border-color);
        background: white;
    }

    .data-item:last-child {
        border-bottom: none;
    }

    .data-item:nth-child(even) {
        background: #f8f9fa;
    }

    .data-item-content {
        flex: 1;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .data-item-actions {
        display: flex;
        gap: 5px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: var(--border-radius-sm);
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all var(--animation-speed);
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

    .btn-primary:hover {
        background: var(--primary-color-darker);
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .btn-small {
        padding: 4px 8px;
        font-size: 12px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: var(--text-color);
    }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        font-family: var(--font-family);
        font-size: 14px;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(0, 169, 113, 0.2);
    }

    .form-inline {
        display: flex;
        gap: 10px;
        align-items: end;
        margin-bottom: 20px;
    }

    .form-inline .form-group {
        margin-bottom: 0;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        align-items: center;
        justify-content: center;
    }

    .modal.show {
        display: flex;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        padding: 30px;
        max-width: 600px;
        width: 90%;
        max-height: 85vh;
        overflow-y: auto;
    }

    .modal-header {
        margin-bottom: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h4 {
        margin: 0;
        color: var(--primary-color-darker);
    }
    .modal-close-btn {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        color: var(--text-color-light);
    }

    .modal-footer {
        margin-top: 20px;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .export-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: var(--border-radius-md);
        margin-top: 30px;
    }

    .export-section h4 {
        margin: 0 0 15px 0;
        color: var(--primary-color-darker);
    }

    .rate-input {
        width: 80px;
        text-align: right;
    }

    .supplier-category {
        font-weight: 600;
        color: var(--primary-color-darker);
        margin-right: 10px;
    }

    .dynamic-field-group {
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        padding: 10px;
        margin-bottom: 10px;
    }
    .dynamic-field-group h5 {
        margin-top:0;
        margin-bottom: 10px;
        font-size: 1em;
        color: var(--primary-color-darker);
    }
    .contact-entry, .spec-entry {
        display: grid;
        grid-template-columns: 1fr 1fr auto;
        gap: 10px;
        align-items: center;
        margin-bottom: 8px;
    }
    .spec-entry {
        grid-template-columns: 1fr 2fr auto;
    }

    @media (max-width: 768px) {
        .main-nav .container {
            flex-direction: column;
            align-items: center;
        }

        .admin-nav-tabs {
            flex-direction: column;
        }

        .form-inline {
            flex-direction: column;
            align-items: stretch;
        }

        .data-item {
            flex-direction: column;
            align-items: stretch;
            gap: 10px;
        }

        .data-item-actions {
            justify-content: center;
        }
    }
    </style>

    <style id="stylesEnhancedSuppliers">
    /* Interface fournisseurs am√©lior√©e - inspir√©e de enhanced_supplier_system.html */
    
    #admin-suppliers .search-bar {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: var(--box-shadow-sm);
        margin-bottom: 30px;
    }

    #admin-suppliers .search-input {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-md);
        font-family: var(--font-family);
        font-size: 16px;
        box-sizing: border-box;
        transition: all var(--animation-speed);
    }

    #admin-suppliers .search-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(0, 169, 113, 0.2);
    }

    #admin-suppliers .filters {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        flex-wrap: wrap;
    }

    #admin-suppliers .filter-btn {
        padding: 8px 16px;
        background: #f8f9fa;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-md);
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
        color: var(--text-color);
    }

    #admin-suppliers .filter-btn:hover, 
    #admin-suppliers .filter-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
        transform: translateY(-1px);
    }
    
    #admin-suppliers .suppliers-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    #admin-suppliers .supplier-card {
        background: white;
        border-radius: 12px;
        padding: 25px;
        box-shadow: var(--box-shadow-md);
        border-left: 4px solid var(--primary-color);
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        position: relative;
        overflow: hidden;
    }

    #admin-suppliers .supplier-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, var(--primary-color), var(--primary-color-darker));
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    #admin-suppliers .supplier-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 30px rgba(0, 169, 113, 0.15);
    }

    #admin-suppliers .supplier-card:hover::before {
        opacity: 1;
    }

    #admin-suppliers .supplier-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 18px;
    }

    #admin-suppliers .supplier-name {
        font-size: 1.2em;
        font-weight: 600;
        color: var(--primary-color-darker);
        margin: 0 0 5px 0;
        line-height: 1.3;
    }

    #admin-suppliers .supplier-code {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-color-darker));
        color: white;
        padding: 6px 12px;
        border-radius: 8px;
        font-size: 0.8em;
        font-weight: 600;
        white-space: nowrap;
        box-shadow: 0 2px 4px rgba(0, 169, 113, 0.2);
    }

    #admin-suppliers .supplier-location {
        color: var(--text-color-light);
        font-size: 0.9em;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    #admin-suppliers .materials-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
        margin-bottom: 18px;
        min-height: 30px;
    }

    #admin-suppliers .material-tag {
        background: linear-gradient(135deg, #e8f4fd, #dbeafe);
        color: #1e40af;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.75em;
        font-weight: 600;
        border: 1px solid rgba(30, 64, 175, 0.1);
        transition: all 0.2s ease;
    }

    #admin-suppliers .material-tag:hover {
        background: linear-gradient(135deg, #dbeafe, #bfdbfe);
        transform: scale(1.05);
    }

    #admin-suppliers .contacts-section,
    #admin-suppliers .specs-section {
        margin-bottom: 18px;
    }
    
    #admin-suppliers .section-title-card {
        font-weight: 600;
        margin-bottom: 12px;
        font-size: 0.9em;
        color: var(--primary-color-darker);
        display: flex;
        align-items: center;
        gap: 6px;
    }

    #admin-suppliers .contact-item {
        background: linear-gradient(135deg, #f8f9fa, #f1f3f4);
        padding: 12px 15px;
        border-radius: 8px;
        margin-bottom: 8px;
        font-size: 0.85em;
        border: 1px solid rgba(0, 0, 0, 0.05);
        transition: all 0.2s ease;
    }

    #admin-suppliers .contact-item:hover {
        background: linear-gradient(135deg, #e6f7f1, #f0f9ff);
        border-color: rgba(0, 169, 113, 0.2);
    }

    #admin-suppliers .contact-name {
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 3px;
    }

    #admin-suppliers .contact-details {
        color: var(--text-color-light);
        line-height: 1.4;
        word-break: break-word;
    }

    #admin-suppliers .specs-section {
        border-top: 1px solid var(--border-color);
        padding-top: 18px;
    }

    #admin-suppliers .spec-item {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 6px 0;
        font-size: 0.85em;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    #admin-suppliers .spec-item:last-child {
        border-bottom: none;
    }

    #admin-suppliers .spec-label {
        font-weight: 600;
        margin-right: 10px;
        color: var(--text-color);
        flex-shrink: 0;
    }

    #admin-suppliers .spec-value {
        color: var(--text-color-light);
        text-align: right;
        word-break: break-word;
    }

    #admin-suppliers .notes-section {
        background: linear-gradient(135deg, #fff3cd, #fef3c7);
        border: 1px solid #fbbf24;
        border-radius: 8px;
        padding: 12px 15px;
        margin-top: 15px;
        font-size: 0.85em;
        word-break: break-word;
        flex-grow: 1;
        line-height: 1.5;
    }

    #admin-suppliers .notes-section strong {
        color: #92400e;
    }
    
    #admin-suppliers .supplier-card-actions {
        margin-top: auto;
        padding-top: 20px;
        display: flex;
        justify-content: flex-end;
        gap: 8px;
        border-top: 1px solid var(--border-color);
    }

    #admin-suppliers .supplier-card-actions .btn {
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 0.85em;
        font-weight: 600;
        transition: all 0.2s ease;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    #admin-suppliers .supplier-card-actions .btn-secondary {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        color: var(--text-color);
        border: 1px solid var(--border-color);
    }

    #admin-suppliers .supplier-card-actions .btn-secondary:hover {
        background: linear-gradient(135deg, #e9ecef, #dee2e6);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    #admin-suppliers .supplier-card-actions .btn-danger {
        background: linear-gradient(135deg, #ef4444, #dc2626);
        color: white;
    }

    #admin-suppliers .supplier-card-actions .btn-danger:hover {
        background: linear-gradient(135deg, #dc2626, #b91c1c);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
    }

    #admin-suppliers .add-supplier-btn {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background: linear-gradient(135deg, var(--primary-color), var(--primary-color-darker));
        color: white;
        border: none;
        width: 65px;
        height: 65px;
        border-radius: 50%;
        font-size: 28px;
        cursor: pointer;
        box-shadow: 0 8px 25px rgba(0, 169, 113, 0.3);
        transition: all 0.3s ease;
        z-index: 101;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #admin-suppliers .add-supplier-btn:hover {
        background: linear-gradient(135deg, var(--primary-color-darker), var(--primary-color-darkest));
        transform: scale(1.1) translateY(-2px);
        box-shadow: 0 12px 35px rgba(0, 169, 113, 0.4);
    }

    #admin-suppliers .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
        border: 2px solid rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);
    }

    #admin-suppliers .status-active { 
        background: linear-gradient(135deg, #22c55e, #16a34a);
    }
    #admin-suppliers .status-inactive { 
        background: linear-gradient(135deg, #ef4444, #dc2626);
    }
    #admin-suppliers .status-pending { 
        background: linear-gradient(135deg, #f59e0b, #d97706);
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    #admin-suppliers .supplier-card {
        animation: fadeInUp 0.5s ease-out forwards;
    }

    #admin-suppliers .supplier-card:nth-child(1) { animation-delay: 0.1s; }
    #admin-suppliers .supplier-card:nth-child(2) { animation-delay: 0.2s; }
    #admin-suppliers .supplier-card:nth-child(3) { animation-delay: 0.3s; }
    #admin-suppliers .supplier-card:nth-child(4) { animation-delay: 0.4s; }
    #admin-suppliers .supplier-card:nth-child(5) { animation-delay: 0.5s; }
    #admin-suppliers .supplier-card:nth-child(6) { animation-delay: 0.6s; }

    #admin-suppliers .empty-state {
        grid-column: 1/-1;
        text-align: center;
        padding: 60px 20px;
        color: var(--text-color-light);
        background: white;
        border-radius: 12px;
        box-shadow: var(--box-shadow-sm);
    }

    #admin-suppliers .empty-state-icon {
        font-size: 3em;
        margin-bottom: 15px;
        opacity: 0.6;
    }

    #admin-suppliers .empty-state-title {
        font-size: 1.2em;
        font-weight: 600;
        margin-bottom: 8px;
        color: var(--text-color);
    }

    #admin-suppliers .empty-state-message {
        font-size: 0.9em;
        line-height: 1.5;
    }

    @media (max-width: 768px) {
        #admin-suppliers .suppliers-grid {
            grid-template-columns: 1fr;
            gap: 15px;
        }
        
        #admin-suppliers .filters {
            justify-content: center;
        }
        
        #admin-suppliers .filter-btn {
            flex: 1;
            text-align: center;
            min-width: 80px;
        }
        
        #admin-suppliers .add-supplier-btn {
            bottom: 20px;
            right: 20px;
            width: 55px;
            height: 55px;
            font-size: 24px;
        }

        #admin-suppliers .supplier-card {
            padding: 20px;
        }

        #admin-suppliers .supplier-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        #admin-suppliers .supplier-code {
            align-self: flex-end;
        }

        #admin-suppliers .supplier-card-actions {
            flex-direction: column;
        }

        #admin-suppliers .supplier-card-actions .btn {
            width: 100%;
            justify-content: center;
        }
    }

    @media (max-width: 480px) {
        #admin-suppliers .suppliers-grid {
            grid-template-columns: 1fr;
            margin: 0 -10px;
        }

        #admin-suppliers .supplier-card {
            margin: 0 10px;
            padding: 18px;
        }

        #admin-suppliers .search-bar {
            margin: 0 -10px 20px -10px;
            border-radius: 0;
        }
    }
    </style>

    <style>
        /* Helper styles for combined page */
        body { 
            padding-top: 10px; 
            padding-left: 10px;
            padding-right: 10px;
            padding-bottom: 20px;
            margin: 0 auto;
        }
        .page-wrapper {
            border: 1px solid #bbb;
            margin-bottom: 40px;
            padding: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            border-radius: 12px;
            overflow: hidden;
        }
        .page-wrapper h2.section-title-header {
            background-color: var(--primary-color-darkest, #004C2E);
            color: white;
            padding: 15px 20px;
            margin: 0;
            text-align: center;
            font-size: 1.5em;
            border-bottom: 1px solid var(--primary-color-darkest, #003822);
        }
        body {
            font-family: 'Inter', sans-serif;
            line-height: 1.6;
            background-color: #F0F2F5;
            color: #374151;
        }

        .global-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-color-darker) 100%);
            color: white;
            padding: 15px 20px;
            border-radius: var(--border-radius-md);
            box-shadow: var(--box-shadow-md);
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .global-notification.show {
            transform: translateX(0);
        }
    </style>
</head>
<body>
    <!-- Navigation principale -->
    <div class="main-nav">
        <div class="container">
            <button class="main-nav-btn active" onclick="showMainSection('demande-prix')">
                üèóÔ∏è Demande de Prix
            </button>
            <button class="main-nav-btn" onclick="showMainSection('estimation')">
                üìä Estimation
            </button>
            <button class="main-nav-btn" onclick="showMainSection('admin')">
                ‚öôÔ∏è Administration
            </button>
        </div>
    </div>

    <!-- Section Demande de Prix -->
    <div id="demande-prix-section" class="page-section active">
        <div id="demandePrixWrapper" class="page-wrapper">
            <h2 class="section-title-header">Formulaire de Demande de Prix</h2>
            <div class="form-container">
                <form id="priceRequestForm">
                    <div class="header">
                        <div class="logo-container">
                            <div class="logo-box">
                                <div class="logo-dg">DG</div>
                            </div>
                            <div class="company-name">Desmarais & Gagn√© inc.</div>
                        </div>
                        <div class="contact">
                            <p>565 rue Maisonneuve<br>
                            Granby, QC J2G 3H5<br>
                            T√©l.: (450) 372-9630<br>
                            T√©l√©c.: (450) 372-8122</p>
                        </div>
                    </div>
        
                    <div class="main-content">
                        <div class="info">
                            <h2>DEMANDE DE PRIX</h2>
                            <p><strong>Date:</strong> <span id="current-date">2025-06-02</span></p>
                            
                            <div class="form-grid">
                                <div class="form-field">
                                    <label for="contact-name">√Ä l'attention de:</label>
                                    <input type="text" id="contact-name" name="contact_name" class="editable" placeholder="Nom du contact">
                                </div>
                                <div class="form-field">
                                    <label for="company-name_dem">Entreprise:</label>
                                    <input type="text" id="company-name_dem" name="company_name" class="editable" placeholder="Nom de l'entreprise">
                                </div>
                                <div class="form-field">
                                    <label for="project-ref">R√©f√©rence projet:</label>
                                    <input type="text" id="project-ref" name="project_ref" class="editable" placeholder="Ex: 25-178">
                                </div>
                                <div class="form-field">
                                    <label for="supplier-email">Email du fournisseur:</label>
                                    <input type="email" id="supplier-email" name="supplier_email" class="editable" placeholder="contact@fournisseur.com">
                                </div>
                            </div>
                        </div>
        
                        <div class="intro-text">
                            <p><strong>Bonjour,</strong></p>
                            <p id="intro-message">Veuillez nous fournir un prix pour les √©l√©ments suivants n√©cessaires √† notre projet:</p>
                            
                            <label for="request-type"><strong>Type de demande:</strong></label>
                            <select id="request-type" name="request_type" onchange="updateIntroMessage()">
                                <option value="materials">Mat√©riaux</option>
                                <option value="services">Services</option>
                                <option value="equipment">√âquipement</option>
                                <option value="subcontract">Sous-traitance</option>
                            </select>
                        </div>
        
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th class="qty-col">Qt√©</th>
                                        <th>Description</th>
                                        <th>Dimensions/Sp√©cifications</th>
                                        <th class="weight-col">Poids/Unit√©</th>
                                        <th class="length-col">D√©tails</th>
                                        <th class="clb-col">Prix CLB</th>
                                        <th class="price-col">Prix unitaire</th>
                                        <th class="total-weight-col">Poids total</th>
                                        <th class="price-col">Prix total</th>
                                        <th width="50px">Action</th>
                                    </tr>
                                </thead>
                                <tbody id="items-tbody">
                                    <tr class="item-row" data-item="1">
                                        <td><input type="text" name="qty_1" value="" class="editable qty-col" size="3" placeholder="1"></td>
                                        <td><input type="text" name="desc_1" value="" class="editable" placeholder="Description du produit"></td>
                                        <td><input type="text" name="dimensions_1" value="" class="editable" placeholder="Dimensions ou sp√©cifications"></td>
                                        <td><input type="text" name="weight_1" value="" class="editable weight-col" size="8" placeholder="Poids"></td>
                                        <td><input type="text" name="details_1" value="" class="editable length-col" size="12" placeholder="D√©tails additionnels"></td>
                                        <td><input type="text" name="clb_price_1" class="editable clb-col" size="6" placeholder="0.00"></td>
                                        <td><input type="text" name="unit_price_1" class="editable price-col" size="6" placeholder="0.00"></td>
                                        <td><input type="text" name="total_weight_1" class="readonly total-weight-col" size="8" readonly=""></td>
                                        <td><input type="text" name="total_price_1" class="readonly price-col" size="6" readonly=""></td>
                                        <td><button type="button" class="delete-btn" onclick="deleteRow(1)">‚úï</button></td>
                                    </tr>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="10">
                                            <button type="button" class="add-row-btn" onclick="addRow()">+ Ajouter une ligne</button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colspan="8" style="text-align: right;"><strong>Sous-total:</strong></td>
                                        <td><input type="text" name="subtotal" class="readonly price-col" size="6" readonly=""></td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td colspan="8" style="text-align: right;"><strong>Taxes (14.975%):</strong></td>
                                        <td><input type="text" name="taxes" class="readonly price-col" size="6" readonly=""></td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td colspan="8" style="text-align: right;"><strong>Transport:</strong></td>
                                        <td><input type="text" name="transport" value="0" class="editable price-col" size="6" placeholder="0.00"></td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td colspan="8" style="text-align: right;"><strong>Total:</strong></td>
                                        <td><input type="text" name="total" class="readonly price-col" size="6" readonly=""></td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
        
                        <div class="notes-container">
                            <button type="button" class="notes-toggle" onclick="toggleNotes('request')">
                                <span id="request-notes-icon">üìù</span>
                                <span id="request-notes-text">Ajouter notes demande de prix</span>
                            </button>
                            <div class="notes-content" id="request-notes-content">
                                <textarea class="notes-textarea" name="request_notes" placeholder="Notes sp√©cifiques √† cette demande de prix : alternatives acceptables, conditions particuli√®res, d√©lais critiques, certifications requises, exigences techniques sp√©ciales..."></textarea>
                            </div>
                        </div>
        
                        <div class="additional-info">
                            <h3>Informations suppl√©mentaires:</h3>
                            <div class="form-grid">
                                <div class="form-field">
                                    <label for="delivery-date">Date de livraison souhait√©e:</label>
                                    <input type="date" id="delivery-date" name="delivery_date" class="editable">
                                </div>
                                <div class="form-field">
                                    <label for="delivery-location">Lieu de livraison:</label>
                                    <input type="text" id="delivery-location" name="delivery_location" class="editable" placeholder="Adresse ou point de livraison">
                                </div>
                            </div>
                            
                            <div id="additional-requirements">
                                <p>‚Ä¢ Les prix doivent inclure toutes les certifications mati√®re requises</p>
                                <p>‚Ä¢ Merci d'indiquer les d√©lais d'approvisionnement et les alternatives disponibles</p>
                            </div>
                            
                            <div class="form-field" style="margin-top: 15px;">
                                <label for="additional-notes">Notes additionnelles:</label>
                                <textarea id="additional-notes" name="additional_notes" rows="4" class="editable" placeholder="Ajoutez vos commentaires ou sp√©cifications particuli√®res..."></textarea>
                            </div>
                        </div>
                    </div>
        
                    <div class="footer">
                        <p><strong>üìß Retour de soumission:</strong> estimation@dg-inc.qc.ca</p>
                        <p><strong>üìû Questions:</strong> D√©partement des achats au (450) 372-9630</p>
                        <p><strong>‚è∞ D√©lai de r√©ponse souhait√©:</strong> 3 jours ouvrables</p>
                    </div>
        
                    <div class="form-controls">
                        <button type="button" class="submit-btn" onclick="sendEmailWithAttachment()">üìß Envoyer la demande</button>
                        <button type="button" class="print-btn" onclick="window.print();">üñ®Ô∏è Imprimer</button>
                        <button type="button" class="save-btn" onclick="saveAsHTML()">üíæ Sauvegarder HTML</button>
                        <button type="button" class="clear-btn" onclick="clearForm()">üóëÔ∏è Vider le formulaire</button>
                    </div>
                </form>
            </div>
        
            <div id="notification_dem" class="notification">
                <p>‚úÖ Action compl√©t√©e avec succ√®s!</p>
            </div>
        </div>
    </div>

    <!-- Section Estimation -->
    <div id="estimation-section" class="page-section">
        <div id="estimationWrapper" class="page-wrapper">
            <h2 class="section-title-header">Formulaire d'Estimation</h2>
            <div class="form-container">
                <form id="estimationForm">
                    <div class="header">
                        <div class="logo-container">
                            <div class="logo-box">
                                <div class="logo-dg">DG</div>
                            </div>
                            <div class="company-name">Desmarais & Gagn√© inc.</div>
                        </div>
                        <div class="contact">
                            <p>565 rue Maisonneuve<br>
                            Granby, QC J2G 3H5<br>
                            T√©l.: (450) 372-9630<br>
                            T√©l√©c.: (450) 372-8122</p>
                        </div>
                    </div>
        
                    <div class="main-content">
                        <div class="info">
                            <h2>ESTIMATION DE FABRICATION</h2>
                            <p><strong>Date:</strong> <input type="date" id="current-date-est" name="estimation_date" class="editable" style="border: 1px solid #ddd; padding: 4px; border-radius: 4px;"></p>
                            
                            <div class="form-grid">
                                <div class="form-field">
                                    <label for="project-name">Nom du projet:</label>
                                    <input type="text" id="project-name" name="project_name" class="editable" placeholder="Nom du projet">
                                </div>
                                <div class="form-field">
                                    <label for="estimator-name">Estim√© par:</label>
                                    <input type="text" id="estimator-name" name="estimator_name" class="editable" placeholder="Nom de l'estimateur">
                                </div>
                                <div class="form-field">
                                    <label for="version">Version:</label>
                                    <input type="text" id="version" name="version" class="editable" placeholder="R00">
                                </div>
                                <div class="form-field">
                                    <label for="client-name">Client:</label>
                                    <input type="text" id="client-name" name="client_name" class="editable" placeholder="Nom du client">
                                </div>
                            </div>
                        </div>
        
                        <div class="section">
                            <h2 class="section-title" style="justify-content: space-between;">
                                <span>üéØ R√âSUM√â EX√âCUTIF</span>
                                <span class="final-badge" id="status-badge">ESTIMATION</span>
                            </h2>
                            
                            <div class="summary-grid">
                                <div class="summary-card">
                                    <div class="card-title">Prix Total Projet</div>
                                    <div class="card-value" id="summary-total">0.00$</div>
                                </div>
                                <div class="summary-card">
                                    <div class="card-title">Mat√©riaux</div>
                                    <div class="card-value" id="summary-materials">0.00$</div>
                                </div>
                                <div class="summary-card">
                                    <div class="card-title">Fabrication</div>
                                    <div class="card-value" id="summary-fabrication">0.00$</div>
                                </div>
                                <div class="summary-card">
                                    <div class="card-title">Sous-Traitance</div>
                                    <div class="card-value" id="summary-subcontract">0.00$</div>
                                </div>
                            </div>
                        </div>
        
                        <div class="section">
                            <h2 class="section-title">üí∞ MAT√âRIAUX</h2>
                            
                            <div class="table-container">
                                <table>
                                    <thead>
                                        <tr>
                                            <th class="supplier-col">Fournisseur</th>
                                            <th class="material-col">Mat√©riau</th>
                                            <th>Description</th>
                                            <th class="qty-col">Quantit√©</th>
                                            <th class="weight-col">Poids/Pi√®ce (lb)</th>
                                            <th class="weight-col">Poids Total (lb)</th>
                                            <th class="rate-col">Prix/lb ($)</th>
                                            <th class="price-col">Co√ªt ($)</th>
                                            <th width="50px">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="materials-tbody">
                                        <tr class="item-row" data-item="1">
                                            <td>
                                                <select name="material_supplier_1" class="supplier-select" id="material_supplier_1">
                                                    <option value="">S√©lectionner...</option>
                                                </select>
                                            </td>
                                            <td>
                                                <select name="material_type_1" class="editable">
                                                    <option value="">S√©lectionner...</option>
                                                    <option value="acier_structural">Acier Structural</option>
                                                    <option value="acier_crs">Acier CRS</option>
                                                    <option value="acier_hrpo">Acier HRPO</option>
                                                    <option value="acier_galvanise">Acier Galvanis√©</option>
                                                    <option value="acier_satin">Acier Satin (Galvanneal)</option>
                                                    <option value="acier_inox_304">Inox 304</option>
                                                    <option value="acier_inox_316">Inox 316/316L</option>
                                                    <option value="aluminium_5000">Aluminium s√©rie 5000</option>
                                                    <option value="aluminium_6000">Aluminium s√©rie 6000</option>
                                                    <option value="tube_dom">Tube DOM</option>
                                                    <option value="plastiques">Plastiques</option>
                                                    <option value="cuivre">Cuivre</option>
                                                    <option value="laiton">Laiton</option>
                                                    <option value="bronze">Bronze</option>
                                                </select>
                                            </td>
                                            <td><input type="text" name="material_desc_1" class="editable" placeholder="Description d√©taill√©e"></td>
                                            <td><input type="text" name="material_qty_1" class="editable qty-col" placeholder="1"></td>
                                            <td><input type="text" name="material_weight_1" class="editable weight-col" placeholder="0.00"></td>
                                            <td><input type="text" name="material_total_weight_1" class="readonly weight-col" readonly=""></td>
                                            <td><input type="text" name="material_price_1" class="editable rate-col" placeholder="0.00"></td>
                                            <td><input type="text" name="material_cost_1" class="readonly price-col" readonly=""></td>
                                            <td><button type="button" class="delete-btn" onclick="deleteMaterialRow(1)">‚úï</button></td>
                                        </tr>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="9">
                                                <button type="button" class="add-row-btn" onclick="addMaterialRow()">+ Ajouter un mat√©riau</button>
                                            </td>
                                        </tr>
                                        <tr class="subtotal-row">
                                            <td colspan="7"><strong>Sous-total mat√©riau brut</strong></td>
                                            <td class="price-col"><input type="text" name="materials_subtotal" class="readonly" readonly=""></td>
                                            <td></td>
                                        </tr>
                                        <tr>
                                            <td colspan="7">Facteur de perte (<input type="text" name="waste_factor" class="editable" value="5" style="width: 40px;">%)</td>
                                            <td class="price-col"><input type="text" name="materials_waste" class="readonly" readonly=""></td>
                                            <td></td>
                                        </tr>
                                        <tr class="total-row">
                                            <td colspan="7"><strong>TOTAL MAT√âRIAU</strong></td>
                                            <td class="price-col"><input type="text" name="materials_total" class="readonly" readonly=""></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
            
                            <div class="notes-container">
                                <button type="button" class="notes-toggle" onclick="toggleNotes_est('materials')">
                                    <span id="materials-notes-icon">üìù</span>
                                    <span id="materials-notes-text">Ajouter notes mat√©riaux</span>
                                </button>
                                <div class="notes-content" id="materials-notes-content">
                                    <textarea class="notes-textarea" name="materials_notes" placeholder="Notes sur les mat√©riaux : sp√©cifications particuli√®res, alternatives, conditions fournisseurs, d√©lais de livraison, certifications requises..."></textarea>
                                </div>
                            </div>
                        </div>
            
                        <div class="section">
                            <h2 class="section-title">‚öôÔ∏è PROGRAMMATION CNC</h2>
                            
                            <div class="table-container">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Mod√®le</th>
                                            <th>Complexit√©</th>
                                            <th class="time-col">Temps (h)</th>
                                            <th class="rate-col">Taux $/h</th>
                                            <th class="price-col">Co√ªt ($)</th>
                                            <th width="50px">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="programming-tbody">
                                        <tr class="item-row" data-item="1">
                                            <td><input type="text" name="prog_model_1" class="editable" placeholder="Code mod√®le"></td>
                                            <td><input type="text" name="prog_complexity_1" class="editable" placeholder="Simple/Moyen/Complexe"></td>
                                            <td><input type="text" name="prog_time_1" class="editable time-col" placeholder="0.0"></td>
                                            <td><input type="text" name="prog_rate_1" class="readonly rate-col" value="95.00" readonly=""></td>
                                            <td><input type="text" name="prog_cost_1" class="readonly price-col" readonly=""></td>
                                            <td><button type="button" class="delete-btn" onclick="deleteProgrammingRow(1)">‚úï</button></td>
                                        </tr>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="6">
                                                <button type="button" class="add-row-btn" onclick="addProgrammingRow()">+ Ajouter une programmation</button>
                                            </td>
                                        </tr>
                                        <tr class="total-row">
                                            <td colspan="4"><strong>TOTAL PROGRAMMATION</strong></td>
                                            <td class="price-col"><input type="text" name="programming_total" class="readonly" readonly=""></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
            
                            <div class="notes-container">
                                <button type="button" class="notes-toggle" onclick="toggleNotes_est('programming')">
                                    <span id="programming-notes-icon">üìù</span>
                                    <span id="programming-notes-text">Ajouter notes programmation</span>
                                </button>
                                <div class="notes-content" id="programming-notes-content">
                                    <textarea class="notes-textarea" name="programming_notes" placeholder="Notes sur la programmation CNC : fichiers CAD re√ßus, modifications requises, optimisations possibles, temps suppl√©mentaires, validation simulation..."></textarea>
                                </div>
                            </div>
                        </div>
            
                        <div class="section">
                            <h2 class="section-title">üîß FABRICATION D√âTAILL√âE</h2>
                            
                            <div class="table-container">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Op√©ration</th>
                                            <th class="qty-col">Quantit√©</th>
                                            <th class="time-col">Temps/Pi√®ce (min)</th>
                                            <th class="time-col">Temps Total (h)</th>
                                            <th class="rate-col">Taux $/h</th>
                                            <th class="price-col">Co√ªt ($)</th>
                                            <th width="50px">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="fabrication-tbody">
                                        <tr class="item-row" data-item="1">
                                            <td>
                                                <select name="fab_operation_1" class="operation-select" id="fab_operation_1">
                                                    <option value="">S√©lectionner op√©ration...</option>
                                                </select>
                                            </td>
                                            <td><input type="text" name="fab_qty_1" class="editable qty-col" placeholder="1"></td>
                                            <td><input type="text" name="fab_time_per_piece_1" class="editable time-col" placeholder="0.0"></td>
                                            <td><input type="text" name="fab_total_time_1" class="readonly time-col" readonly=""></td>
                                            <td><input type="text" name="fab_rate_1" class="readonly rate-col" value="95.00" readonly=""></td>
                                            <td><input type="text" name="fab_cost_1" class="readonly price-col" readonly=""></td>
                                            <td><button type="button" class="delete-btn" onclick="deleteFabricationRow(1)">‚úï</button></td>
                                        </tr>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="7">
                                                <button type="button" class="add-row-btn" onclick="addFabricationRow()">+ Ajouter une op√©ration</button>
                                            </td>
                                        </tr>
                                        <tr class="total-row">
                                            <td colspan="5"><strong>TOTAL FABRICATION</strong></td>
                                            <td class="price-col"><input type="text" name="fabrication_total" class="readonly" readonly=""></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
            
                            <div class="notes-container">
                                <button type="button" class="notes-toggle" onclick="toggleNotes_est('fabrication')">
                                    <span id="fabrication-notes-icon">üìù</span>
                                    <span id="fabrication-notes-text">Ajouter notes fabrication</span>
                                </button>
                                <div class="notes-content" id="fabrication-notes-content">
                                    <textarea class="notes-textarea" name="fabrication_notes" placeholder="Notes sur la fabrication : contraintes techniques, outillage sp√©cial requis, s√©quen√ßage des op√©rations, points critiques, temps de setup, contr√¥le qualit√©..."></textarea>
                                </div>
                            </div>
                        </div>
            
                        <div class="section">
                            <h2 class="section-title">ü§ù SOUS-TRAITANCE ET SERVICES</h2>
                            
                            <div class="table-container">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Service</th>
                                            <th class="supplier-col">Fournisseur</th>
                                            <th>Description</th>
                                            <th class="qty-col">Quantit√©</th>
                                            <th class="rate-col">Prix Unit. ($)</th>
                                            <th class="price-col">Co√ªt Total ($)</th>
                                            <th width="50px">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="subcontract-tbody">
                                        <tr class="item-row" data-item="1">
                                            <td>
                                                <select name="subcontract_service_1" class="service-select" id="subcontract_service_1">
                                                    <option value="">S√©lectionner service...</option>
                                                </select>
                                            </td>
                                            <td>
                                                <select name="subcontract_supplier_1" class="supplier-select" id="subcontract_supplier_1">
                                                    <option value="">S√©lectionner fournisseur...</option>
                                                </select>
                                            </td>
                                            <td><input type="text" name="subcontract_desc_1" class="editable" placeholder="Description du service"></td>
                                            <td><input type="text" name="subcontract_qty_1" class="editable qty-col" placeholder="1"></td>
                                            <td><input type="text" name="subcontract_price_1" class="editable rate-col" placeholder="0.00"></td>
                                            <td><input type="text" name="subcontract_cost_1" class="readonly price-col" readonly=""></td>
                                            <td><button type="button" class="delete-btn" onclick="deleteSubcontractRow(1)">‚úï</button></td>
                                        </tr>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="7">
                                                <button type="button" class="add-row-btn" onclick="addSubcontractRow()">+ Ajouter un service</button>
                                            </td>
                                        </tr>
                                        <tr class="total-row">
                                            <td colspan="5"><strong>TOTAL SOUS-TRAITANCE</strong></td>
                                            <td class="price-col"><input type="text" name="subcontract_total" class="readonly" readonly=""></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
            
                            <div class="notes-container">
                                <button type="button" class="notes-toggle" onclick="toggleNotes_est('subcontract')">
                                    <span id="subcontract-notes-icon">üìù</span>
                                    <span id="subcontract-notes-text">Ajouter notes sous-traitance</span>
                                </button>
                                <div class="notes-content" id="subcontract-notes-content">
                                    <textarea class="notes-textarea" name="subcontract_notes" placeholder="Notes sur la sous-traitance : d√©lais de livraison, qualifications requises, certifications n√©cessaires, transport, conditions particuli√®res, alternatives..."></textarea>
                                </div>
                            </div>
                        </div>
            
                        <div class="section">
                            <h2 class="section-title">üìä R√âCAPITULATIF FINAL</h2>
                            
                            <div class="table-container">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Description</th>
                                            <th class="price-col">Montant ($)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Sous-total Mat√©riaux</td>
                                            <td class="price-col" id="recap-materials">0.00</td>
                                        </tr>
                                        <tr>
                                            <td>Sous-total Programmation</td>
                                            <td class="price-col" id="recap-programming">0.00</td>
                                        </tr>
                                        <tr>
                                            <td>Sous-total Fabrication</td>
                                            <td class="price-col" id="recap-fabrication">0.00</td>
                                        </tr>
                                        <tr>
                                            <td>Sous-total Sous-traitance</td>
                                            <td class="price-col" id="recap-subcontract">0.00</td>
                                        </tr>
                                        <tr class="subtotal-row">
                                            <td><strong>Sous-total avant frais</strong></td>
                                            <td class="price-col"><strong id="recap-subtotal">0.00</strong></td>
                                        </tr>
                                        <tr>
                                            <td>Frais g√©n√©raux (<input type="text" name="overhead_rate" class="editable" value="15" style="width: 40px;">%)</td>
                                            <td class="price-col"><input type="text" name="overhead_amount" class="readonly" readonly=""></td>
                                        </tr>
                                        <tr>
                                            <td>Transport</td>
                                            <td class="price-col"><input type="text" name="transport_amount" class="editable" value="0" placeholder="0.00"></td>
                                        </tr>
                                        <tr class="subtotal-row">
                                            <td><strong>Sous-total avant marge</strong></td>
                                            <td class="price-col"><strong><input type="text" name="subtotal_before_margin" class="readonly" readonly=""></strong></td>
                                        </tr>
                                        <tr>
                                            <td>Marge b√©n√©ficiaire (<input type="text" name="margin_rate" class="editable" value="20" style="width: 40px;">%)</td>
                                            <td class="price-col"><input type="text" name="margin_amount" class="readonly" readonly=""></td>
                                        </tr>
                                        <tr class="total-row" style="font-size: 16px;">
                                            <td><strong>PRIX TOTAL DU PROJET</strong></td>
                                            <td class="price-col"><strong><input type="text" name="final_total" class="readonly" readonly="" style="font-size: 16px;"></strong></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
            
                        <div class="conditions">
                            <h3>CONDITIONS ET SP√âCIFICATIONS</h3>
                            
                            <div class="form-grid">
                                <div class="form-field">
                                    <label for="delivery-delay-est">D√©lai de fabrication:</label>
                                    <input type="text" id="delivery-delay-est" name="delivery_delay" class="editable" placeholder="Ex: 4-6 semaines">
                                </div>
                                <div class="form-field">
                                    <label for="quote-validity">Validit√© de l'offre:</label>
                                    <input type="text" id="quote-validity" name="quote_validity" class="editable" placeholder="Ex: 30 jours">
                                </div>
                                <div class="form-field">
                                    <label for="payment-terms">Conditions de paiement:</label>
                                    <input type="text" id="payment-terms" name="payment_terms" class="editable" placeholder="Ex: Net 30 jours">
                                </div>
                                <div class="form-field">
                                    <label for="transport-terms">Transport:</label>
                                    <input type="text" id="transport-terms" name="transport_terms" class="editable" placeholder="Ex: FOB usine">
                                </div>
                                <div class="form-field">
                                    <label for="warranty">Garantie:</label>
                                    <input type="text" id="warranty" name="warranty" class="editable" placeholder="Ex: 1 an pi√®ces et main d'≈ìuvre">
                                </div>
                                <div class="form-field">
                                    <label for="standards">Conformit√©:</label>
                                    <input type="text" id="standards" name="standards" class="editable" placeholder="Ex: CSA W47.1">
                                </div>
                            </div>
                            
                            <div class="form-field" style="margin-top: 15px;">
                                <label for="optimizations">Optimisations incluses:</label>
                                <textarea id="optimizations" name="optimizations" rows="4" class="editable" placeholder="D√©crivez les optimisations et am√©liorations incluses dans cette estimation..."></textarea>
                            </div>
                        </div>
                    </div>
            
                    <div class="footer">
                        <div style="font-size: 18px; font-weight: 600; color: #00A971; margin-bottom: 10px;">
                            üèóÔ∏è Desmarais & Gagn√© Inc.
                        </div>
                        <div>Sp√©cialistes en Fabrication M√©tallique depuis 1985</div>
                        <div>üìß estimation@dg-inc.qc.ca | üìû (450) 372-9630 | üåê www.dg-inc.qc.ca</div>
                        <div style="margin-top: 15px; font-size: 12px;">
                            <strong>Estimation - <span id="footer-estimator">Estimateur</span></strong><br>
                            Prix total: <strong id="footer-total">0.00$</strong> | Estimation int√©gr√©e D&G avec base de donn√©es fournisseurs
                        </div>
                    </div>
            
                    <div class="form-controls">
                        <button type="button" class="submit-btn" onclick="sendEstimation()">üìß Envoyer l'estimation</button>
                        <button type="button" class="print-btn" onclick="window.print();">üñ®Ô∏è Imprimer</button>
                        <button type="button" class="save-btn" onclick="saveAsHTML_est()">üíæ Sauvegarder HTML</button>
                        <button type="button" class="clear-btn" onclick="clearForm_est()">üóëÔ∏è Vider le formulaire</button>
                    </div>
                </form>
            </div>
            
            <div id="notification_est" class="notification">
                <p>‚úÖ Action compl√©t√©e avec succ√®s!</p>
            </div>
        </div>
    </div>

    <!-- Section Administration -->
    <div id="admin-section" class="page-section">
        <div class="admin-container">
            <div class="admin-header">
                <h1>üîß Administration des Donn√©es - Desmarais & Gagn√©</h1>
                <p>G√©rez vos fournisseurs, op√©rations et services</p>
            </div>

            <div class="admin-nav-tabs">
                <button class="admin-nav-tab active" onclick="showAdminTab('suppliers')">üì¶ Fournisseurs</button>
                <button class="admin-nav-tab" onclick="showAdminTab('operations')">‚öôÔ∏è Op√©rations</button>
                <button class="admin-nav-tab" onclick="showAdminTab('services')">üîß Services</button>
                <button class="admin-nav-tab" onclick="showAdminTab('subcontractors')">ü§ù Sous-traitants</button>
                <button class="admin-nav-tab" onclick="showAdminTab('export')">üì§ Export/Import</button>
            </div>

            <!-- Fournisseurs (Enhanced View) -->
            <div id="admin-suppliers" class="admin-tab-content active">
                <div class="admin-section">
                    <h3>üì¶ Base de Donn√©es Fournisseurs</h3>
                    
                    <div class="search-bar">
                        <input 
                            type="text" 
                            class="search-input" 
                            placeholder="üîç Rechercher par nom, ville, mat√©riau, contact..." 
                            id="supplierSearchInput"
                            autocomplete="off"
                        >
                        <div class="filters">
                            <button class="filter-btn active" data-filter="all" title="Afficher tous les fournisseurs">
                                Tous
                            </button>
                            <button class="filter-btn" data-filter="materials" title="Fournisseurs de mat√©riaux uniquement">
                                üè≠ Mat√©riaux
                            </button>
                            <button class="filter-btn" data-filter="services" title="Fournisseurs de services uniquement">
                                ‚öôÔ∏è Services
                            </button>
                            <button class="filter-btn" data-filter="local" title="Fournisseurs locaux (Granby)">
                                üìç Local
                            </button>
                            <button class="filter-btn" data-filter="montreal" title="R√©gion de Montr√©al">
                                üèôÔ∏è Montr√©al
                            </button>
                            <button class="filter-btn" data-filter="active" title="Fournisseurs actifs uniquement">
                                ‚úÖ Actifs
                            </button>
                        </div>
                    </div>
                    
                    <div class="suppliers-grid" id="suppliersGrid">
                        <!-- Les cartes fournisseurs seront g√©n√©r√©es ici par JavaScript -->
                        <div class="empty-state">
                            <div class="empty-state-icon">‚è≥</div>
                            <div class="empty-state-title">Chargement des fournisseurs...</div>
                            <div class="empty-state-message">
                                Veuillez patienter pendant que nous chargeons la base de donn√©es.
                            </div>
                        </div>
                    </div>
                    
                    <button 
                        class="add-supplier-btn" 
                        onclick="openAddSupplierModal()" 
                        title="Ajouter un nouveau fournisseur"
                        aria-label="Ajouter un nouveau fournisseur"
                    >
                        +
                    </button>
                </div>
            </div>

            <!-- Op√©rations -->
            <div id="admin-operations" class="admin-tab-content">
                <div class="admin-section">
                    <h3>‚öôÔ∏è Op√©rations de Fabrication</h3>
                    
                    <div class="form-inline">
                        <div class="form-group">
                            <label>Code op√©ration:</label>
                            <input type="text" id="operation-code" class="form-control" placeholder="SOUDURE_TIG">
                        </div>
                        <div class="form-group">
                            <label>Nom de l'op√©ration:</label>
                            <input type="text" id="operation-name" class="form-control" placeholder="Soudage TIG">
                        </div>
                        <div class="form-group">
                            <label>Taux ($/h):</label>
                            <input type="number" id="operation-rate" class="form-control rate-input" placeholder="95.00" step="0.01">
                        </div>
                        <button class="btn btn-primary" onclick="addOperation()">Ajouter</button>
                    </div>

                    <div id="operations-list" class="data-list">
                        <!-- Les op√©rations seront ajout√©es ici dynamiquement -->
                    </div>
                </div>
            </div>

            <!-- Services -->
            <div id="admin-services" class="admin-tab-content">
                <div class="admin-section">
                    <h3>üîß Types de Services</h3>
                    
                    <div class="form-inline">
                        <div class="form-group">
                            <label>Code du service:</label>
                            <input type="text" id="service-code" class="form-control" placeholder="laser">
                        </div>
                        <div class="form-group">
                            <label>Nom du service:</label>
                            <input type="text" id="service-name" class="form-control" placeholder="D√©coupe Laser">
                        </div>
                        <button class="btn btn-primary" onclick="addService()">Ajouter</button>
                    </div>

                    <div id="services-list" class="data-list">
                        <!-- Les services seront ajout√©s ici dynamiquement -->
                    </div>
                </div>
            </div>

            <!-- Sous-traitants -->
            <div id="admin-subcontractors" class="admin-tab-content">
                <div class="admin-section">
                    <h3>ü§ù Fournisseurs de Sous-traitance</h3>
                    
                    <div class="form-inline">
                        <div class="form-group">
                            <label>Service:</label>
                            <select id="subcontractor-service" class="form-control">
                                <option value="">S√©lectionner un service...</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Code fournisseur:</label>
                            <input type="text" id="subcontractor-code" class="form-control" placeholder="ag_g">
                        </div>
                        <div class="form-group">
                            <label>Nom du fournisseur:</label>
                            <input type="text" id="subcontractor-name" class="form-control" placeholder="AG&G (Granby)">
                        </div>
                        <button class="btn btn-primary" onclick="addSubcontractor()">Ajouter</button>
                    </div>

                    <div id="subcontractors-list" class="data-list">
                        <!-- Les sous-traitants seront ajout√©s ici dynamiquement -->
                    </div>
                </div>
            </div>

            <!-- Export/Import -->
            <div id="admin-export" class="admin-tab-content">
                <div class="admin-section">
                    <h3>üì§ Export des Donn√©es</h3>
                    <p>T√©l√©chargez vos donn√©es pour les sauvegarder dans votre projet GitHub.</p>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 30px;">
                        <button class="btn btn-primary" onclick="exportData('suppliers')">üì¶ Export Fournisseurs (Enrichis)</button>
                        <button class="btn btn-primary" onclick="exportData('operations')">‚öôÔ∏è Export Op√©rations</button>
                        <button class="btn btn-primary" onclick="exportData('services')">üîß Export Services</button>
                        <button class="btn btn-primary" onclick="exportData('subcontractors')">ü§ù Export Sous-traitants</button>
                    </div>

                    <div class="export-section">
                        <h4>üìÅ Import des Donn√©es</h4>
                        <p>S√©lectionnez un fichier JSON pour importer des donn√©es:</p>
                        <div class="form-group">
                            <label for="import-file">Importer (Fournisseurs, Op√©rations, Services ou Sous-traitants):</label>
                            <input type="file" id="import-file" class="form-control" accept=".json">
                        </div>
                        <button class="btn btn-secondary" onclick="importData()">Importer</button>
                    </div>

                    <div class="export-section">
                        <h4>üîÑ R√©initialisation</h4>
                        <p>Restaurer les donn√©es par d√©faut:</p>
                        <button class="btn btn-danger" onclick="resetToDefaults()">R√©initialiser tout</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal pour √©dition -->
    <div id="edit-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h4 id="modal-title">Modifier</h4>
                <button class="modal-close-btn" onclick="closeModal()">√ó</button>
            </div>
            <div id="modal-body">
                <!-- Le contenu sera ajout√© dynamiquement -->
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal()">Annuler</button>
                <button class="btn btn-primary" onclick="saveEdit()">Sauvegarder</button>
            </div>
        </div>
    </div>

    <!-- Notification globale -->
    <div id="global-notification" class="global-notification">
        <p></p>
    </div>

    <script>
        // Donn√©es par d√©faut (Structure Enrichie pour Fournisseurs)
        const defaultData = {
            suppliers: [
                {
                    id: 'acier_bouchard', name: 'Acier Bouchard', location: 'St-Bruno de Montarville, QC', category: 'materials',
                    materials: ['ACIER'], status: 'active',
                    contacts: [{ name: 'Karine Michaudville', role: 'Soumission', phone: '(450) 653-1118', email: 'kmichaudville@acierbouchard.com' }],
                    specifications: { 'Commande minimum': '1000$ (3000 Lbs)', 'Sp√©cialit√©': 'Plaques acier', 'Exclusions': 'DOM, Feuilles m√©tal' },
                    notes: 'Ne vend pas de DOM. Ne vend pas de m√©tal en feuille, seulement de la plaque.',
                    deliveryInfo: 'Commande min. 1000$ (3000 Lbs)', website: '', rating: 4.2, lastContact: '2025-01-15'
                },
                {
                    id: 'acier_leroux', name: 'Acier Leroux / Metaux Russel', location: 'Boucherville, QC', category: 'materials',
                    materials: ['ACIER CRS', 'SATIN', 'GALVANISE', 'SST', 'ALU'], status: 'active',
                    contacts: [
                        { name: 'Gabriel Leclerc', role: 'Soumission', phone: '(450) 641-1130 ext. 2228', email: 'gleclerc@russelmetals.com' },
                        { name: 'Paolo Morin', role: 'Soumission (rempla√ßant)', phone: '(450) 641-1130 ext. 2288', email: 'paolo.morin@metauxrussel.com' },
                        { name: 'Zachary Comeau Desrosiers', role: 'Soumission', phone: '', email: 'zcomeaud@acier-leroux.com' }
                    ],
                    specifications: { 'Commande minimum': '2000$ (2500 Lbs)', 'Laser Tube Tol√©rance': '+/- 0.015"', 'Sp√©cialit√©': 'Acier commercial A1011' },
                    notes: 'Ne vend pas de DOM. Plaque seulement en acier commercial A1011 (pas de HRPO). Acier Satin√© = Galvanneal.',
                    deliveryInfo: 'Commande min. 2000$, 2500 Lbs', website: '', rating: 4.5, lastContact: '2025-01-20'
                },
                {
                    id: 'acier_menard', name: 'Acier Menard', location: 'Granby, QC', category: 'materials',
                    materials: ['ACIER', 'SST', 'ALU', 'CUIVRE', 'PLASTIQUES'], status: 'active',
                    contacts: [
                        { name: 'Michel Bombardier', role: 'Soumission', phone: '(450) 375-4211 ext. 227', email: 'michel@acier-menard.com' },
                        { name: 'Alain Toulouse', role: 'Soumission', phone: '(450) 375-4211 ext. 235', email: 'alain@acier-menard.com' }
                    ],
                    specifications: { 'Transport': '30$ si commande < 300$', 'R√©ception': '10:00-17:00 (ferm√© midi)', 'Demi-longueurs': 'Disponibles' },
                    notes: 'Gros D√©panneur. Demi longueurs: 10\' pour 20\' ou 12\' pour 24\'.',
                    deliveryInfo: 'Transport 30$ si < 300$', website: '', rating: 4.8, lastContact: '2025-01-18'
                },
                {
                    id: 'cff_stainless', name: 'CFF Stainless Steel', location: 'Montr√©al, QC', category: 'materials',
                    materials: ['SST'], status: 'active',
                    contacts: [{ name: 'Marie-Eve Francoeur', role: 'Soumission & Laser', phone: '(514) 337-7700', email: 'mefrancoeur@cffinox.com' }],
                    specifications: { 'Commande minimum': '500$', 'Transport Granby': '70$ (lundi/mercredi)', 'Frais palette': '40$ si < 500 Lbs' },
                    notes: 'Service laser disponible (SST seulement).',
                    deliveryInfo: 'Livraison lundi et mercredi + 70$', website: '', rating: 4.3, lastContact: '2025-01-12'
                },
                {
                    id: 'cbr_laser', name: 'CBR Laser', location: 'Plessisville, QC', category: 'services',
                    materials: ['LASER', 'PLIAGE', 'PLASMA', 'FEU'], status: 'active',
                    contacts: [
                        { name: 'Alain Levasseur', role: 'Soumission', phone: '1-819-362-2095', email: 'alevasseur@cbrlaser.com' },
                        { name: 'Jean-Felipe', role: 'Soumission', phone: '1-877-354-7011', email: 'cotation@cbrlaser.com' }
                    ],
                    specifications: { 'Laser Azote': 'Max 3/8" - 4-5 jours', 'Laser Tube': '7-8 jours, Max 30\', 200 Lbs', 'Transport': '70$/palette si < 1500$', 'Portail Client': 'clients.cbrlaser.com' },
                    notes: 'D√©coupe Azote max 3/8". Tube max 30 pieds/200 Lbs. Min 6" dans mandrin.',
                    deliveryInfo: 'Transport gratuit > 1500$', website: 'https://clients.cbrlaser.com', rating: 4.7, lastContact: '2025-01-22'
                },
                {
                    id: 'placage_granby', name: 'Placage Granby', location: 'Granby, QC', category: 'services',
                    materials: ['PLACAGE', 'PASSIVATION', 'ANODISATION'], status: 'active',
                    contacts: [
                        { name: 'Sophie Pelletier', role: 'Soumission', phone: '(450) 372-2041', email: 'soumission@placagegranby.ca' },
                        { name: 'Nancy Duranleau', role: 'Suivi', phone: '(450) 372-2041', email: 'nancy.duranleau@placagegranby.ca' }
                    ],
                    specifications: { 'D√©lai soumission': '15 jours ouvrables', 'Zinc blanc': '40"L x 12"H x 9"W', 'Zinc noir': '12"L x 12"H x 12"W', 'Min charge zinc': '85$ (accroche), 120$ (baril)' },
                    notes: 'Sp√©cialit√©s: ASTM B633 placage zinc, passivation ASTM-A967, anodisation MIL-A-8625f.',
                    deliveryInfo: 'Local Granby', website: '', rating: 4.6, lastContact: '2025-01-10'
                }
            ],
            operations: [
                { code: 'PROGR_POINCO', name: 'Programmation CNC', rate: 95.00 },
                { code: 'PLASMA', name: 'D√©coupe plasma', rate: 135.00 },
                { code: 'POINCONNAGE', name: 'Poin√ßonnage', rate: 135.00 },
                { code: 'EBAVURAGE', name: 'Pr√©paration et √©bavurage', rate: 95.00 },
                { code: 'SCIE', name: 'D√©coupe avec scie', rate: 95.00 },
                { code: 'ASSEMBLAGE', name: 'Pr√©paration pour soudage', rate: 95.00 },
                { code: 'SOUDURE_TIG', name: 'Soudage TIG', rate: 95.00 },
                { code: 'MANUTENTION', name: 'Nettoyage et manutention', rate: 95.00 },
                { code: 'RECEPTION', name: 'R√©ception mat√©riel', rate: 85.00 },
                { code: 'INVENTAIRE', name: 'Gestion d\'inventaire', rate: 85.00 },
                { code: 'DESSIN', name: 'Conception technique', rate: 105.00 },
                { code: 'TEMPS_BUREAU', name: 'Temps administratif', rate: 85.00 },
                { code: 'OXYCOUPAGE', name: 'Op√©ration de coupe au feu', rate: 135.00 },
                { code: 'SHEAR', name: 'Cisaillage', rate: 110.00 },
                { code: 'PUNCH_PRESS', name: 'Presse √† poin√ßonner', rate: 135.00 },
                { code: 'DRILL_MAGNET', name: 'Per√ßage magn√©tique', rate: 95.00 },
                { code: 'PRESS_DRILL', name: 'Perceuse √† colonne', rate: 95.00 },
                { code: 'FRAISAGE', name: 'Fraiser des trous', rate: 120.00 },
                { code: 'FILETAGE', name: 'Fileter des trous', rate: 95.00 },
                { code: 'PLIEUSE', name: 'Op√©ration de pliage', rate: 120.00 },
                { code: 'ROULAGE', name: 'Op√©ration de rouleau', rate: 120.00 },
                { code: 'CINTRUSE', name: 'Cintrage des pi√®ces', rate: 120.00 },
                { code: 'MEULAGE', name: 'Meuler les surfaces', rate: 95.00 },
                { code: 'POINTAGE', name: 'Pointage des pi√®ces', rate: 95.00 },
                { code: 'SOUDURE_MIG', name: 'Soudure MIG', rate: 95.00 },
                { code: 'SOUDURE_SPOT', name: 'Soudure par points', rate: 95.00 },
                { code: 'ROBOT', name: 'Robot soudeur', rate: 140.00 },
                { code: 'POLISSAGE', name: 'Polir', rate: 95.00 },
                { code: 'SABLAGE', name: 'Sabler', rate: 95.00 },
                { code: 'XINSP_PARTIE', name: 'Inspection partielle', rate: 85.00 },
                { code: 'SERTISSAGE', name: 'Sertissage', rate: 95.00 },
                { code: 'X_FERMETURE', name: 'Fermeture d\'un item', rate: 85.00 },
                { code: 'X_INSPEC_FIN', name: 'Inspection finale', rate: 85.00 },
                { code: 'EMBALLAGE', name: 'Emballer', rate: 85.00 },
                { code: 'EXPEDITION', name: 'Exp√©dition', rate: 85.00 },
                { code: 'TRANSPORT', name: 'Transport externe', rate: 95.00 }
            ],
            services: [
                { code: 'laser', name: 'D√©coupe Laser' },
                { code: 'galvanisation', name: 'Galvanisation' },
                { code: 'peinture', name: 'Peinture' },
                { code: 'polissage_sablage', name: 'Polissage/Sablage' },
                { code: 'placage', name: 'Placage/Passivation' },
                { code: 'usinage', name: 'Usinage' },
                { code: 'cintrage', name: 'Cintrage' },
                { code: 'transport', name: 'Transport' }
            ],
            subcontractors: {
                laser: [
                    { code: 'ag_g', name: 'AG&G (Granby)' }, { code: 'cbr_laser', name: 'CBR Laser (Plessisville)' },
                    { code: 'cff_laser', name: 'CFF Stainless Steel (Montreal)' }, { code: 'prometal', name: 'Industrie PROMETAL (Granby)' },
                    { code: 'jit_laser', name: 'JIT Laser (St-Louis-de-Blandford)' }, { code: 'nitek_laser', name: 'Nitek Laser (Nicolet)' },
                    { code: 'metaltek_laser', name: 'METALTEK Laser (Becancour)' }
                ],
                galvanisation: [ { code: 'corbec_lachine', name: 'Corbec (Lachine)' }, { code: 'corbec_st_augustin', name: 'Corbec (St-Augustin)' } ],
                peinture: [
                    { code: 'peinture_alro', name: 'Peinture ALRO (Chambly)' }, { code: 'axis_peinture', name: 'Axis Peinture (Brossard)' },
                    { code: 'peinture_a3m', name: 'Peinture A3M (Granby)' }, { code: 'peinture_sixpro', name: 'Peinture SixPro (Notre-Dame-du-Bon-Conseil)' },
                    { code: 'sablage_granby', name: 'Sablage Granby (Granby)' }
                ],
                polissage_sablage: [
                    { code: 'polissage_in_out', name: 'Polissage-in-n-out (Pintendre)' }, { code: 'sablage_granby', name: 'Sablage Granby (Granby)' },
                    { code: 'cadorette', name: 'Les Entreprises Cadorette (Granby)' }, { code: 'polipharma', name: 'Polipharma (St-Jean sur Richelieu)' }
                ],
                placage: [
                    { code: 'chrome_zinc', name: 'Chrome & Zinc (Montreal)' }, { code: 'placage_granby', name: 'Placage Granby (Granby)' },
                    { code: 'passivation_montreal', name: 'Passivation Montreal (Montreal)' }, { code: 'trempe_ld', name: 'Les Trempe LD (Granby)' }
                ],
                usinage: [
                    { code: 'automation_lm', name: 'Automation LM (Saint-Pie)' }, { code: 'ax_decoupe', name: 'AX Decoupe (Terrebonne)' },
                    { code: 'carpo', name: 'Industrie Carpo (Saint-Alphonse de Granby)' }, { code: 'machinage_amr', name: 'Machinage AMR (Saint-Alphonse de Granby)' },
                    { code: 'usinage_lab', name: 'Usinage LAB (Granby)' }, { code: 'von_arx', name: 'Von Arx (Granby)' },
                    { code: 'cnc_tracy', name: 'CNC Tracy inc (Sorel Tracy)' }
                ],
                cintrage: [ { code: 'cintube', name: 'CINTUBE (Lachine)' }, { code: 'pelchat', name: 'FER ORNEMENTAL PELCHAT (Granby)' } ],
                transport: [ { code: 'transport_externe', name: 'Transport externe' } ]
            }
        };

        // Variables globales
        let currentData = {};
        let editingItem = null;
        let editingType = null;

        // For enhanced supplier view
        let filteredSuppliersForDisplay = [];
        let activeSupplierFilter = 'all';

        // ===== FONCTIONS UTILITAIRES =====
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function safeGetElement(selector, context = document) {
            try {
                const element = context.querySelector(selector);
                if (!element) {
                    console.warn(`Element not found: ${selector}`);
                }
                return element;
            } catch (error) {
                console.error(`Error selecting element: ${selector}`, error);
                return null;
            }
        }

        function debounceSearch(func, delay) {
            let timeoutId;
            return function (...args) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => func.apply(this, args), delay);
            };
        }

        // ===== NOTIFICATION SYST√àME =====
        function showGlobalNotification(message, type = 'success') {
            const activeSection = document.querySelector('.page-section.active');
            let notificationElement = null;
            
            if (activeSection) {
                if (activeSection.id === 'demande-prix-section') {
                    notificationElement = document.getElementById('notification_dem');
                } else if (activeSection.id === 'estimation-section') {
                    notificationElement = document.getElementById('notification_est');
                }
            }
            
            if (!notificationElement) {
                notificationElement = document.getElementById('global-notification');
            }
            
            if (notificationElement) {
                const messageElement = notificationElement.querySelector('p');
                if (messageElement) {
                    messageElement.textContent = message;
                }
                notificationElement.classList.add('show');
                setTimeout(() => notificationElement.classList.remove('show'), 4000);
            }
        }

        function showSupplierNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = 'supplier-notification';
            notification.innerHTML = `
                <div class="notification-content">
                    <span class="notification-icon">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}</span>
                    <span class="notification-message">${message}</span>
                </div>
            `;
            
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'success' ? 'linear-gradient(135deg, #10b981, #059669)' : 
                             type === 'error' ? 'linear-gradient(135deg, #ef4444, #dc2626)' : 
                             'linear-gradient(135deg, #3b82f6, #2563eb)'};
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
                z-index: 1002;
                transform: translateX(400px);
                transition: transform 0.3s ease;
                font-family: var(--font-family);
                font-weight: 500;
            `;
            
            notification.querySelector('.notification-content').style.cssText = `
                display: flex;
                align-items: center;
                gap: 10px;
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(400px)';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 4000);
        }

        // ===== FONCTIONS DE NAVIGATION PRINCIPALE =====
        function showMainSection(sectionName) {
            document.querySelectorAll('.page-section').forEach(section => section.classList.remove('active'));
            document.querySelectorAll('.main-nav-btn').forEach(btn => btn.classList.remove('active'));

            const currentBtn = Array.from(document.querySelectorAll('.main-nav-btn')).find(btn => btn.textContent.trim().toLowerCase().includes(sectionName.replace('-', ' ')));
            if(currentBtn) currentBtn.classList.add('active');
            
            document.getElementById(sectionName + '-section').classList.add('active');

            if (sectionName === 'admin') {
                initAdmin();
            }
        }

        // ===== SYST√àME D'ADMINISTRATION =====
        const DGApp = {
            initialized: false,
            
            init() {
                if (this.initialized) return;
                
                try {
                    this.loadData();
                    this.setupEventListeners();
                    this.initializeDefaultSection();
                    this.populateEstimationSelects();
                    this.initialized = true;
                    console.log('DG Application initialized successfully');
                } catch (error) {
                    console.error('Error initializing DG Application:', error);
                    showGlobalNotification('‚ùå Erreur d\'initialisation de l\'application', 'error');
                }
            },
            
            loadData() {
                const stored = JSON.parse(localStorage.getItem('dg_admin_data') || 'null');
                if (stored) {
                    currentData = stored;
                    Object.keys(defaultData).forEach(key => {
                        if (!currentData[key]) {
                            currentData[key] = JSON.parse(JSON.stringify(defaultData[key]));
                        }
                    });
                    
                    if (migrateSupplierData()) {
                        this.saveData();
                        showGlobalNotification('‚úÖ Donn√©es migr√©es vers le nouveau format');
                    }
                } else {
                    currentData = JSON.parse(JSON.stringify(defaultData));
                    this.saveData();
                }
            },
            
            saveData() {
                try {
                    localStorage.setItem('dg_admin_data', JSON.stringify(currentData));
                    this.populateEstimationSelects();
                } catch (error) {
                    console.error('Error saving data:', error);
                    showGlobalNotification('‚ùå Erreur lors de la sauvegarde', 'error');
                }
            },
            
            setupEventListeners() {
                document.addEventListener('click', e => { 
                    if (e.target.id === 'edit-modal') closeModal(); 
                });
                
                document.addEventListener('keydown', e => { 
                    if (e.key === 'Escape') closeModal(); 
                });
                
                this.initDemandePrixSection();
                this.initEstimationSection();
            },
            
            initializeDefaultSection() {
                showMainSection('demande-prix');
            },
            
            populateEstimationSelects() {
                this.populateMaterialSupplierSelects();
                this.populateOperationSelects();
                this.populateServiceSelects();
            },
            
            populateMaterialSupplierSelects() {
                const selects = document.querySelectorAll('select[name^="material_supplier_"]');
                selects.forEach(select => {
                    const currentValue = select.value;
                    select.innerHTML = '<option value="">S√©lectionner...</option>';
                    
                    if (currentData.suppliers && Array.isArray(currentData.suppliers)) {
                        currentData.suppliers
                            .filter(s => s.category === 'materials' || s.status === 'active')
                            .sort((a,b) => a.name.localeCompare(b.name))
                            .forEach(supplier => {
                                const option = document.createElement('option');
                                option.value = supplier.id;
                                option.textContent = supplier.name;
                                if (supplier.id === currentValue) option.selected = true;
                                select.appendChild(option);
                            });
                    }
                });
            },
            
            populateOperationSelects() {
                const selects = document.querySelectorAll('select[name^="fab_operation_"]');
                selects.forEach(select => {
                    const currentValue = select.value;
                    select.innerHTML = '<option value="">S√©lectionner op√©ration...</option>';
                    
                    if (currentData.operations && Array.isArray(currentData.operations)) {
                        currentData.operations
                            .sort((a,b) => a.name.localeCompare(b.name))
                            .forEach(operation => {
                                const option = document.createElement('option');
                                option.value = operation.code;
                                option.textContent = operation.name;
                                if (operation.code === currentValue) option.selected = true;
                                select.appendChild(option);
                            });
                    }
                });
            },
            
            populateServiceSelects() {
                const selects = document.querySelectorAll('select[name^="subcontract_service_"]');
                selects.forEach(select => {
                    const currentValue = select.value;
                    select.innerHTML = '<option value="">S√©lectionner service...</option>';
                    
                    if (currentData.services && Array.isArray(currentData.services)) {
                        currentData.services
                            .sort((a,b) => a.name.localeCompare(b.name))
                            .forEach(service => {
                                const option = document.createElement('option');
                                option.value = service.code;
                                option.textContent = service.name;
                                if (service.code === currentValue) option.selected = true;
                                select.appendChild(option);
                            });
                    }
                });
            },
            
            initDemandePrixSection() {
                const wrapper = document.getElementById('demandePrixWrapper');
                if (!wrapper) return;
                
                const dateEl = document.getElementById('current-date');
                if (dateEl) dateEl.textContent = new Date().toLocaleDateString('fr-CA');
                
                if (typeof addRowEventListeners === 'function') {
                    addRowEventListeners(1);
                }
                
                const transportInput = wrapper.querySelector('input[name="transport"]');
                if (transportInput && typeof updateTotals_dem === 'function') {
                    transportInput.addEventListener('input', updateTotals_dem);
                }
                
                if (typeof updateIntroMessage === 'function') {
                    updateIntroMessage();
                }
                
                if (typeof updateTotals_dem === 'function') {
                    updateTotals_dem();
                }
            },
            
            initEstimationSection() {
                const wrapper = document.getElementById('estimationWrapper');
                if (!wrapper) return;
                
                const dateEl = wrapper.querySelector('#current-date-est');
                if (dateEl) dateEl.value = new Date().toISOString().split('T')[0];
                
                const estimatorInput = wrapper.querySelector('#estimator-name');
                if (estimatorInput) {
                    estimatorInput.addEventListener('input', function() { 
                        const footerEst = wrapper.querySelector('#footer-estimator');
                        if (footerEst) footerEst.textContent = this.value || 'Estimateur';
                    });
                }
                
                const debouncedCalc = debounce(() => {
                    if (typeof updateAllCalculations_est === 'function') {
                        updateAllCalculations_est();
                    }
                }, 150);
                
                wrapper.addEventListener('input', e => {
                    if (e.target.matches('input[type="text"], input[type="number"], select.editable, input[name="waste_factor"], input[name="overhead_rate"], input[name="transport_amount"], input[name="margin_rate"]')) {
                        debouncedCalc();
                    }
                });
                
                wrapper.addEventListener('change', e => {
                    if (e.target.matches('select[name^="fab_operation_"]')) {
                        const itemId = e.target.name.split('_').pop();
                        if (typeof updateOperationRate_est === 'function') {
                            updateOperationRate_est(itemId);
                        }
                    } else if (e.target.matches('select[name^="subcontract_service_"]')) {
                        const itemId = e.target.name.split('_').pop();
                        if (typeof updateSubcontractSuppliersList_est === 'function') {
                            updateSubcontractSuppliersList_est(itemId);
                        }
                    }
                });
                
                if (typeof updateAllCalculations_est === 'function') {
                    updateAllCalculations_est();
                }
            }
        };

        function loadData() { return DGApp.loadData(); }
        function saveData() { return DGApp.saveData(); }
        function populateEstimationSelects() { return DGApp.populateEstimationSelects(); }

        function initAdmin() {
            loadData();
            const activeAdminTabButton = document.querySelector('.admin-nav-tab.active');
            if (activeAdminTabButton) {
                const activeTabName = activeAdminTabButton.getAttribute('onclick').match(/'([^']+)'/)[1];
                showAdminTab(activeTabName, true);
            } else {
                showAdminTab('suppliers', true);
            }
            populateEstimationSelects();
        }

        function migrateSupplierData() {
            if (!currentData.suppliers || !Array.isArray(currentData.suppliers)) {
                return false;
            }
            
            let needsMigration = false;
            
            for (const supplier of currentData.suppliers) {
                if (supplier.code && !supplier.id) {
                    needsMigration = true;
                    break;
                }
            }
            
            if (needsMigration) {
                console.log("Migrating suppliers from old format to new rich format...");
                currentData.suppliers = currentData.suppliers.map(oldSupplier => {
                    if (oldSupplier.id && !oldSupplier.code) {
                        return oldSupplier;
                    }
                    
                    return {
                        id: oldSupplier.code || oldSupplier.id || `migrated_${Date.now()}`,
                        name: oldSupplier.name || 'Nom manquant',
                        location: oldSupplier.location || 'N/A',
                        category: oldSupplier.category || 'materials',
                        materials: oldSupplier.materials || [],
                        status: oldSupplier.status || 'pending',
                        contacts: oldSupplier.contacts || [],
                        specifications: oldSupplier.specifications || {},
                        notes: oldSupplier.notes || 'Migr√© depuis l\'ancien syst√®me.',
                        deliveryInfo: oldSupplier.deliveryInfo || '',
                        website: oldSupplier.website || '',
                        rating: oldSupplier.rating || 0,
                        lastContact: oldSupplier.lastContact || ''
                    };
                });
                
                return true;
            }
            
            return false;
        }

        function validateSupplierData(supplier) {
            const errors = [];
            
            if (!supplier.id || supplier.id.trim() === '') {
                errors.push('ID fournisseur requis');
            }
            
            if (!supplier.name || supplier.name.trim() === '') {
                errors.push('Nom fournisseur requis');
            }
            
            if (!['materials', 'services'].includes(supplier.category)) {
                errors.push('Cat√©gorie invalide (doit √™tre "materials" ou "services")');
            }
            
            if (!['active', 'pending', 'inactive'].includes(supplier.status)) {
                errors.push('Status invalide');
            }
            
            if (errors.length > 0) {
                throw new Error('Erreurs de validation: ' + errors.join(', '));
            }
            
            return true;
        }

        // ===== NAVIGATION ADMIN =====
        function showAdminTab(tabName, isInitialization = false) {
            if (!isInitialization) {
                document.querySelectorAll('.admin-nav-tab').forEach(tab => tab.classList.remove('active'));
                const currentBtn = Array.from(document.querySelectorAll('.admin-nav-tab')).find(btn => btn.getAttribute('onclick').includes(`'${tabName}'`));
                if(currentBtn) currentBtn.classList.add('active');
            }
            document.querySelectorAll('.admin-tab-content').forEach(tab => tab.classList.remove('active'));
            document.getElementById('admin-' + tabName).classList.add('active');

            switch(tabName) {
                case 'suppliers':
                    setupEnhancedSupplierEventListeners();
                    applySupplierFiltersAndSearch();
                    setTimeout(initEnhancedSuppliersFeatures, 100);
                    break;
                case 'operations':
                    renderOperations();
                    break;
                case 'services':
                    renderServices();
                    break;
                case 'subcontractors':
                    updateSubcontractorServiceSelect();
                    renderSubcontractors();
                    break;
                case 'export':
                    break;
            }
        }

        // ===== ENHANCED SUPPLIER FUNCTIONS =====
        function setupEnhancedSupplierEventListeners() {
            const searchInput = document.getElementById('supplierSearchInput');
            if (searchInput && !searchInput.dataset.listenerAttached) {
                const debouncedSearch = debounceSearch(handleSupplierSearch, 300);
                searchInput.addEventListener('input', debouncedSearch);
                searchInput.dataset.listenerAttached = 'true';
                
                searchInput.addEventListener('input', function() {
                    this.style.borderColor = '#f59e0b';
                    setTimeout(() => {
                        this.style.borderColor = '';
                    }, 350);
                });
            }
            
            const filterButtons = document.querySelectorAll('#admin-suppliers .filter-btn');
            filterButtons.forEach(btn => {
                if (!btn.dataset.listenerAttached) {
                    btn.addEventListener('click', function() {
                        const grid = document.getElementById('suppliersGrid');
                        if (grid) {
                            grid.style.transition = 'opacity 0.2s ease';
                            grid.style.opacity = '0.5';
                        }
                        
                        filterButtons.forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        activeSupplierFilter = this.dataset.filter;
                        
                        setTimeout(() => {
                            applySupplierFiltersAndSearch();
                        }, 100);
                    });
                    btn.dataset.listenerAttached = 'true';
                }
            });
        }

        function handleSupplierSearch() {
            applySupplierFiltersAndSearch();
        }

        function applySupplierFiltersAndSearch() {
            const searchTerm = document.getElementById('supplierSearchInput') ? document.getElementById('supplierSearchInput').value.toLowerCase() : "";
            let tempSuppliers = currentData.suppliers ? [...currentData.suppliers] : [];

            if (searchTerm) {
                tempSuppliers = tempSuppliers.filter(supplier => 
                    supplier.name.toLowerCase().includes(searchTerm) ||
                    supplier.id.toLowerCase().includes(searchTerm) ||
                    supplier.location.toLowerCase().includes(searchTerm) ||
                    (supplier.materials && supplier.materials.some(mat => mat.toLowerCase().includes(searchTerm))) ||
                    (supplier.contacts && supplier.contacts.some(contact => 
                        contact.name.toLowerCase().includes(searchTerm) ||
                        (contact.email && contact.email.toLowerCase().includes(searchTerm))
                    ))
                );
            }

            switch(activeSupplierFilter) {
                case 'materials':
                    tempSuppliers = tempSuppliers.filter(s => s.category === 'materials');
                    break;
                case 'services':
                    tempSuppliers = tempSuppliers.filter(s => s.category === 'services');
                    break;
                case 'local':
                    tempSuppliers = tempSuppliers.filter(s => s.location.toLowerCase().includes('granby'));
                    break;
                case 'montreal':
                    tempSuppliers = tempSuppliers.filter(s => 
                        s.location.toLowerCase().includes('montr√©al') || 
                        s.location.toLowerCase().includes('boucherville') ||
                        s.location.toLowerCase().includes('laval') ||
                        s.location.toLowerCase().includes('lachine')
                    );
                    break;
                case 'active':
                    tempSuppliers = tempSuppliers.filter(s => s.status === 'active');
                    break;
            }
            filteredSuppliersForDisplay = tempSuppliers;
            renderEnhancedSuppliers();
            updateSupplierStats();
        }

        function renderEnhancedSuppliers() {
            const grid = document.getElementById('suppliersGrid');
            if (!grid) return;

            if (!filteredSuppliersForDisplay || filteredSuppliersForDisplay.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">üîç</div>
                        <div class="empty-state-title">Aucun fournisseur trouv√©</div>
                        <div class="empty-state-message">
                            Aucun fournisseur ne correspond aux crit√®res de recherche actuels.<br>
                            Essayez de modifier vos filtres ou votre terme de recherche.
                        </div>
                    </div>
                `;
                return;
            }
            
            grid.innerHTML = filteredSuppliersForDisplay.map((supplier, index) => {
                const statusText = {
                    'active': 'Actif',
                    'pending': 'En attente',
                    'inactive': 'Inactif'
                };

                const categoryIcon = {
                    'materials': 'üè≠',
                    'services': '‚öôÔ∏è'
                };

                const materialsDisplay = (supplier.materials || []).length > 0 
                    ? supplier.materials.map(mat => `<span class="material-tag">${mat}</span>`).join('')
                    : '<span class="material-tag" style="background: #f3f4f6; color: #6b7280; border: 1px dashed #d1d5db;">Aucun mat√©riau sp√©cifi√©</span>';

                const contactsDisplay = (supplier.contacts && supplier.contacts.length > 0) 
                    ? supplier.contacts.slice(0, 3).map(contact => `
                        <div class="contact-item">
                            <div class="contact-name">${contact.name}${contact.role ? ` (${contact.role})` : ''}</div>
                            <div class="contact-details">
                                ${contact.phone ? `üìû ${contact.phone}` : ''} 
                                ${contact.phone && contact.email ? '<br>' : ''}
                                ${contact.email ? `üìß ${contact.email}` : ''}
                            </div>
                        </div>
                    `).join('') + (supplier.contacts.length > 3 ? `
                        <div class="contact-item" style="text-align: center; font-style: italic; background: linear-gradient(135deg, #f0f9ff, #e0f2fe);">
                            ...et ${supplier.contacts.length - 3} autre(s) contact(s)
                        </div>
                    ` : '')
                    : '<div class="contact-item" style="text-align: center; font-style: italic; background: #f9fafb; color: #6b7280;">Aucun contact enregistr√©</div>';

                const specificationsDisplay = (supplier.specifications && Object.keys(supplier.specifications).length > 0)
                    ? Object.entries(supplier.specifications).slice(0, 4).map(([key, value]) => `
                        <div class="spec-item">
                            <span class="spec-label">${key}:</span>
                            <span class="spec-value">${value}</span>
                        </div>
                    `).join('') + (Object.keys(supplier.specifications).length > 4 ? `
                        <div class="spec-item" style="font-style: italic; color: #6b7280;">
                            <span class="spec-label">...</span>
                            <span class="spec-value">et ${Object.keys(supplier.specifications).length - 4} autre(s)</span>
                        </div>
                    ` : '')
                    : '<div class="spec-item" style="font-style: italic; color: #6b7280; justify-content: center;"><span>Aucune sp√©cification</span></div>';

                const notesDisplay = supplier.notes 
                    ? `<div class="notes-section">
                        <strong>üìù Notes:</strong> ${supplier.notes.length > 150 ? supplier.notes.substring(0, 150) + '...' : supplier.notes}
                    </div>`
                    : '';

                const animationDelay = `style="animation-delay: ${(index % 6) * 0.1}s;"`;

                return `
                    <div class="supplier-card" data-id="${supplier.id}" ${animationDelay}>
                        <div class="supplier-header">
                            <div>
                                <h3 class="supplier-name">
                                    ${categoryIcon[supplier.category] || 'üè¢'} ${supplier.name}
                                </h3>
                                <div class="supplier-location">
                                    <span class="status-indicator status-${supplier.status || 'pending'}" title="Status: ${statusText[supplier.status] || 'En attente'}"></span>
                                    üìç ${supplier.location || 'Localisation non sp√©cifi√©e'}
                                </div>
                            </div>
                            <span class="supplier-code" title="Code fournisseur">${supplier.id}</span>
                        </div>
                        
                        <div class="materials-tags">
                            ${materialsDisplay}
                        </div>
                        
                        <div class="contacts-section">
                            <div class="section-title-card">üë• Contacts</div>
                            ${contactsDisplay}
                        </div>
                        
                        <div class="specs-section">
                            <div class="section-title-card">üìã Sp√©cifications</div>
                            ${specificationsDisplay}
                        </div>
                        
                        ${notesDisplay}

                        <div class="supplier-card-actions">
                            <button class="btn btn-secondary" onclick="openEditSupplierModal('${supplier.id}')" title="Modifier ce fournisseur">
                                ‚úèÔ∏è Modifier
                            </button>
                            <button class="btn btn-danger" onclick="confirmDeleteSupplier('${supplier.id}')" title="Supprimer ce fournisseur">
                                üóëÔ∏è Supprimer
                            </button>
                        </div>
                    </div>
                `;
            }).join('');

            grid.style.opacity = '0';
            setTimeout(() => {
                grid.style.transition = 'opacity 0.3s ease';
                grid.style.opacity = '1';
            }, 50);
        }

        function openAddSupplierModal() {
            editingType = 'enhancedSupplier';
            editingItem = null;
            
            const newIdBase = "new_supp_" + Date.now().toString().slice(-6);
            const defaultNewSupplier = {
                id: newIdBase, name: '', location: '', category: 'materials', materials: [], status: 'pending',
                contacts: [{ name: '', role: '', phone: '', email: '' }], specifications: {}, notes: '',
                deliveryInfo: '', website: '', rating: 0, lastContact: new Date().toISOString().split('T')[0]
            };
            showSupplierModalForm(defaultNewSupplier, 'Ajouter un Fournisseur');
        }

        function openEditSupplierModal(supplierId) {
            editingType = 'enhancedSupplier';
            editingItem = supplierId;
            const supplier = currentData.suppliers.find(s => s.id === supplierId);
            if (supplier) {
                const supplierToEdit = JSON.parse(JSON.stringify(supplier));
                if (!supplierToEdit.contacts) supplierToEdit.contacts = [];
                if (supplierToEdit.contacts.length === 0) supplierToEdit.contacts.push({ name: '', role: '', phone: '', email: '' });
                if (!supplierToEdit.specifications) supplierToEdit.specifications = {};

                showSupplierModalForm(supplierToEdit, 'Modifier le Fournisseur');
            } else {
                showSupplierNotification('‚ùå Fournisseur non trouv√©.', 'error');
            }
        }
        
        function showSupplierModalForm(supplier, title) {
            const formSupplier = { ...supplier };
            formSupplier.contacts = (formSupplier.contacts && formSupplier.contacts.length > 0) ? formSupplier.contacts : [{ name: '', role: '', phone: '', email: '' }];
            formSupplier.specifications = formSupplier.specifications || {};

            let contactsHtml = formSupplier.contacts.map((contact, index) => `
                <div class="contact-entry" data-contact-index="${index}">
                    <input type="text" id="edit-contact-name-${index}" class="form-control" placeholder="Nom du contact" value="${contact.name || ''}">
                    <input type="text" id="edit-contact-role-${index}" class="form-control" placeholder="R√¥le" value="${contact.role || ''}">
                    <input type="text" id="edit-contact-phone-${index}" class="form-control" placeholder="T√©l√©phone" value="${contact.phone || ''}">
                    <input type="email" id="edit-contact-email-${index}" class="form-control" placeholder="Email" value="${contact.email || ''}">
                    ${formSupplier.contacts.length > 1 ? `<button type="button" class="btn btn-danger btn-small" onclick="removeModalContactEntry(this)">‚úï</button>` : ''}
                </div>
            `).join('');

            let specsHtml = Object.entries(formSupplier.specifications).map(([key, value], index) => `
                <div class="spec-entry" data-spec-index="${index}">
                    <input type="text" id="edit-spec-key-${index}" class="form-control" placeholder="Nom Sp√©c." value="${key || ''}">
                    <input type="text" id="edit-spec-value-${index}" class="form-control" placeholder="Valeur Sp√©c." value="${value || ''}">
                     <button type="button" class="btn btn-danger btn-small" onclick="removeModalSpecEntry(this)">‚úï</button>
                </div>
            `).join('');

            const modalBodyHtml = `
                <div class="form-grid" style="grid-template-columns: 1fr 1fr;">
                    <div class="form-group">
                        <label>ID Fournisseur:</label>
                        <input type="text" id="edit-supplier-id" class="form-control" value="${formSupplier.id}" ${editingItem ? 'readonly' : ''}>
                    </div>
                    <div class="form-group">
                        <label>Nom Fournisseur:</label>
                        <input type="text" id="edit-supplier-name" class="form-control" value="${formSupplier.name}">
                    </div>
                    <div class="form-group">
                        <label>Localisation:</label>
                        <input type="text" id="edit-supplier-location" class="form-control" value="${formSupplier.location}">
                    </div>
                    <div class="form-group">
                        <label>Cat√©gorie:</label>
                        <select id="edit-supplier-category" class="form-control">
                            <option value="materials" ${formSupplier.category === 'materials' ? 'selected' : ''}>Mat√©riaux</option>
                            <option value="services" ${formSupplier.category === 'services' ? 'selected' : ''}>Services</option>
                        </select>
                    </div>
                     <div class="form-group">
                        <label>Status:</label>
                        <select id="edit-supplier-status" class="form-control">
                            <option value="active" ${formSupplier.status === 'active' ? 'selected' : ''}>Actif</option>
                            <option value="pending" ${formSupplier.status === 'pending' ? 'selected' : ''}>En attente</option>
                            <option value="inactive" ${formSupplier.status === 'inactive' ? 'selected' : ''}>Inactif</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Mat√©riaux/Services (s√©par√©s par virgule):</label>
                        <input type="text" id="edit-supplier-materials" class="form-control" value="${(formSupplier.materials || []).join(', ')}">
                    </div>
                </div>

                <div class="dynamic-field-group">
                    <h5>Contacts <button type="button" class="btn btn-primary btn-small" onclick="addModalContactEntry()">+ Contact</button></h5>
                    <div id="modal-contacts-container">
                        ${contactsHtml}
                    </div>
                </div>
                
                <div class="dynamic-field-group">
                     <h5>Sp√©cifications <button type="button" class="btn btn-primary btn-small" onclick="addModalSpecEntry()">+ Sp√©c.</button></h5>
                    <div id="modal-specs-container">
                        ${specsHtml}
                    </div>
                </div>

                <div class="form-group">
                    <label>Notes:</label>
                    <textarea id="edit-supplier-notes" class="form-control" rows="3">${formSupplier.notes || ''}</textarea>
                </div>
                 <div class="form-grid" style="grid-template-columns: 1fr 1fr;">
                    <div class="form-group">
                        <label>Info Livraison:</label>
                        <input type="text" id="edit-supplier-deliveryinfo" class="form-control" value="${formSupplier.deliveryInfo || ''}">
                    </div>
                    <div class="form-group">
                        <label>Site Web:</label>
                        <input type="text" id="edit-supplier-website" class="form-control" value="${formSupplier.website || ''}">
                    </div>
                    <div class="form-group">
                        <label>√âvaluation (0-5):</label>
                        <input type="number" id="edit-supplier-rating" class="form-control" value="${formSupplier.rating || 0}" step="0.1" min="0" max="5">
                    </div>
                    <div class="form-group">
                        <label>Dernier Contact:</label>
                        <input type="date" id="edit-supplier-lastcontact" class="form-control" value="${formSupplier.lastContact || ''}">
                    </div>
                </div>
            `;
            showEditModal(title, modalBodyHtml);
        }
        
        function addModalContactEntry() {
            const container = document.getElementById('modal-contacts-container');
            if (!container) return;
            
            const index = container.children.length;
            const entryDiv = document.createElement('div');
            entryDiv.className = 'contact-entry';
            entryDiv.dataset.contactIndex = index;
            entryDiv.innerHTML = `
                <input type="text" id="edit-contact-name-${index}" class="form-control" placeholder="Nom du contact">
                <input type="text" id="edit-contact-role-${index}" class="form-control" placeholder="R√¥le">
                <input type="text" id="edit-contact-phone-${index}" class="form-control" placeholder="T√©l√©phone">
                <input type="email" id="edit-contact-email-${index}" class="form-control" placeholder="Email">
                <button type="button" class="btn btn-danger btn-small" onclick="removeModalContactEntry(this)">‚úï</button>
            `;
            container.appendChild(entryDiv);
        }

        function removeModalContactEntry(buttonElement) {
            const container = document.getElementById('modal-contacts-container');
            const entryToRemove = buttonElement.closest('.contact-entry');
            
            if (entryToRemove && container.children.length > 1) {
                container.removeChild(entryToRemove);
                reindexContactEntries();
            }
        }

        function reindexContactEntries() {
            const container = document.getElementById('modal-contacts-container');
            if (!container) return;
            
            Array.from(container.children).forEach((entry, newIndex) => {
                entry.dataset.contactIndex = newIndex;
                
                const inputs = entry.querySelectorAll('input');
                inputs.forEach(input => {
                    const oldId = input.id;
                    const baseName = oldId.replace(/-\d+$/, '');
                    input.id = `${baseName}-${newIndex}`;
                });
                
                const deleteBtn = entry.querySelector('.btn-danger');
                if (deleteBtn && container.children.length > 1) {
                    deleteBtn.onclick = () => removeModalContactEntry(deleteBtn);
                }
            });
        }

        function addModalSpecEntry() {
            const container = document.getElementById('modal-specs-container');
            if (!container) return;
            
            const index = container.children.length;
            const entryDiv = document.createElement('div');
            entryDiv.className = 'spec-entry';
            entryDiv.dataset.specIndex = index;
            entryDiv.innerHTML = `
                <input type="text" id="edit-spec-key-${index}" class="form-control" placeholder="Nom Sp√©c.">
                <input type="text" id="edit-spec-value-${index}" class="form-control" placeholder="Valeur Sp√©c.">
                <button type="button" class="btn btn-danger btn-small" onclick="removeModalSpecEntry(this)">‚úï</button>
            `;
            container.appendChild(entryDiv);
        }

        function removeModalSpecEntry(buttonElement) {
            const entryToRemove = buttonElement.closest('.spec-entry');
            if (entryToRemove) {
                entryToRemove.remove();
                reindexSpecEntries();
            }
        }

        function reindexSpecEntries() {
            const container = document.getElementById('modal-specs-container');
            if (!container) return;
            
            Array.from(container.children).forEach((entry, newIndex) => {
                entry.dataset.specIndex = newIndex;
                
                const inputs = entry.querySelectorAll('input');
                inputs.forEach(input => {
                    const oldId = input.id;
                    const baseName = oldId.replace(/-\d+$/, '');
                    input.id = `${baseName}-${newIndex}`;
                });
            });
        }

        function confirmDeleteSupplier(supplierId) {
            const supplier = currentData.suppliers.find(s => s.id === supplierId);
            if (!supplier) {
                showSupplierNotification('Fournisseur non trouv√©.', 'error');
                return;
            }
            
            const confirmMessage = `√ätes-vous s√ªr de vouloir supprimer le fournisseur "${supplier.name}" ?\n\nCette action est irr√©versible et supprimera :\n‚Ä¢ Toutes les informations du fournisseur\n‚Ä¢ Les contacts associ√©s\n‚Ä¢ Les sp√©cifications enregistr√©es`;
            
            if (confirm(confirmMessage)) {
                currentData.suppliers = currentData.suppliers.filter(s => s.id !== supplierId);
                saveData();
                applySupplierFiltersAndSearch();
                showSupplierNotification(`Fournisseur "${supplier.name}" supprim√© avec succ√®s.`, 'success');
            }
        }

        // ===== ENHANCED SUPPLIER FEATURES =====
        function updateSupplierStats() {
            const stats = {
                total: currentData.suppliers ? currentData.suppliers.length : 0,
                active: currentData.suppliers ? currentData.suppliers.filter(s => s.status === 'active').length : 0,
                materials: currentData.suppliers ? currentData.suppliers.filter(s => s.category === 'materials').length : 0,
                services: currentData.suppliers ? currentData.suppliers.filter(s => s.category === 'services').length : 0,
                local: currentData.suppliers ? currentData.suppliers.filter(s => s.location.toLowerCase().includes('granby')).length : 0
            };

            let statsPanel = document.getElementById('supplier-stats-panel');
            if (!statsPanel) {
                statsPanel = document.createElement('div');
                statsPanel.id = 'supplier-stats-panel';
                statsPanel.style.cssText = `
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
                    gap: 15px;
                    margin-bottom: 20px;
                    padding: 0;
                `;
                
                const searchBar = document.querySelector('#admin-suppliers .search-bar');
                if (searchBar) {
                    searchBar.parentNode.insertBefore(statsPanel, searchBar);
                }
            }

            statsPanel.innerHTML = `
                <div class="stat-card" style="background: linear-gradient(135deg, #3b82f6, #2563eb); color: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 4px 6px rgba(59, 130, 246, 0.2);">
                    <div style="font-size: 24px; font-weight: 700;">${stats.total}</div>
                    <div style="font-size: 12px; opacity: 0.9;">Total</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #10b981, #059669); color: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 4px 6px rgba(16, 185, 129, 0.2);">
                    <div style="font-size: 24px; font-weight: 700;">${stats.active}</div>
                    <div style="font-size: 12px; opacity: 0.9;">Actifs</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 4px 6px rgba(245, 158, 11, 0.2);">
                    <div style="font-size: 24px; font-weight: 700;">${stats.materials}</div>
                    <div style="font-size: 12px; opacity: 0.9;">üè≠ Mat√©riaux</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 4px 6px rgba(139, 92, 246, 0.2);">
                    <div style="font-size: 24px; font-weight: 700;">${stats.services}</div>
                    <div style="font-size: 12px; opacity: 0.9;">‚öôÔ∏è Services</div>
                </div>
                <div class="stat-card" style="background: linear-gradient(135deg, #ef4444, #dc2626); color: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 4px 6px rgba(239, 68, 68, 0.2);">
                    <div style="font-size: 24px; font-weight: 700;">${stats.local}</div>
                    <div style="font-size: 12px; opacity: 0.9;">üìç Local</div>
                </div>
            `;
        }

        function addSortingOptions() {
            const searchBar = document.querySelector('#admin-suppliers .search-bar');
            if (!searchBar || document.getElementById('sort-options')) return;

            const sortContainer = document.createElement('div');
            sortContainer.id = 'sort-options';
            sortContainer.style.cssText = `
                display: flex;
                align-items: center;
                gap: 10px;
                margin-top: 15px;
                padding-top: 15px;
                border-top: 1px solid var(--border-color);
            `;

            sortContainer.innerHTML = `
                <span style="font-weight: 500; color: var(--text-color); font-size: 14px;">Trier par:</span>
                <select id="sort-select" style="padding: 6px 12px; border: 1px solid var(--border-color); border-radius: 6px; font-size: 14px; background: white;">
                    <option value="name-asc">Nom (A-Z)</option>
                    <option value="name-desc">Nom (Z-A)</option>
                    <option value="location-asc">Localisation (A-Z)</option>
                    <option value="rating-desc">√âvaluation (‚Üì)</option>
                    <option value="status-active">Status (Actifs d'abord)</option>
                    <option value="lastContact-desc">Dernier contact (‚Üì)</option>
                    <option value="category-materials">Cat√©gorie (Mat√©riaux d'abord)</option>
                </select>
                <button id="sort-direction" style="padding: 6px 12px; border: 1px solid var(--border-color); border-radius: 6px; background: white; cursor: pointer; font-size: 14px;" title="Inverser l'ordre">
                    ‚ÜïÔ∏è
                </button>
            `;

            searchBar.appendChild(sortContainer);

            document.getElementById('sort-select').addEventListener('change', applySorting);
            document.getElementById('sort-direction').addEventListener('click', function() {
                this.style.transform = this.style.transform === 'rotate(180deg)' ? 'rotate(0deg)' : 'rotate(180deg)';
                applySorting();
            });
        }

        function applySorting() {
            const sortSelect = document.getElementById('sort-select');
            const sortDirection = document.getElementById('sort-direction');
            if (!sortSelect || !filteredSuppliersForDisplay) return;

            const [field, direction] = sortSelect.value.split('-');
            const isReversed = sortDirection.style.transform === 'rotate(180deg)';

            filteredSuppliersForDisplay.sort((a, b) => {
                let aVal, bVal;

                switch(field) {
                    case 'name':
                        aVal = a.name.toLowerCase();
                        bVal = b.name.toLowerCase();
                        break;
                    case 'location':
                        aVal = a.location.toLowerCase();
                        bVal = b.location.toLowerCase();
                        break;
                    case 'rating':
                        aVal = a.rating || 0;
                        bVal = b.rating || 0;
                        return isReversed ? aVal - bVal : bVal - aVal;
                    case 'status':
                        const statusOrder = { 'active': 3, 'pending': 2, 'inactive': 1 };
                        aVal = statusOrder[a.status] || 0;
                        bVal = statusOrder[b.status] || 0;
                        return isReversed ? aVal - bVal : bVal - aVal;
                    case 'lastContact':
                        aVal = new Date(a.lastContact || '1900-01-01');
                        bVal = new Date(b.lastContact || '1900-01-01');
                        return isReversed ? aVal - bVal : bVal - aVal;
                    case 'category':
                        const categoryOrder = { 'materials': 2, 'services': 1 };
                        aVal = categoryOrder[a.category] || 0;
                        bVal = categoryOrder[b.category] || 0;
                        return isReversed ? aVal - bVal : bVal - aVal;
                    default:
                        return 0;
                }

                if (direction === 'desc' && !isReversed) {
                    return bVal.localeCompare ? bVal.localeCompare(aVal) : bVal > aVal ? 1 : -1;
                } else {
                    return aVal.localeCompare ? aVal.localeCompare(bVal) : aVal > bVal ? 1 : -1;
                }
            });

            renderEnhancedSuppliers();
        }

        function exportFilteredSuppliers() {
            const searchBar = document.querySelector('#admin-suppliers .search-bar');
            if (!searchBar || document.getElementById('export-options')) return;

            const exportContainer = document.createElement('div');
            exportContainer.id = 'export-options';
            exportContainer.style.cssText = `
                display: flex;
                align-items: center;
                gap: 10px;
                margin-top: 10px;
            `;

            exportContainer.innerHTML = `
                <button id="export-filtered" style="padding: 8px 16px; background: linear-gradient(135deg, var(--primary-color), var(--primary-color-darker)); color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 500;">
                    üì§ Exporter R√©sultats Filtr√©s
                </button>
                <button id="export-selected-fields" style="padding: 8px 16px; background: linear-gradient(135deg, #6366f1, #4f46e5); color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 500;">
                    üìã Export Personnalis√©
                </button>
            `;

            searchBar.appendChild(exportContainer);

            document.getElementById('export-filtered').addEventListener('click', function() {
                const dataToExport = {
                    suppliers: filteredSuppliersForDisplay,
                    exportDate: new Date().toISOString(),
                    filters: {
                        activeFilter: activeSupplierFilter,
                        searchTerm: document.getElementById('supplierSearchInput').value,
                        totalResults: filteredSuppliersForDisplay.length
                    }
                };

                const blob = new Blob([JSON.stringify(dataToExport, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `fournisseurs_filtres_${new Date().toLocaleDateString('fr-CA')}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                showSupplierNotification(`${filteredSuppliersForDisplay.length} fournisseur(s) export√©(s) avec succ√®s!`, 'success');
            });

            document.getElementById('export-selected-fields').addEventListener('click', showFieldSelectionModal);
        }

        function showFieldSelectionModal() {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 1003;
            `;

            modal.innerHTML = `
                <div style="background: white; border-radius: 12px; padding: 30px; max-width: 500px; width: 90%; max-height: 80%; overflow-y: auto;">
                    <h3 style="margin: 0 0 20px 0; color: var(--primary-color-darker);">üìã Export Personnalis√©</h3>
                    <p style="margin: 0 0 20px 0; color: var(--text-color-light);">S√©lectionnez les champs √† inclure dans l'export :</p>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-bottom: 20px;">
                        <label style="display: flex; align-items: center; gap: 8px; padding: 8px; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer;">
                            <input type="checkbox" checked> ID & Nom
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; padding: 8px; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer;">
                            <input type="checkbox" checked> Localisation
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; padding: 8px; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer;">
                            <input type="checkbox" checked> Cat√©gorie & Status
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; padding: 8px; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer;">
                            <input type="checkbox" checked> Mat√©riaux/Services
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; padding: 8px; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer;">
                            <input type="checkbox" checked> Contacts
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; padding: 8px; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer;">
                            <input type="checkbox"> Sp√©cifications
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; padding: 8px; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer;">
                            <input type="checkbox"> Notes
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; padding: 8px; border: 1px solid var(--border-color); border-radius: 6px; cursor: pointer;">
                            <input type="checkbox"> √âvaluation & Contact
                        </label>
                    </div>

                    <div style="display: flex; gap: 10px; justify-content: flex-end;">
                        <button onclick="this.closest('[style*=\"position: fixed\"]').remove()" style="padding: 10px 20px; background: #6b7280; color: white; border: none; border-radius: 6px; cursor: pointer;">
                            Annuler
                        </button>
                        <button onclick="performCustomExport(this)" style="padding: 10px 20px; background: var(--primary-color); color: white; border: none; border-radius: 6px; cursor: pointer;">
                            üì§ Exporter
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);
            modal.addEventListener('click', function(e) {
                if (e.target === modal) modal.remove();
            });
        }

        function performCustomExport(button) {
            const modal = button.closest('[style*="position: fixed"]');
            const checkboxes = modal.querySelectorAll('input[type="checkbox"]');
            const selectedFields = [];
            
            checkboxes.forEach((cb, index) => {
                if (cb.checked) {
                    selectedFields.push(['basic', 'location', 'category', 'materials', 'contacts', 'specifications', 'notes', 'rating'][index]);
                }
            });

            const customData = filteredSuppliersForDisplay.map(supplier => {
                const exportItem = {};
                
                if (selectedFields.includes('basic')) {
                    exportItem.id = supplier.id;
                    exportItem.name = supplier.name;
                }
                if (selectedFields.includes('location')) {
                    exportItem.location = supplier.location;
                }
                if (selectedFields.includes('category')) {
                    exportItem.category = supplier.category;
                    exportItem.status = supplier.status;
                }
                if (selectedFields.includes('materials')) {
                    exportItem.materials = supplier.materials;
                }
                if (selectedFields.includes('contacts')) {
                    exportItem.contacts = supplier.contacts;
                }
                if (selectedFields.includes('specifications')) {
                    exportItem.specifications = supplier.specifications;
                }
                if (selectedFields.includes('notes')) {
                    exportItem.notes = supplier.notes;
                }
                if (selectedFields.includes('rating')) {
                    exportItem.rating = supplier.rating;
                    exportItem.lastContact = supplier.lastContact;
                }
                
                return exportItem;
            });

            const blob = new Blob([JSON.stringify(customData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `fournisseurs_export_personnalise_${new Date().toLocaleDateString('fr-CA')}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            modal.remove();
            showSupplierNotification('Export personnalis√© cr√©√© avec succ√®s!', 'success');
        }

        function initEnhancedSuppliersFeatures() {
            if (!document.getElementById('admin-suppliers') || !document.getElementById('admin-suppliers').classList.contains('active')) {
                return;
            }

            updateSupplierStats();
            addSortingOptions();
            exportFilteredSuppliers();
        }

        // ===== RENDU DES LISTES SIMPLES =====
        function renderOperations() {
            const container = document.getElementById('operations-list');
            if (!container) return;
            container.innerHTML = '';
            (currentData.operations || []).forEach((operation, index) => {
                const item = document.createElement('div');
                item.className = 'data-item';
                item.innerHTML = `
                    <div class="data-item-content">
                        <strong>${operation.code}</strong>
                        <span>${operation.name}</span>
                        <span style="color: var(--primary-color); font-weight: 600;">${parseFloat(operation.rate).toFixed(2)} $/h</span>
                    </div>
                    <div class="data-item-actions">
                        <button class="btn btn-secondary btn-small" onclick="editOperation(${index})">‚úèÔ∏è</button>
                        <button class="btn btn-danger btn-small" onclick="deleteOperation(${index})">üóëÔ∏è</button>
                    </div>
                `;
                container.appendChild(item);
            });
        }

        function renderServices() {
            const container = document.getElementById('services-list');
            if (!container) return;
            container.innerHTML = '';
            (currentData.services || []).forEach((service, index) => {
                const item = document.createElement('div');
                item.className = 'data-item';
                item.innerHTML = `
                    <div class="data-item-content">
                        <strong>${service.code}</strong>
                        <span>${service.name}</span>
                    </div>
                    <div class="data-item-actions">
                        <button class="btn btn-secondary btn-small" onclick="editService(${index})">‚úèÔ∏è</button>
                        <button class="btn btn-danger btn-small" onclick="deleteService(${index})">üóëÔ∏è</button>
                    </div>
                `;
                container.appendChild(item);
            });
        }

        function renderSubcontractors() {
            const container = document.getElementById('subcontractors-list');
            if (!container) return;
            container.innerHTML = '';
            Object.keys(currentData.subcontractors || {}).forEach(serviceCode => {
                const serviceName = (currentData.services || []).find(s => s.code === serviceCode)?.name || serviceCode;
                const header = document.createElement('div');
                header.className = 'data-item';
                header.style.cssText = 'background-color: var(--primary-color-light, #e6f7f1); color: var(--primary-color-darker); font-weight: 600;';
                header.innerHTML = `<div class="data-item-content"><span class="supplier-category">üîß ${serviceName}</span></div>`;
                container.appendChild(header);
                
                (currentData.subcontractors[serviceCode] || []).forEach((subcontractor, index) => {
                    const item = document.createElement('div');
                    item.className = 'data-item';
                    item.innerHTML = `
                        <div class="data-item-content">
                            <strong>${subcontractor.code}</strong>
                            <span>${subcontractor.name}</span>
                        </div>
                        <div class="data-item-actions">
                            <button class="btn btn-secondary btn-small" onclick="editSubcontractor('${serviceCode}', ${index})">‚úèÔ∏è</button>
                            <button class="btn btn-danger btn-small" onclick="deleteSubcontractor('${serviceCode}', ${index})">üóëÔ∏è</button>
                        </div>
                    `;
                    container.appendChild(item);
                });
            });
        }

        function updateSubcontractorServiceSelect() {
            const select = document.getElementById('subcontractor-service');
            if (!select) return;
            select.innerHTML = '<option value="">S√©lectionner un service...</option>';
            (currentData.services || []).forEach(service => {
                const option = document.createElement('option');
                option.value = service.code;
                option.textContent = service.name;
                select.appendChild(option);
            });
        }

        // ===== AJOUT D'√âL√âMENTS =====
        function addOperation() {
            const code = document.getElementById('operation-code').value.trim();
            const name = document.getElementById('operation-name').value.trim();
            const rate = parseFloat(document.getElementById('operation-rate').value);
            if (!code || !name || isNaN(rate)) { showGlobalNotification('‚ùå Veuillez remplir tous les champs correctement'); return; }
            if (currentData.operations.find(o => o.code === code)) { showGlobalNotification('‚ùå Ce code existe d√©j√†'); return; }
            currentData.operations.push({ code, name, rate });
            currentData.operations.sort((a, b) => a.name.localeCompare(b.name));
            document.getElementById('operation-code').value = ''; document.getElementById('operation-name').value = ''; document.getElementById('operation-rate').value = '';
            saveData(); renderOperations(); showGlobalNotification('‚úÖ Op√©ration ajout√©e.');
        }

        function addService() {
            const code = document.getElementById('service-code').value.trim();
            const name = document.getElementById('service-name').value.trim();
            if (!code || !name) { showGlobalNotification('‚ùå Veuillez remplir tous les champs'); return; }
            if (currentData.services.find(s => s.code === code)) { showGlobalNotification('‚ùå Ce code existe d√©j√†'); return; }
            currentData.services.push({ code, name });
            currentData.services.sort((a, b) => a.name.localeCompare(b.name));
            if (!currentData.subcontractors[code]) currentData.subcontractors[code] = [];
            document.getElementById('service-code').value = ''; document.getElementById('service-name').value = '';
            saveData(); renderServices(); renderSubcontractors(); updateSubcontractorServiceSelect(); showGlobalNotification('‚úÖ Service ajout√©.');
        }

        function addSubcontractor() {
            const serviceCode = document.getElementById('subcontractor-service').value;
            const code = document.getElementById('subcontractor-code').value.trim();
            const name = document.getElementById('subcontractor-name').value.trim();
            if (!serviceCode || !code || !name) { showGlobalNotification('‚ùå Veuillez remplir tous les champs'); return; }
            if (!currentData.subcontractors[serviceCode]) currentData.subcontractors[serviceCode] = [];
            if (currentData.subcontractors[serviceCode].find(s => s.code === code)) { showGlobalNotification('‚ùå Ce code existe d√©j√† pour ce service'); return; }
            currentData.subcontractors[serviceCode].push({ code, name });
            currentData.subcontractors[serviceCode].sort((a, b) => a.name.localeCompare(b.name));
            document.getElementById('subcontractor-service').value = ''; document.getElementById('subcontractor-code').value = ''; document.getElementById('subcontractor-name').value = '';
            saveData(); renderSubcontractors(); showGlobalNotification('‚úÖ Sous-traitant ajout√©.');
        }

        // ===== √âDITION =====
        function editOperation(index) {
            editingType = 'operation'; editingItem = index;
            const op = currentData.operations[index];
            showEditModal('Modifier l\'op√©ration', `
                <div class="form-group"><label>Code:</label><input type="text" id="edit-code" class="form-control" value="${op.code}"></div>
                <div class="form-group"><label>Nom:</label><input type="text" id="edit-name" class="form-control" value="${op.name}"></div>
                <div class="form-group"><label>Taux ($/h):</label><input type="number" id="edit-rate" class="form-control" value="${op.rate}" step="0.01"></div>
            `);
        }

        function editService(index) {
            editingType = 'service'; editingItem = index;
            const srv = currentData.services[index];
            showEditModal('Modifier le service', `
                <div class="form-group"><label>Code:</label><input type="text" id="edit-code" class="form-control" value="${srv.code}"></div>
                <div class="form-group"><label>Nom:</label><input type="text" id="edit-name" class="form-control" value="${srv.name}"></div>
            `);
        }

        function editSubcontractor(serviceCode, index) {
            editingType = 'subcontractor'; editingItem = { serviceCode, index };
            const sub = currentData.subcontractors[serviceCode][index];
            showEditModal('Modifier le sous-traitant', `
                <div class="form-group"><label>Service:</label><input type="text" class="form-control" value="${serviceCode}" readonly></div>
                <div class="form-group"><label>Code fournisseur:</label><input type="text" id="edit-code" class="form-control" value="${sub.code}"></div>
                <div class="form-group"><label>Nom fournisseur:</label><input type="text" id="edit-name" class="form-control" value="${sub.name}"></div>
            `);
        }

        function showEditModal(title, content) {
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-body').innerHTML = content;
            document.getElementById('edit-modal').classList.add('show');
        }

        function closeModal() {
            document.getElementById('edit-modal').classList.remove('show');
            editingItem = null; editingType = null;
        }

        function saveEdit() {
            if (editingType === 'enhancedSupplier') {
                const id = document.getElementById('edit-supplier-id').value.trim();
                if (!id) { showSupplierNotification('‚ùå L\'ID Fournisseur est requis.', 'error'); return; }

                const updatedSupplier = {
                    id: id,
                    name: document.getElementById('edit-supplier-name').value.trim(),
                    location: document.getElementById('edit-supplier-location').value.trim(),
                    category: document.getElementById('edit-supplier-category').value,
                    status: document.getElementById('edit-supplier-status').value,
                    materials: document.getElementById('edit-supplier-materials').value.split(',').map(m => m.trim()).filter(m => m),
                    notes: document.getElementById('edit-supplier-notes').value.trim(),
                    deliveryInfo: document.getElementById('edit-supplier-deliveryinfo').value.trim(),
                    website: document.getElementById('edit-supplier-website').value.trim(),
                    rating: parseFloat(document.getElementById('edit-supplier-rating').value) || 0,
                    lastContact: document.getElementById('edit-supplier-lastcontact').value,
                    contacts: [],
                    specifications: {}
                };

                const contactEntries = document.querySelectorAll('#modal-contacts-container .contact-entry');
                contactEntries.forEach((entry, idx) => {
                    const name = entry.querySelector(`input[id^="edit-contact-name-"]`).value.trim();
                    if (name) {
                        updatedSupplier.contacts.push({
                            name: name,
                            role: entry.querySelector(`input[id^="edit-contact-role-"]`).value.trim(),
                            phone: entry.querySelector(`input[id^="edit-contact-phone-"]`).value.trim(),
                            email: entry.querySelector(`input[id^="edit-contact-email-"]`).value.trim()
                        });
                    }
                });
                
                const specEntries = document.querySelectorAll('#modal-specs-container .spec-entry');
                specEntries.forEach(entry => {
                    const key = entry.querySelector(`input[id^="edit-spec-key-"]`).value.trim();
                    const value = entry.querySelector(`input[id^="edit-spec-value-"]`).value.trim();
                    if (key) updatedSupplier.specifications[key] = value;
                });

                if (editingItem) {
                    const index = currentData.suppliers.findIndex(s => s.id === editingItem);
                    if (index !== -1) currentData.suppliers[index] = updatedSupplier;
                } else {
                    if (currentData.suppliers.find(s => s.id === updatedSupplier.id)) {
                        showSupplierNotification('‚ùå Cet ID Fournisseur existe d√©j√†.', 'error'); return;
                    }
                    currentData.suppliers.push(updatedSupplier);
                }
                currentData.suppliers.sort((a, b) => a.name.localeCompare(b.name));
                applySupplierFiltersAndSearch();
                showSupplierNotification('‚úÖ Fournisseur sauvegard√©.', 'success');
            
            } else {
                const code = document.getElementById('edit-code').value.trim();
                const name = document.getElementById('edit-name').value.trim();
                if (!code || !name) { showGlobalNotification('‚ùå Veuillez remplir code et nom.'); return; }

                switch (editingType) {
                    case 'operation':
                        const rate = parseFloat(document.getElementById('edit-rate').value);
                        if (isNaN(rate)) { showGlobalNotification('‚ùå Taux invalide.'); return; }
                        currentData.operations[editingItem] = { code, name, rate };
                        currentData.operations.sort((a, b) => a.name.localeCompare(b.name));
                        renderOperations();
                        break;
                    case 'service':
                        const oldCode = currentData.services[editingItem].code;
                        currentData.services[editingItem] = { code, name };
                        currentData.services.sort((a, b) => a.name.localeCompare(b.name));
                        if (oldCode !== code && currentData.subcontractors[oldCode]) {
                            currentData.subcontractors[code] = currentData.subcontractors[oldCode];
                            delete currentData.subcontractors[oldCode];
                        }
                        renderServices(); renderSubcontractors(); updateSubcontractorServiceSelect();
                        break;
                    case 'subcontractor':
                        const { serviceCode, index } = editingItem;
                        currentData.subcontractors[serviceCode][index] = { code, name };
                        currentData.subcontractors[serviceCode].sort((a, b) => a.name.localeCompare(b.name));
                        renderSubcontractors();
                        break;
                }
                showGlobalNotification('‚úÖ Modification sauvegard√©e.');
            }
            
            saveData();
            closeModal();
        }

        // ===== SUPPRESSION =====
        function deleteOperation(index) {
            if (confirm('Supprimer cette op√©ration ?')) {
                currentData.operations.splice(index, 1); saveData(); renderOperations(); showGlobalNotification('‚úÖ Op√©ration supprim√©e.');
            }
        }
        function deleteService(index) {
            const service = currentData.services[index];
            if (confirm(`Supprimer le service "${service.name}" et tous ses sous-traitants ?`)) {
                delete currentData.subcontractors[service.code]; currentData.services.splice(index, 1);
                saveData(); renderServices(); renderSubcontractors(); updateSubcontractorServiceSelect(); showGlobalNotification('‚úÖ Service supprim√©.');
            }
        }
        function deleteSubcontractor(serviceCode, index) {
            if (confirm('Supprimer ce sous-traitant ?')) {
                currentData.subcontractors[serviceCode].splice(index, 1); saveData(); renderSubcontractors(); showGlobalNotification('‚úÖ Sous-traitant supprim√©.');
            }
        }

        // ===== EXPORT/IMPORT =====
        function exportData(type) {
            let data, filename;
            switch (type) {
                case 'suppliers': data = currentData.suppliers; filename = 'dg_suppliers_enhanced.json'; break;
                case 'operations': data = currentData.operations; filename = 'dg_operations.json'; break;
                case 'services': data = currentData.services; filename = 'dg_services.json'; break;
                case 'subcontractors': data = currentData.subcontractors; filename = 'dg_subcontract-suppliers.json'; break;
                default: return;
            }
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a'); a.href = url; a.download = filename;
            document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url);
            showGlobalNotification(`üìÅ Fichier ${filename} export√©.`);
        }

        function importData() {
            const fileInput = document.getElementById('import-file');
            const file = fileInput.files[0];
            
            if (!file) { 
                showGlobalNotification('‚ùå Veuillez s√©lectionner un fichier', 'error'); 
                return; 
            }
            
            if (file.type !== 'application/json' && !file.name.endsWith('.json')) {
                showGlobalNotification('‚ùå Veuillez s√©lectionner un fichier JSON valide', 'error');
                return;
            }
            
            if (file.size > 5 * 1024 * 1024) {
                showGlobalNotification('‚ùå Fichier trop volumineux (max 5MB)', 'error');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    
                    if (!importedData || (typeof importedData !== 'object')) {
                        throw new Error('Format de donn√©es invalide');
                    }
                    
                    if (Array.isArray(importedData)) {
                        handleArrayImport(importedData);
                    } else if (typeof importedData === 'object') {
                        handleObjectImport(importedData);
                    } else {
                        throw new Error('Type de donn√©es non support√©');
                    }
                    
                    saveData();
                    initAdmin();
                    fileInput.value = '';
                    
                } catch (error) {
                    console.error('Import error:', error);
                    showGlobalNotification('‚ùå Erreur lors de l\'import: ' + error.message, 'error');
                }
            };
            
            reader.onerror = function() {
                showGlobalNotification('‚ùå Erreur lors de la lecture du fichier', 'error');
            };
            
            reader.readAsText(file);
        }

        function handleArrayImport(importedData) {
            if (importedData.length === 0) {
                showGlobalNotification('‚ÑπÔ∏è Fichier JSON (tableau) vide.', 'info');
                return;
            }
            
            const firstItem = importedData[0];
            
            if (firstItem.id && firstItem.category !== undefined) {
                if (confirm('Importer ces donn√©es comme Fournisseurs (structure enrichie)?')) {
                    importedData.forEach((supplier, index) => {
                        try {
                            validateSupplierData(supplier);
                        } catch (error) {
                            throw new Error(`Fournisseur ${index + 1}: ${error.message}`);
                        }
                    });
                    currentData.suppliers = importedData;
                    showGlobalNotification('‚úÖ Fournisseurs (enrichis) import√©s.');
                }
            }
            else if (firstItem.rate !== undefined && firstItem.code && firstItem.name) {
                currentData.operations = importedData;
                showGlobalNotification('‚úÖ Op√©rations import√©es.');
            }
            else if (firstItem.code && firstItem.name && Object.keys(firstItem).length <= 3) {
                if (confirm('Importer comme Services? (Annuler pour tenter Fournisseurs ancienne structure)')) {
                    currentData.services = importedData;
                    showGlobalNotification('‚úÖ Services import√©s.');
                } else if (confirm('Importer comme Fournisseurs (ancienne structure)? Ceci sera migr√©.')) {
                    currentData.suppliers = importedData;
                    showGlobalNotification('‚úÖ Fournisseurs (ancienne structure) import√©s. Sera migr√©.');
                }
            } else {
                throw new Error('Format de donn√©es non reconnu (tableau).');
            }
        }

        function handleObjectImport(importedData) {
            const keys = Object.keys(importedData);
            const isSubcontractors = keys.every(key => 
                Array.isArray(importedData[key]) && 
                importedData[key].every(item => item.code && item.name)
            );
            
            if (isSubcontractors) {
                currentData.subcontractors = importedData;
                showGlobalNotification('‚úÖ Sous-traitants import√©s.');
            } else {
                throw new Error('Format de donn√©es JSON non reconnu.');
            }
        }

        function resetToDefaults() {
            if (confirm('R√©initialiser TOUTES les donn√©es aux valeurs par d√©faut ? IRREVERSIBLE.')) {
                currentData = JSON.parse(JSON.stringify(defaultData)); saveData(); initAdmin();
                showGlobalNotification('üîÑ Donn√©es r√©initialis√©es.');
            }
        }

        // ===== GETFILLEDHTML AM√âLIOR√â =====
        function getFilledHTML(wrapperId) {
            const originalHTML = document.documentElement.outerHTML;
            const tempDoc = new DOMParser().parseFromString(originalHTML, 'text/html');
            const formToProcess = tempDoc.getElementById(wrapperId)?.querySelector('form');
            
            if (!formToProcess) {
                console.error(`Form not found in wrapper: ${wrapperId}`);
                return originalHTML;
            }

            formToProcess.querySelectorAll('input:not([type="button"]):not([type="submit"]), textarea, select').forEach(el => {
                let liveEl = null;
                
                if (el.id) {
                    liveEl = document.getElementById(el.id);
                } else if (el.name) {
                    liveEl = document.querySelector(`[name="${el.name}"]`);
                }
                
                if (liveEl) {
                    if (el.type === 'checkbox' || el.type === 'radio') {
                        el.checked = liveEl.checked;
                    } else {
                        el.setAttribute('value', liveEl.value);
                        if (el.tagName === 'TEXTAREA') {
                            el.textContent = liveEl.value;
                        }
                        if (el.tagName === 'SELECT') {
                            el.value = liveEl.value;
                            Array.from(el.options).forEach(opt => {
                                opt.selected = (opt.value === liveEl.value);
                            });
                        }
                    }
                }
            });
            
            const dateSpan = tempDoc.getElementById('current-date');
            const liveDateSpan = document.getElementById('current-date');
            if (dateSpan && liveDateSpan) {
                dateSpan.textContent = liveDateSpan.textContent;
            }

            return '<!DOCTYPE html>\n' + tempDoc.documentElement.outerHTML;
        }

        // ===== SCRIPTS POUR DEMANDE DE PRIX =====
        (function() {
            let itemCounter = 1;
            const introMessages = {
                materials: "Veuillez nous fournir un prix pour les mat√©riaux suivants n√©cessaires √† notre projet:",
                services: "Veuillez nous fournir un prix pour les services suivants n√©cessaires √† notre projet:",
                equipment: "Veuillez nous fournir un prix pour l'√©quipement suivant n√©cessaire √† notre projet:",
                subcontract: "Veuillez nous fournir un prix pour les travaux de sous-traitance suivants:"
            };
            const additionalRequirements = {
                materials: ["‚Ä¢ Les prix doivent inclure toutes les certifications mati√®re requises", "‚Ä¢ Merci d'indiquer les d√©lais d'approvisionnement et les alternatives disponibles"],
                services: ["‚Ä¢ Veuillez inclure les qualifications et certifications de votre personnel", "‚Ä¢ Pr√©cisez les d√©lais d'ex√©cution et la disponibilit√©"],
                equipment: ["‚Ä¢ Incluez les garanties, manuels et formation si applicable", "‚Ä¢ Pr√©cisez les d√©lais de livraison et les conditions d'installation"],
                subcontract: ["‚Ä¢ Fournissez les assurances responsabilit√© et CSST", "‚Ä¢ Pr√©cisez les d√©lais d'ex√©cution et la disponibilit√© des √©quipes"]
            };

            window.toggleNotes = function(sectionName) {
                const content = document.getElementById(`${sectionName}-notes-content`);
                const icon = document.getElementById(`${sectionName}-notes-icon`);
                const text = document.getElementById(`${sectionName}-notes-text`);
                if (!content || !icon || !text) return;
                content.classList.toggle('expanded');
                icon.textContent = content.classList.contains('expanded') ? 'üìã' : 'üìù';
                text.textContent = (content.classList.contains('expanded') ? 'Masquer' : 'Ajouter') + ' notes demande de prix';
                if (content.classList.contains('expanded')) content.querySelector('textarea')?.focus();
            }

            window.updateIntroMessage = function() {
                const type = document.getElementById('request-type')?.value;
                if (type) {
                    document.getElementById('intro-message').textContent = introMessages[type];
                    document.getElementById('additional-requirements').innerHTML = additionalRequirements[type].map(req => `<p>${req}</p>`).join('');
                }
            }

            window.addRow = function() {
                itemCounter++;
                const tbody = document.getElementById('items-tbody');
                if (!tbody) return;
                const newRow = tbody.insertRow();
                newRow.className = 'item-row'; newRow.dataset.item = itemCounter;
                newRow.innerHTML = `
                    <td><input type="text" name="qty_${itemCounter}" class="editable qty-col" size="3" placeholder="1"></td>
                    <td><input type="text" name="desc_${itemCounter}" class="editable" placeholder="Description"></td>
                    <td><input type="text" name="dimensions_${itemCounter}" class="editable" placeholder="Dimensions/Sp√©c."></td>
                    <td><input type="text" name="weight_${itemCounter}" class="editable weight-col" size="8" placeholder="Poids"></td>
                    <td><input type="text" name="details_${itemCounter}" class="editable length-col" size="12" placeholder="D√©tails"></td>
                    <td><input type="text" name="clb_price_${itemCounter}" class="editable clb-col" size="6" placeholder="0.00"></td>
                    <td><input type="text" name="unit_price_${itemCounter}" class="editable price-col" size="6" placeholder="0.00"></td>
                    <td><input type="text" name="total_weight_${itemCounter}" class="readonly total-weight-col" size="8" readonly></td>
                    <td><input type="text" name="total_price_${itemCounter}" class="readonly price-col" size="6" readonly></td>
                    <td><button type="button" class="delete-btn" onclick="deleteRow(${itemCounter})">‚úï</button></td>
                `;
                addRowEventListeners(itemCounter);
                showGlobalNotification('‚úÖ Nouvelle ligne ajout√©e!');
            }

            window.deleteRow = function(itemId) {
                const wrapper = document.getElementById('demandePrixWrapper');
                const row = wrapper.querySelector(`tr[data-item="${itemId}"]`);
                if (row && wrapper.querySelectorAll('#items-tbody .item-row').length > 1) {
                    row.remove(); updateTotals_dem(); showGlobalNotification('‚úÖ Ligne supprim√©e!');
                } else { showGlobalNotification('‚ö†Ô∏è Impossible de supprimer la derni√®re ligne!'); }
            }

            function addRowEventListeners(itemId) {
                const wrapper = document.getElementById('demandePrixWrapper');
                ['qty', 'weight', 'clb_price', 'unit_price'].forEach(field => {
                    const input = wrapper.querySelector(`input[name="${field}_${itemId}"]`);
                    if (input) input.addEventListener('input', () => updateRowCalculations_dem(itemId));
                });
            }

            function updateRowCalculations_dem(itemId) {
                const wrapper = document.getElementById('demandePrixWrapper');
                const qty = parseFloat(wrapper.querySelector(`input[name="qty_${itemId}"]`).value) || 0;
                const weight = parseFloat(wrapper.querySelector(`input[name="weight_${itemId}"]`).value) || 0;
                const clbPrice = parseFloat(wrapper.querySelector(`input[name="clb_price_${itemId}"]`).value) || 0;
                const unitPrice = parseFloat(wrapper.querySelector(`input[name="unit_price_${itemId}"]`).value) || 0;
                
                const totalWeight = qty * weight;
                wrapper.querySelector(`input[name="total_weight_${itemId}"]`).value = totalWeight.toFixed(2);
                
                let totalPrice = unitPrice > 0 ? qty * unitPrice : (clbPrice > 0 && totalWeight > 0 ? (totalWeight / 100) * clbPrice : 0);
                wrapper.querySelector(`input[name="total_price_${itemId}"]`).value = totalPrice.toFixed(2);
                updateTotals_dem();
            }

            function updateTotals_dem() {
                const wrapper = document.getElementById('demandePrixWrapper');
                let subtotal = 0;
                wrapper.querySelectorAll('#items-tbody .item-row').forEach(row => {
                    subtotal += parseFloat(wrapper.querySelector(`input[name="total_price_${row.dataset.item}"]`).value) || 0;
                });
                wrapper.querySelector('input[name="subtotal"]').value = subtotal.toFixed(2);
                const taxes = subtotal * 0.14975;
                wrapper.querySelector('input[name="taxes"]').value = taxes.toFixed(2);
                const transport = parseFloat(wrapper.querySelector('input[name="transport"]').value) || 0;
                wrapper.querySelector('input[name="total"]').value = (subtotal + taxes + transport).toFixed(2);
            }

            window.clearForm = function() {
                const wrapper = document.getElementById('demandePrixWrapper');
                if (confirm('Vider le formulaire de DEMANDE DE PRIX?')) {
                    wrapper.querySelector('#priceRequestForm').reset();
                    const tbody = wrapper.querySelector('#items-tbody');
                    tbody.querySelectorAll('.item-row').forEach((row, i) => { if (i > 0) row.remove(); });
                    const firstRow = tbody.querySelector('.item-row');
                    if (firstRow) {
                        firstRow.querySelectorAll('input:not([readonly])').forEach(input => input.value = '');
                        addRowEventListeners(firstRow.dataset.item);
                    }
                    wrapper.querySelector('input[name="transport"]').value = '0';
                    const notesContent = wrapper.querySelector('#request-notes-content');
                    if (notesContent?.classList.contains('expanded')) toggleNotes('request');
                    wrapper.querySelector('textarea[name="request_notes"]').value = '';
                    itemCounter = 1;
                    updateTotals_dem();
                    showGlobalNotification('üóëÔ∏è Formulaire demande de prix vid√©!');
                }
            }

            window.saveAsHTML = function() {
                const wrapper = document.getElementById('demandePrixWrapper');
                const date = new Date().toLocaleDateString('fr-CA').replace(/\//g, '-');
                const project = wrapper.querySelector('#project-ref').value || 'PROJET';
                const company = wrapper.querySelector('#company-name_dem').value || 'FOURNISSEUR';
                
                const filledHTML = getFilledHTML('demandePrixWrapper');
                const blob = new Blob([filledHTML], { type: 'text/html' });
                const fileName = `Demande_Prix_DG_${project}_${company}_${date}.html`;
                
                const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = fileName;
                document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(a.href);
                showGlobalNotification('üíæ Fichier HTML (Demande de Prix) sauvegard√©!');
            }

            window.sendEmailWithAttachment = function() {
                const wrapper = document.getElementById('demandePrixWrapper');
                const date = new Date().toLocaleDateString('fr-CA');
                const project = wrapper.querySelector('#project-ref').value || 'PROJET';
                const company = wrapper.querySelector('#company-name_dem').value || 'FOURNISSEUR';
                const contact = wrapper.querySelector('#contact-name').value || 'Responsable';
                const email = wrapper.querySelector('#supplier-email').value || '';
                const type = wrapper.querySelector('#request-type').value;
                
                window.saveAsHTML();

                const typeText = { materials: 'mat√©riaux', services: 'services', equipment: '√©quipement', subcontract: 'sous-traitance' };
                const subject = `Demande de prix ${typeText[type]} - Projet ${project} - Desmarais & Gagn√© inc.`;
                const body = `Bonjour ${contact},\n\nVous trouverez ci-joint notre demande de prix pour ${typeText[type]} concernant le projet ${project}.\n\n${introMessages[type]}\n\nConditions:\n${additionalRequirements[type].join('\n')}\n\nMerci de retourner √† estimation@dg-inc.qc.ca (3 jours ouvrables).\nQuestions: (450) 372-9630.\n\nCordialement,\nAchats D&G`;
                window.location.href = `mailto:${email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
                showGlobalNotification('üìß Email (Demande de Prix) g√©n√©r√©! V√©rifiez client email.');
            }

            window.addRowEventListeners = addRowEventListeners;
            window.updateTotals_dem = updateTotals_dem;
        })();

        // ===== SCRIPTS POUR ESTIMATION =====
        (function() {
            let materialCounter = 1, programmingCounter = 1, fabricationCounter = 1, subcontractCounter = 1;

            window.toggleNotes_est = function(sectionName) {
                const wrapper = document.getElementById('estimationWrapper');
                const content = wrapper.querySelector(`#${sectionName}-notes-content`);
                const icon = wrapper.querySelector(`#${sectionName}-notes-icon`);
                const text = wrapper.querySelector(`#${sectionName}-notes-text`);
                if (!content || !icon || !text) return;
                content.classList.toggle('expanded');
                icon.textContent = content.classList.contains('expanded') ? 'üìã' : 'üìù';
                text.textContent = (content.classList.contains('expanded') ? 'Masquer' : 'Ajouter') + ` notes ${sectionName === 'subcontract' ? 'sous-traitance' : sectionName}`;
                if (content.classList.contains('expanded')) content.querySelector('textarea')?.focus();
            }

            function updateAllCalculations_est() {
                const wrapper = document.getElementById('estimationWrapper');
                if (!wrapper) return;
                
                let materialsSubtotal = 0;
                wrapper.querySelectorAll('#materials-tbody .item-row').forEach(row => materialsSubtotal += updateMaterialCalculations_est(row.dataset.item));
                wrapper.querySelector('input[name="materials_subtotal"]').value = materialsSubtotal.toFixed(2);
                const wasteFactor = parseFloat(wrapper.querySelector('input[name="waste_factor"]').value) || 0;
                const materialsWaste = materialsSubtotal * (wasteFactor / 100);
                wrapper.querySelector('input[name="materials_waste"]').value = materialsWaste.toFixed(2);
                const materialsTotal = materialsSubtotal + materialsWaste;
                wrapper.querySelector('input[name="materials_total"]').value = materialsTotal.toFixed(2);

                let programmingTotal = 0;
                wrapper.querySelectorAll('#programming-tbody .item-row').forEach(row => programmingTotal += updateProgrammingCalculations_est(row.dataset.item));
                wrapper.querySelector('input[name="programming_total"]').value = programmingTotal.toFixed(2);

                let fabricationTotal = 0;
                wrapper.querySelectorAll('#fabrication-tbody .item-row').forEach(row => fabricationTotal += updateFabricationCalculations_est(row.dataset.item));
                wrapper.querySelector('input[name="fabrication_total"]').value = fabricationTotal.toFixed(2);

                let subcontractTotal = 0;
                wrapper.querySelectorAll('#subcontract-tbody .item-row').forEach(row => subcontractTotal += updateSubcontractCalculations_est(row.dataset.item));
                wrapper.querySelector('input[name="subcontract_total"]').value = subcontractTotal.toFixed(2);

                const subtotal = materialsTotal + programmingTotal + fabricationTotal + subcontractTotal;
                const overheadRate = parseFloat(wrapper.querySelector('input[name="overhead_rate"]').value) || 0;
                const overheadAmount = subtotal * (overheadRate / 100);
                wrapper.querySelector('input[name="overhead_amount"]').value = overheadAmount.toFixed(2);
                const transportAmount = parseFloat(wrapper.querySelector('input[name="transport_amount"]').value) || 0;
                const subtotalBeforeMargin = subtotal + overheadAmount + transportAmount;
                wrapper.querySelector('input[name="subtotal_before_margin"]').value = subtotalBeforeMargin.toFixed(2);
                const marginRate = parseFloat(wrapper.querySelector('input[name="margin_rate"]').value) || 0;
                const marginAmount = subtotalBeforeMargin * (marginRate / 100);
                wrapper.querySelector('input[name="margin_amount"]').value = marginAmount.toFixed(2);
                const finalTotal = subtotalBeforeMargin + marginAmount;
                wrapper.querySelector('input[name="final_total"]').value = finalTotal.toFixed(2);

                updateDisplayElements_est(materialsTotal, programmingTotal + fabricationTotal, subcontractTotal, subtotal, finalTotal);
            }

            function updateDisplayElements_est(matTotal, fabTotal, subTotal, subBeforeFees, finalTotalVal) {
                const wrapper = document.getElementById('estimationWrapper');
                if (!wrapper) return;
                wrapper.querySelector('#recap-materials').textContent = matTotal.toFixed(2);
                wrapper.querySelector('#recap-programming').textContent = (parseFloat(wrapper.querySelector('input[name="programming_total"]').value) || 0).toFixed(2);
                wrapper.querySelector('#recap-fabrication').textContent = (parseFloat(wrapper.querySelector('input[name="fabrication_total"]').value) || 0).toFixed(2);
                wrapper.querySelector('#recap-subcontract').textContent = subTotal.toFixed(2);
                wrapper.querySelector('#recap-subtotal').textContent = subBeforeFees.toFixed(2);

                wrapper.querySelector('#summary-total').textContent = finalTotalVal.toFixed(2) + '$';
                wrapper.querySelector('#summary-materials').textContent = matTotal.toFixed(2) + '$';
                wrapper.querySelector('#summary-fabrication').textContent = fabTotal.toFixed(2) + '$';
                wrapper.querySelector('#summary-subcontract').textContent = subTotal.toFixed(2) + '$';
                wrapper.querySelector('#footer-total').textContent = finalTotalVal.toFixed(2) + '$';
            }

            function getVal(wrapper, selector, itemId, isFloat = true) {
                const el = wrapper.querySelector(selector.replace('_#', `_${itemId}`));
                const val = el ? el.value : '0';
                return isFloat ? parseFloat(val) || 0 : val;
            }
            function setVal(wrapper, selector, itemId, value, toFixed = 2) {
                const el = wrapper.querySelector(selector.replace('_#', `_${itemId}`));
                if (el) el.value = typeof value === 'number' ? value.toFixed(toFixed) : value;
            }

            function updateMaterialCalculations_est(itemId) {
                const w = document.getElementById('estimationWrapper');
                const qty = getVal(w, 'input[name="material_qty_#"]', itemId);
                const weight = getVal(w, 'input[name="material_weight_#"]', itemId);
                const price = getVal(w, 'input[name="material_price_#"]', itemId);
                const totalWeight = qty * weight;
                const cost = totalWeight * price;
                setVal(w, 'input[name="material_total_weight_#"]', itemId, totalWeight);
                setVal(w, 'input[name="material_cost_#"]', itemId, cost);
                return cost;
            }
            function updateProgrammingCalculations_est(itemId) {
                const w = document.getElementById('estimationWrapper');
                const time = getVal(w, 'input[name="prog_time_#"]', itemId);
                const rate = getVal(w, 'input[name="prog_rate_#"]', itemId);
                const cost = time * rate;
                setVal(w, 'input[name="prog_cost_#"]', itemId, cost);
                return cost;
            }
            function updateFabricationCalculations_est(itemId) {
                const w = document.getElementById('estimationWrapper');
                const qty = getVal(w, 'input[name="fab_qty_#"]', itemId);
                const timePerPiece = getVal(w, 'input[name="fab_time_per_piece_#"]', itemId);
                const rate = getVal(w, 'input[name="fab_rate_#"]', itemId);
                const totalTime = (qty * timePerPiece) / 60;
                const cost = totalTime * rate;
                setVal(w, 'input[name="fab_total_time_#"]', itemId, totalTime);
                setVal(w, 'input[name="fab_cost_#"]', itemId, cost);
                return cost;
            }
            function updateSubcontractCalculations_est(itemId) {
                const w = document.getElementById('estimationWrapper');
                const qty = getVal(w, 'input[name="subcontract_qty_#"]', itemId);
                const price = getVal(w, 'input[name="subcontract_price_#"]', itemId);
                const cost = qty * price;
                setVal(w, 'input[name="subcontract_cost_#"]', itemId, cost);
                return cost;
            }

            function updateOperationRate_est(itemId) {
                const wrapper = document.getElementById('estimationWrapper');
                const opSelect = wrapper.querySelector(`select[name="fab_operation_${itemId}"]`);
                const rateInput = wrapper.querySelector(`input[name="fab_rate_${itemId}"]`);
                if (opSelect && rateInput) {
                    const op = currentData.operations.find(o => o.code === opSelect.value);
                    rateInput.value = op ? op.rate.toFixed(2) : '95.00';
                    updateAllCalculations_est();
                }
            }

            function updateSubcontractSuppliersList_est(itemId) {
                const wrapper = document.getElementById('estimationWrapper');
                const serviceSelect = wrapper.querySelector(`select[name="subcontract_service_${itemId}"]`);
                const supplierSelect = wrapper.querySelector(`select[name="subcontract_supplier_${itemId}"]`);
                if (serviceSelect && supplierSelect) {
                    const serviceCode = serviceSelect.value;
                    supplierSelect.innerHTML = '<option value="">S√©lectionner fournisseur...</option>';
                    if (serviceCode && currentData.subcontractors[serviceCode]) {
                        currentData.subcontractors[serviceCode]
                            .sort((a,b) => a.name.localeCompare(b.name))
                            .forEach(sub => {
                            const opt = document.createElement('option');
                            opt.value = sub.code; opt.textContent = sub.name;
                            supplierSelect.appendChild(opt);
                        });
                    }
                }
            }
            
            function createRowHTML_est(type, counter) {
                switch(type) {
                    case 'material': return `<td><select name="material_supplier_${counter}" class="supplier-select"><option value="">S√©lect...</option></select></td><td><select name="material_type_${counter}" class="editable"><option value="">S√©lect...</option><option value="acier_structural">Acier Structural</option><option value="acier_crs">Acier CRS</option><option value="acier_hrpo">Acier HRPO</option><option value="acier_galvanise">Acier Galvanis√©</option><option value="acier_satin">Acier Satin</option><option value="acier_inox_304">Inox 304</option><option value="acier_inox_316">Inox 316/316L</option><option value="aluminium_5000">Alu 5000</option><option value="aluminium_6000">Alu 6000</option><option value="tube_dom">Tube DOM</option><option value="plastiques">Plastiques</option><option value="cuivre">Cuivre</option><option value="laiton">Laiton</option><option value="bronze">Bronze</option></select></td><td><input type="text" name="material_desc_${counter}" class="editable" placeholder="Description"></td><td><input type="text" name="material_qty_${counter}" class="editable qty-col" placeholder="1"></td><td><input type="text" name="material_weight_${counter}" class="editable weight-col" placeholder="0.00"></td><td><input type="text" name="material_total_weight_${counter}" class="readonly weight-col" readonly></td><td><input type="text" name="material_price_${counter}" class="editable rate-col" placeholder="0.00"></td><td><input type="text" name="material_cost_${counter}" class="readonly price-col" readonly></td><td><button type="button" class="delete-btn" onclick="deleteMaterialRow(${counter})">‚úï</button></td>`;
                    case 'programming': return `<td><input type="text" name="prog_model_${counter}" class="editable" placeholder="Mod√®le"></td><td><input type="text" name="prog_complexity_${counter}" class="editable" placeholder="Complexit√©"></td><td><input type="text" name="prog_time_${counter}" class="editable time-col" placeholder="0.0"></td><td><input type="text" name="prog_rate_${counter}" class="readonly rate-col" value="95.00" readonly></td><td><input type="text" name="prog_cost_${counter}" class="readonly price-col" readonly></td><td><button type="button" class="delete-btn" onclick="deleteProgrammingRow(${counter})">‚úï</button></td>`;
                    case 'fabrication': return `<td><select name="fab_operation_${counter}" class="operation-select"><option value="">S√©lect...</option></select></td><td><input type="text" name="fab_qty_${counter}" class="editable qty-col" placeholder="1"></td><td><input type="text" name="fab_time_per_piece_${counter}" class="editable time-col" placeholder="0.0"></td><td><input type="text" name="fab_total_time_${counter}" class="readonly time-col" readonly></td><td><input type="text" name="fab_rate_${counter}" class="readonly rate-col" value="95.00" readonly></td><td><input type="text" name="fab_cost_${counter}" class="readonly price-col" readonly></td><td><button type="button" class="delete-btn" onclick="deleteFabricationRow(${counter})">‚úï</button></td>`;
                    case 'subcontract': return `<td><select name="subcontract_service_${counter}" class="service-select"><option value="">S√©lect...</option></select></td><td><select name="subcontract_supplier_${counter}" class="supplier-select"><option value="">S√©lect...</option></select></td><td><input type="text" name="subcontract_desc_${counter}" class="editable" placeholder="Description"></td><td><input type="text" name="subcontract_qty_${counter}" class="editable qty-col" placeholder="1"></td><td><input type="text" name="subcontract_price_${counter}" class="editable rate-col" placeholder="0.00"></td><td><input type="text" name="subcontract_cost_${counter}" class="readonly price-col" readonly></td><td><button type="button" class="delete-btn" onclick="deleteSubcontractRow(${counter})">‚úï</button></td>`;
                }
                return '';
            }
            function addGenericRow_est(type, counterVarName, tbodyId, callback) {
                const wrapper = document.getElementById('estimationWrapper');
                window[counterVarName]++;
                const counterVal = window[counterVarName];
                const tbody = wrapper.querySelector(`#${tbodyId}`);
                const newRow = tbody.insertRow();
                newRow.className = 'item-row'; newRow.dataset.item = counterVal;
                newRow.innerHTML = createRowHTML_est(type, counterVal);
                populateEstimationSelects();
                if (callback) callback(counterVal);
                showGlobalNotification(`‚úÖ Nouvelle ligne ${type} ajout√©e!`);
            }

            window.addMaterialRow = () => addGenericRow_est('material', 'materialCounter', 'materials-tbody');
            window.addProgrammingRow = () => addGenericRow_est('programming', 'programmingCounter', 'programming-tbody');
            window.addFabricationRow = () => addGenericRow_est('fabrication', 'fabricationCounter', 'fabrication-tbody');
            window.addSubcontractRow = () => addGenericRow_est('subcontract', 'subcontractCounter', 'subcontract-tbody', updateSubcontractSuppliersList_est);
            
            function deleteGenericRow_est(itemId, tbodyId, type) {
                const wrapper = document.getElementById('estimationWrapper');
                const row = wrapper.querySelector(`#${tbodyId} tr[data-item="${itemId}"]`);
                if (row && wrapper.querySelectorAll(`#${tbodyId} .item-row`).length > 1) {
                    row.remove(); updateAllCalculations_est(); showGlobalNotification(`‚úÖ Ligne ${type} supprim√©e!`);
                } else { showGlobalNotification('‚ö†Ô∏è Impossible de supprimer la derni√®re ligne!'); }
            }
            window.deleteMaterialRow = (id) => deleteGenericRow_est(id, 'materials-tbody', 'mat√©riau');
            window.deleteProgrammingRow = (id) => deleteGenericRow_est(id, 'programming-tbody', 'programmation');
            window.deleteFabricationRow = (id) => deleteGenericRow_est(id, 'fabrication-tbody', 'fabrication');
            window.deleteSubcontractRow = (id) => deleteGenericRow_est(id, 'subcontract-tbody', 'sous-traitance');

            window.clearForm_est = function() {
                const wrapper = document.getElementById('estimationWrapper');
                if (confirm('Vider le formulaire d\'ESTIMATION?')) {
                    wrapper.querySelector('#estimationForm').reset();
                    ['materials', 'programming', 'fabrication', 'subcontract'].forEach(section => {
                        const tbody = wrapper.querySelector(`#${section}-tbody`);
                        if (tbody) {
                             tbody.querySelectorAll('.item-row:not(:first-child)').forEach(row => row.remove());
                             tbody.querySelector('.item-row')?.querySelectorAll('input.editable, select.editable').forEach(inp => inp.value = '');
                        }
                        const notesContent = wrapper.querySelector(`#${section}-notes-content`);
                        if (notesContent?.classList.contains('expanded')) toggleNotes_est(section);
                        wrapper.querySelector(`#${section}-notes-content textarea`).value = '';
                    });
                    wrapper.querySelector('input[name="waste_factor"]').value = '5';
                    wrapper.querySelector('input[name="overhead_rate"]').value = '15';
                    wrapper.querySelector('input[name="margin_rate"]').value = '20';
                    wrapper.querySelector('input[name="transport_amount"]').value = '0';
                    materialCounter = 1; programmingCounter = 1; fabricationCounter = 1; subcontractCounter = 1;
                    updateAllCalculations_est();
                    showGlobalNotification('üóëÔ∏è Formulaire d\'estimation vid√©!');
                }
            }
            
            window.saveAsHTML_est = function() {
                const wrapper = document.getElementById('estimationWrapper');
                const date = new Date().toLocaleDateString('fr-CA').replace(/\//g, '-');
                const project = wrapper.querySelector('#project-name').value || 'PROJET';
                const version = wrapper.querySelector('#version').value || 'R00';
                
                const filledHTML = getFilledHTML('estimationWrapper');
                const blob = new Blob([filledHTML], { type: 'text/html' });
                const fileName = `Estimation_DG_${project}_${version}_${date}.html`;
                
                const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = fileName;
                document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(a.href);
                showGlobalNotification('üíæ Estimation (HTML) sauvegard√©e!');
            }

            window.sendEstimation = function() {
                const wrapper = document.getElementById('estimationWrapper');
                const project = wrapper.querySelector('#project-name').value || 'PROJET';
                const estimator = wrapper.querySelector('#estimator-name').value || 'Estimateur';
                const total = wrapper.querySelector('input[name="final_total"]').value || '0.00';
                const client = wrapper.querySelector('#client-name').value || 'Client';
                
                saveAsHTML_est();

                const subject = `Estimation - Projet ${project} - Desmarais & Gagn√© inc.`;
                const body = `Bonjour,\n\nEstimation pour projet ${project}.\nClient: ${client}\nPrix total: ${total}$\n\nCordialement,\n${estimator}\nDesmarais & Gagn√© inc.`;
                window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
                showGlobalNotification('üìß Email (Estimation) g√©n√©r√©! V√©rifiez client email.');
            }

            window.updateAllCalculations_est = updateAllCalculations_est;
            window.updateOperationRate_est = updateOperationRate_est;
            window.updateSubcontractSuppliersList_est = updateSubcontractSuppliersList_est;
        })();

        // Initialisation
        document.addEventListener('DOMContentLoaded', function() {
            DGApp.init();
        });
    </script>
</body>
</html>
