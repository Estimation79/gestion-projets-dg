# db_downloader.py - Module de t√©l√©chargement de base de donn√©es pour ERP DG Inc.
"""
Module temporaire pour t√©l√©charger la base de donn√©es SQLite depuis Render
√Ä int√©grer dans app.py ou √† utiliser comme page s√©par√©e
"""

import streamlit as st
import os
from pathlib import Path
import datetime

def create_db_downloader_page():
    """
    Page de t√©l√©chargement de base de donn√©es √† ajouter temporairement √† votre app
    """
    st.markdown("### üíæ T√©l√©chargement Base de Donn√©es")
    st.markdown("---")
    
    # Recherche automatique de la base de donn√©es
    db_paths_to_check = [
        "data/erp_production_dg.db",           # Chemin principal
        "../data/erp_production_dg.db",       # Chemin parent
        "./erp_production_dg.db",             # R√©pertoire courant
        "/opt/render/project/data/erp_production_dg.db",  # Chemin Render
        "erp_production_dg.db"                # Nom direct
    ]
    
    found_db = None
    for db_path in db_paths_to_check:
        if os.path.exists(db_path):
            found_db = db_path
            break
    
    if found_db:
        st.success(f"‚úÖ Base de donn√©es trouv√©e: `{found_db}`")
        
        # Informations sur le fichier
        try:
            file_size = os.path.getsize(found_db)
            file_size_mb = file_size / (1024 * 1024)
            modification_time = datetime.datetime.fromtimestamp(os.path.getmtime(found_db))
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìä Taille", f"{file_size_mb:.2f} MB")
            with col2:
                st.metric("üìÅ Taille", f"{file_size:,} bytes")
            with col3:
                st.metric("üïí Modifi√©", modification_time.strftime("%d/%m/%Y %H:%M"))
                
        except Exception as e:
            st.warning(f"Erreur lecture infos fichier: {e}")
        
        st.markdown("---")
        
        # Bouton de t√©l√©chargement
        try:
            with open(found_db, 'rb') as file:
                file_data = file.read()
                
                # Nom du fichier avec timestamp
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                download_filename = f"erp_production_dg_backup_{timestamp}.db"
                
                st.download_button(
                    label="üì• T√©l√©charger la Base de Donn√©es",
                    data=file_data,
                    file_name=download_filename,
                    mime="application/octet-stream",
                    help="Cliquer pour t√©l√©charger une copie de la base de donn√©es",
                    use_container_width=True,
                    type="primary"
                )
                
                st.info(f"üí° Le fichier sera t√©l√©charg√© sous le nom: `{download_filename}`")
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la lecture du fichier: {e}")
    
    else:
        st.error("‚ùå Base de donn√©es non trouv√©e")
        st.markdown("**Chemins v√©rifi√©s:**")
        for path in db_paths_to_check:
            exists = "‚úÖ" if os.path.exists(path) else "‚ùå"
            st.markdown(f"- {exists} `{path}`")
            
        # Debug: lister les fichiers du r√©pertoire courant
        st.markdown("---")
        st.markdown("**üìÅ Contenu du r√©pertoire courant:**")
        try:
            current_files = os.listdir(".")
            for file in sorted(current_files):
                if os.path.isfile(file):
                    size = os.path.getsize(file)
                    st.markdown(f"- üìÑ `{file}` ({size:,} bytes)")
                else:
                    st.markdown(f"- üìÅ `{file}/`")
        except Exception as e:
            st.error(f"Erreur listage fichiers: {e}")
    
    st.markdown("---")
    
    # Instructions d'utilisation
    with st.expander("üìã Instructions d'utilisation", expanded=False):
        st.markdown("""
        **Pour utiliser ce t√©l√©chargeur:**
        
        1. **Int√©gration temporaire** - Ajoutez ce code √† votre `app.py`:
        ```python
        # Dans votre fonction show_erp_main(), ajoutez cette condition:
        if page_to_show_val == "database_download":
            create_db_downloader_page()
            
        # Et ajoutez cette option dans available_pages:
        available_pages["üíæ T√©l√©charger DB"] = "database_download"
        ```
        
        2. **Page s√©par√©e** - Ou cr√©ez un fichier `db_download.py` s√©par√©
        
        3. **Suppression** - Supprimez ce code apr√®s le t√©l√©chargement pour la s√©curit√©
        
        **‚ö†Ô∏è S√©curit√©:** Ne laissez pas ce t√©l√©chargeur actif en production !
        """)
    
    # Informations sur l'environnement
    with st.expander("üîß Informations Syst√®me", expanded=False):
        st.markdown("**Environnement d√©tect√©:**")
        
        # Variables d'environnement Render
        render_vars = {
            "RENDER": os.getenv("RENDER"),
            "RENDER_SERVICE_ID": os.getenv("RENDER_SERVICE_ID"),
            "RENDER_SERVICE_NAME": os.getenv("RENDER_SERVICE_NAME"),
        }
        
        for var, value in render_vars.items():
            if value:
                st.markdown(f"- `{var}`: {value}")
        
        # R√©pertoire de travail
        st.markdown(f"- **R√©pertoire courant**: `{os.getcwd()}`")
        
        # Utilisateur
        st.markdown(f"- **Utilisateur**: `{os.getenv('USER', 'inconnu')}`")

def add_db_downloader_to_sidebar():
    """
    Version sidebar compacte - √Ä ajouter dans la sidebar de votre app
    """
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üíæ Base de Donn√©es")
    
    # Recherche rapide
    db_exists = any(os.path.exists(path) for path in [
        "data/erp_production_dg.db",
        "../data/erp_production_dg.db", 
        "./erp_production_dg.db"
    ])
    
    if db_exists:
        st.sidebar.success("DB trouv√©e ‚úÖ")
        
        # Trouver le bon chemin
        for path in ["data/erp_production_dg.db", "../data/erp_production_dg.db", "./erp_production_dg.db"]:
            if os.path.exists(path):
                found_path = path
                break
        
        try:
            with open(found_path, 'rb') as f:
                db_data = f.read()
            
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M")
            
            st.sidebar.download_button(
                "üíæ T√©l√©charger DB",
                data=db_data,
                file_name=f"erp_dg_backup_{timestamp}.db",
                mime="application/octet-stream",
                use_container_width=True
            )
            
            # Taille du fichier
            size_mb = len(db_data) / (1024 * 1024)
            st.sidebar.caption(f"Taille: {size_mb:.1f} MB")
            
        except Exception as e:
            st.sidebar.error(f"Erreur: {str(e)[:30]}...")
    else:
        st.sidebar.warning("DB non trouv√©e ‚ùå")

# ====================
# INT√âGRATION RAPIDE DANS APP.PY
# ====================

def integrate_downloader_in_main_app():
    """
    Code √† ajouter directement dans votre fonction show_erp_main()
    """
    code_to_add = '''
    # √Ä ajouter dans available_pages de show_erp_main():
    if has_all_permissions:  # Seulement pour les admins complets
        available_pages["üíæ T√©l√©charger DB"] = "database_download"
    
    # √Ä ajouter dans la section de routage des pages:
    elif page_to_show_val == "database_download":
        create_db_downloader_page()
    '''
    
    return code_to_add

# ====================
# UTILISATION STANDALONE
# ====================

if __name__ == "__main__":
    # Version standalone pour test
    st.set_page_config(
        page_title="üíæ DB Downloader - ERP DG Inc.",
        page_icon="üíæ",
        layout="wide"
    )
    
    st.title("üíæ T√©l√©chargeur Base de Donn√©es ERP DG Inc.")
    create_db_downloader_page()
