# formulaires.py - Module Formulaires ERP Production DG Inc.
# Gestion compl√®te des documents m√©tier : Bons de Travail, Achats, Commandes, Devis, Estimations

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional, Any
import json

class GestionnaireFormulaires:
    """
    Gestionnaire unifi√© pour tous les formulaires m√©tier DG Inc.
    - Bons de Travail (BT)
    - Bons d'Achats (BA) 
    - Bons de Commande (BC)
    - Demandes de Prix (DP)
    - Estimations (EST)
    """
    
    def __init__(self, db):
        self.db = db
        self.types_formulaires = {
            'BON_TRAVAIL': {'prefix': 'BT', 'nom': 'Bon de Travail', 'icon': 'üîß'},
            'BON_ACHAT': {'prefix': 'BA', 'nom': "Bon d'Achats", 'icon': 'üõí'},
            'BON_COMMANDE': {'prefix': 'BC', 'nom': 'Bon de Commande', 'icon': 'üì¶'},
            'DEMANDE_PRIX': {'prefix': 'DP', 'nom': 'Demande de Prix', 'icon': 'üí∞'},
            'ESTIMATION': {'prefix': 'EST', 'nom': 'Estimation', 'icon': 'üìä'}
        }
        self.statuts = ['BROUILLON', 'VALID√â', 'ENVOY√â', 'APPROUV√â', 'TERMIN√â', 'ANNUL√â']
        self.priorites = ['NORMAL', 'URGENT', 'CRITIQUE']
    
    def generer_numero_document(self, type_formulaire: str) -> str:
        """G√©n√®re un num√©ro unique pour le document"""
        try:
            config = self.types_formulaires.get(type_formulaire)
            if not config:
                return "ERREUR-001"
            
            prefix = config['prefix']
            annee = datetime.now().year
            
            # R√©cup√©rer le dernier num√©ro pour ce type et cette ann√©e
            query = '''
                SELECT numero_document FROM formulaires 
                WHERE type_formulaire = ? AND numero_document LIKE ?
                ORDER BY id DESC LIMIT 1
            '''
            pattern = f"{prefix}-{annee}-%"
            result = self.db.execute_query(query, (type_formulaire, pattern))
            
            if result:
                last_num = result[0]['numero_document']
                sequence = int(last_num.split('-')[-1]) + 1
            else:
                sequence = 1
            
            return f"{prefix}-{annee}-{sequence:03d}"
            
        except Exception as e:
            st.error(f"Erreur g√©n√©ration num√©ro: {e}")
            return f"ERR-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    def creer_formulaire(self, data: Dict) -> int:
        """Cr√©e un nouveau formulaire dans la base"""
        try:
            # G√©n√©rer num√©ro si pas fourni
            if not data.get('numero_document'):
                data['numero_document'] = self.generer_numero_document(data['type_formulaire'])
            
            query = '''
                INSERT INTO formulaires 
                (type_formulaire, numero_document, project_id, company_id, employee_id,
                 statut, date_creation, montant_total, notes, priorite, date_echeance)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            '''
            
            formulaire_id = self.db.execute_insert(query, (
                data['type_formulaire'],
                data['numero_document'],
                data.get('project_id'),
                data.get('company_id'),
                data.get('employee_id'),
                data.get('statut', 'BROUILLON'),
                data.get('date_creation', datetime.now()),
                data.get('montant_total', 0.0),
                data.get('notes', ''),
                data.get('priorite', 'NORMAL'),
                data.get('date_echeance')
            ))
            
            # Ajouter les lignes de d√©tail si fournies
            if data.get('lignes') and formulaire_id:
                self.ajouter_lignes_formulaire(formulaire_id, data['lignes'])
            
            # Enregistrer la cr√©ation
            self.enregistrer_validation(formulaire_id, data.get('employee_id'), 'CREATION', 'Document cr√©√©')
            
            return formulaire_id
            
        except Exception as e:
            st.error(f"Erreur cr√©ation formulaire: {e}")
            return None
    
    def ajouter_lignes_formulaire(self, formulaire_id: int, lignes: List[Dict]):
        """Ajoute les lignes de d√©tail √† un formulaire"""
        try:
            for i, ligne in enumerate(lignes, 1):
                query = '''
                    INSERT INTO formulaire_lignes
                    (formulaire_id, sequence_ligne, description, quantite, unite,
                     prix_unitaire, montant_ligne, reference_materiau, code_article)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                '''
                
                montant_ligne = float(ligne.get('quantite', 0)) * float(ligne.get('prix_unitaire', 0))
                
                self.db.execute_insert(query, (
                    formulaire_id,
                    i,
                    ligne.get('description', ''),
                    ligne.get('quantite', 0),
                    ligne.get('unite', 'UN'),
                    ligne.get('prix_unitaire', 0),
                    montant_ligne,
                    ligne.get('reference_materiau'),
                    ligne.get('code_article', '')
                ))
                
        except Exception as e:
            st.error(f"Erreur ajout lignes: {e}")
    
    def get_formulaires(self, type_formulaire: str = None, statut: str = None) -> List[Dict]:
        """R√©cup√®re les formulaires avec filtres optionnels"""
        try:
            query = '''
                SELECT f.*, c.nom as company_nom, e.prenom || ' ' || e.nom as employee_nom,
                       p.nom_projet as project_nom
                FROM formulaires f
                LEFT JOIN companies c ON f.company_id = c.id
                LEFT JOIN employees e ON f.employee_id = e.id  
                LEFT JOIN projects p ON f.project_id = p.id
                WHERE 1=1
            '''
            params = []
            
            if type_formulaire:
                query += " AND f.type_formulaire = ?"
                params.append(type_formulaire)
            
            if statut:
                query += " AND f.statut = ?"
                params.append(statut)
            
            query += " ORDER BY f.id DESC"
            
            rows = self.db.execute_query(query, tuple(params))
            return [dict(row) for row in rows]
            
        except Exception as e:
            st.error(f"Erreur r√©cup√©ration formulaires: {e}")
            return []
    
    def get_formulaire_details(self, formulaire_id: int) -> Dict:
        """R√©cup√®re les d√©tails complets d'un formulaire"""
        try:
            # Formulaire principal
            query = '''
                SELECT f.*, c.nom as company_nom, e.prenom || ' ' || e.nom as employee_nom,
                       p.nom_projet as project_nom
                FROM formulaires f
                LEFT JOIN companies c ON f.company_id = c.id
                LEFT JOIN employees e ON f.employee_id = e.id
                LEFT JOIN projects p ON f.project_id = p.id
                WHERE f.id = ?
            '''
            result = self.db.execute_query(query, (formulaire_id,))
            if not result:
                return {}
            
            formulaire = dict(result[0])
            
            # Lignes de d√©tail
            query_lignes = '''
                SELECT * FROM formulaire_lignes 
                WHERE formulaire_id = ? 
                ORDER BY sequence_ligne
            '''
            lignes = self.db.execute_query(query_lignes, (formulaire_id,))
            formulaire['lignes'] = [dict(ligne) for ligne in lignes]
            
            # Historique validations
            query_validations = '''
                SELECT fv.*, e.prenom || ' ' || e.nom as validator_nom
                FROM formulaire_validations fv
                LEFT JOIN employees e ON fv.employee_id = e.id
                WHERE fv.formulaire_id = ?
                ORDER BY fv.date_validation DESC
            '''
            validations = self.db.execute_query(query_validations, (formulaire_id,))
            formulaire['validations'] = [dict(val) for val in validations]
            
            return formulaire
            
        except Exception as e:
            st.error(f"Erreur r√©cup√©ration d√©tails: {e}")
            return {}
    
    def modifier_statut_formulaire(self, formulaire_id: int, nouveau_statut: str, employee_id: int, commentaires: str = ""):
        """Modifie le statut d'un formulaire avec tra√ßabilit√©"""
        try:
            # Mettre √† jour le statut
            query = "UPDATE formulaires SET statut = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?"
            self.db.execute_update(query, (nouveau_statut, formulaire_id))
            
            # Enregistrer la validation
            self.enregistrer_validation(formulaire_id, employee_id, 'CHANGEMENT_STATUT', 
                                      f"Statut modifi√© vers {nouveau_statut}. {commentaires}")
            
            return True
            
        except Exception as e:
            st.error(f"Erreur modification statut: {e}")
            return False
    
    def enregistrer_validation(self, formulaire_id: int, employee_id: int, type_validation: str, commentaires: str):
        """Enregistre une validation/action sur un formulaire"""
        try:
            query = '''
                INSERT INTO formulaire_validations
                (formulaire_id, employee_id, type_validation, commentaires, date_validation)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
            '''
            self.db.execute_insert(query, (formulaire_id, employee_id, type_validation, commentaires))
            
        except Exception as e:
            st.error(f"Erreur enregistrement validation: {e}")
    
    def get_statistiques_formulaires(self) -> Dict:
        """Calcule les statistiques des formulaires"""
        try:
            stats = {}
            
            for type_form, config in self.types_formulaires.items():
                query = '''
                    SELECT statut, COUNT(*) as count, SUM(montant_total) as total_montant
                    FROM formulaires 
                    WHERE type_formulaire = ?
                    GROUP BY statut
                '''
                result = self.db.execute_query(query, (type_form,))
                
                stats[type_form] = {
                    'total': 0,
                    'par_statut': {},
                    'montant_total': 0.0
                }
                
                for row in result:
                    stats[type_form]['total'] += row['count']
                    stats[type_form]['par_statut'][row['statut']] = row['count']
                    stats[type_form]['montant_total'] += row['total_montant'] or 0
            
            return stats
            
        except Exception as e:
            st.error(f"Erreur calcul statistiques: {e}")
            return {}

# =============================================================================
# INTERFACES UTILISATEUR PAR TYPE DE FORMULAIRE
# =============================================================================

def show_formulaires_page():
    """Page principale du module Formulaires"""
    st.markdown("## üìë Gestion des Formulaires - DG Inc.")
    
    # Initialisation du gestionnaire
    if 'gestionnaire_formulaires' not in st.session_state:
        st.session_state.gestionnaire_formulaires = GestionnaireFormulaires(st.session_state.erp_db)
    
    gestionnaire = st.session_state.gestionnaire_formulaires
    
    # Statistiques globales
    show_formulaires_dashboard(gestionnaire)
    
    # Tabs pour chaque type de formulaire
    tab_bt, tab_ba, tab_bc, tab_dp, tab_est = st.tabs([
        "üîß Bons de Travail",
        "üõí Bons d'Achats", 
        "üì¶ Bons de Commande",
        "üí∞ Demandes de Prix",
        "üìä Estimations"
    ])
    
    with tab_bt:
        render_bons_travail_tab(gestionnaire)
    
    with tab_ba:
        render_bons_achats_tab(gestionnaire)
    
    with tab_bc:
        render_bons_commande_tab(gestionnaire)
    
    with tab_dp:
        render_demandes_prix_tab(gestionnaire)
    
    with tab_est:
        render_estimations_tab(gestionnaire)

def show_formulaires_dashboard(gestionnaire):
    """Dashboard des formulaires avec m√©triques"""
    st.markdown("### üìä Dashboard Formulaires")
    
    stats = gestionnaire.get_statistiques_formulaires()
    
    if not any(stats.values()):
        st.info("Aucun formulaire cr√©√©. Commencez par cr√©er votre premier document.")
        return
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    for i, (type_form, config) in enumerate(gestionnaire.types_formulaires.items()):
        with [col1, col2, col3, col4, col5][i]:
            type_stats = stats.get(type_form, {})
            st.metric(
                f"{config['icon']} {config['nom']}",
                type_stats.get('total', 0),
                delta=f"{type_stats.get('montant_total', 0):,.0f}$ CAD"
            )
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # R√©partition par type
        types_data = []
        for type_form, config in gestionnaire.types_formulaires.items():
            total = stats.get(type_form, {}).get('total', 0)
            if total > 0:
                types_data.append({'Type': config['nom'], 'Nombre': total})
        
        if types_data:
            df_types = pd.DataFrame(types_data)
            fig = px.pie(df_types, values='Nombre', names='Type', 
                        title="üìä R√©partition par Type de Formulaire")
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # √âvolution par statut
        statuts_data = []
        for type_form, type_stats in stats.items():
            for statut, count in type_stats.get('par_statut', {}).items():
                statuts_data.append({
                    'Statut': statut,
                    'Nombre': count,
                    'Type': gestionnaire.types_formulaires[type_form]['nom']
                })
        
        if statuts_data:
            df_statuts = pd.DataFrame(statuts_data)
            fig = px.bar(df_statuts, x='Statut', y='Nombre', color='Type',
                        title="üìà Documents par Statut")
            st.plotly_chart(fig, use_container_width=True)

def render_bons_travail_tab(gestionnaire):
    """Interface pour les Bons de Travail"""
    st.markdown("### üîß Bons de Travail")
    
    # Actions rapides
    col_action1, col_action2, col_action3 = st.columns(3)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Travail", use_container_width=True):
            st.session_state.form_action = "create_bon_travail"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True):
            st.session_state.form_action = "list_bon_travail"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True):
            st.session_state.form_action = "stats_bon_travail"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_travail')
    
    if action == "create_bon_travail":
        render_bon_travail_form(gestionnaire)
    elif action == "list_bon_travail":
        render_bon_travail_list(gestionnaire)
    elif action == "stats_bon_travail":
        render_bon_travail_stats(gestionnaire)

def render_bon_travail_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Travail"""
    st.markdown("#### ‚ûï Nouveau Bon de Travail")
    
    with st.form("bon_travail_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bt = gestionnaire.generer_numero_document('BON_TRAVAIL')
            st.text_input("N¬∞ Bon de Travail", value=numero_bt, disabled=True)
            
            # S√©lection projet
            projets = get_projets_actifs()
            projet_options = [("", "S√©lectionner un projet")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet *",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un employ√©")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date d'√âch√©ance", datetime.now().date() + timedelta(days=7))
        
        # Description du travail
        description = st.text_area("Description du Travail *", height=100)
        
        # Op√©rations √† r√©aliser
        st.markdown("##### üîß Op√©rations √† R√©aliser")
        if projet_id:
            operations_projet = get_operations_projet(projet_id)
            operations_selectionnees = st.multiselect(
                "Op√©rations",
                options=[op['id'] for op in operations_projet],
                format_func=lambda x: next((f"{op['sequence']} - {op['description']}" for op in operations_projet if op['id'] == x), "")
            )
        else:
            st.info("S√©lectionnez un projet pour voir les op√©rations disponibles")
            operations_selectionnees = []
        
        # Employ√©s assign√©s
        st.markdown("##### üë• √âquipe Assign√©e")
        employes_assignes = st.multiselect(
            "Employ√©s Assign√©s",
            options=[e['id'] for e in employes],
            format_func=lambda x: next((f"{e['prenom']} {e['nom']} - {e['poste']}" for e in employes if e['id'] == x), "")
        )
        
        # Mat√©riaux n√©cessaires
        st.markdown("##### üì¶ Mat√©riaux Requis")
        col_mat1, col_mat2, col_mat3, col_mat4 = st.columns(4)
        
        # Interface dynamique pour mat√©riaux (simplifi√© pour l'exemple)
        materiaux_lines = []
        for i in range(3):  # 3 lignes par d√©faut
            with col_mat1:
                if i == 0:
                    st.text("Description")
                desc = st.text_input("", key=f"mat_desc_{i}", placeholder="Description mat√©riau")
            with col_mat2:
                if i == 0:
                    st.text("Quantit√©")
                qty = st.number_input("", min_value=0.0, key=f"mat_qty_{i}", format="%.2f")
            with col_mat3:
                if i == 0:
                    st.text("Unit√©")
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L"], key=f"mat_unit_{i}")
            with col_mat4:
                if i == 0:
                    st.text("Co√ªt Unit.")
                cout = st.number_input("", min_value=0.0, key=f"mat_cost_{i}", format="%.2f")
            
            if desc and qty > 0:
                materiaux_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': cout
                })
        
        # Notes sp√©ciales
        notes = st.text_area("Notes Sp√©ciales", height=80)
        
        # Boutons de soumission
        col_submit1, col_submit2 = st.columns(2)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True)
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True)
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide:
            if not projet_id or not employe_id or not description:
                st.error("Veuillez remplir tous les champs obligatoires (*)")
            else:
                # Calcul montant total estim√©
                montant_total = sum(mat['quantite'] * mat['prix_unitaire'] for mat in materiaux_lines)
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_TRAVAIL',
                    'numero_document': numero_bt,
                    'project_id': projet_id,
                    'employee_id': employe_id,
                    'statut': 'VALID√â' if submit_valide else 'BROUILLON',
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total,
                    'notes': f"Description: {description}\n\nOp√©rations: {', '.join(map(str, operations_selectionnees))}\n\nEmploy√©s: {', '.join(map(str, employes_assignes))}\n\nNotes: {notes}",
                    'lignes': materiaux_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    st.success(f"‚úÖ Bon de Travail {numero_bt} cr√©√© avec succ√®s!")
                    st.session_state.form_action = "list_bon_travail"
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Travail")

def render_bon_travail_list(gestionnaire):
    """Liste des Bons de Travail"""
    st.markdown("#### üìã Liste des Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucun Bon de Travail cr√©√©.")
        return
    
    # Filtres
    col_f1, col_f2, col_f3 = st.columns(3)
    with col_f1:
        filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
    with col_f2:
        filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
    with col_f3:
        recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, projet...")
    
    # Application des filtres
    bons_filtres = []
    for bt in bons_travail:
        if bt['statut'] in filtre_statut and bt['priorite'] in filtre_priorite:
            if not recherche or recherche.lower() in str(bt.get('numero_document', '')).lower() or recherche.lower() in str(bt.get('project_nom', '')).lower():
                bons_filtres.append(bt)
    
    # Affichage tableau
    if bons_filtres:
        df_data = []
        for bt in bons_filtres:
            df_data.append({
                'N¬∞ Document': bt['numero_document'],
                'Projet': bt.get('project_nom', 'N/A'),
                'Responsable': bt.get('employee_nom', 'N/A'),
                'Statut': bt['statut'],
                'Priorit√©': bt['priorite'],
                'Date Cr√©ation': bt['date_creation'][:10] if bt['date_creation'] else 'N/A',
                'Montant': f"{bt.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True)
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True)
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True)
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True)
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # R√©partition par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # R√©partition par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True)
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True)
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# INTERFACES POUR LES AUTRES TYPES DE FORMULAIRES (STRUCTURE SIMILAIRE)
# =============================================================================

# AJOUTS √Ä formulaires.py - Interface Compl√®te Bons de Commande
# Remplacer la fonction render_bons_commande_tab() existante et ajouter les nouvelles fonctions

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"add_art_bc_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4, col_action5 = st.columns(5)
        
        with col_action1:
            bc_selectionne = st.selectbox("S√©lectionner un BC", 
                                        options=[bc['id'] for bc in bons_filtres],
                                        format_func=lambda x: next((bc['numero_document'] for bc in bons_filtres if bc['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="bc_voir_details"):
                if bc_selectionne:
                    st.session_state.selected_formulaire_id = bc_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="bc_modifier"):
                if bc_selectionne:
                    st.session_state.form_action = "edit_bon_commande"
                    st.session_state.edit_formulaire_id = bc_selectionne
        
        with col_action4:
            if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_action"):
                if bc_selectionne:
                    st.session_state.selected_bc_livraison = bc_selectionne
                    st.session_state.form_action = "track_deliveries"
                    st.rerun()
        
        with col_action5:
            if st.button("üì• Marquer Re√ßu", use_container_width=True, key="bc_marquer_recu"):
                if bc_selectionne:
                    if marquer_bc_recu(gestionnaire, bc_selectionne):
                        st.success("‚úÖ BC marqu√© comme re√ßu!")
                        st.rerun()
    else:
        st.info("Aucun Bon de Commande ne correspond aux crit√®res de recherche.")

def render_delivery_tracking(gestionnaire):
    """Interface de suivi des livraisons"""
    st.markdown("#### üöö Suivi des Livraisons")
    
    # R√©cup√©ration des approvisionnements li√©s aux BCs
    try:
        query = """
            SELECT a.*, f.numero_document, c.nom as fournisseur_nom,
                   e.prenom || ' ' || e.nom as responsable_nom
            FROM approvisionnements a
            JOIN formulaires f ON a.formulaire_id = f.id
            JOIN companies c ON f.company_id = c.id
            LEFT JOIN employees e ON f.employee_id = e.id
            WHERE f.type_formulaire = 'BON_COMMANDE'
            ORDER BY a.date_livraison_prevue ASC
        """
        
        approvisionnements = gestionnaire.db.execute_query(query)
        appros = [dict(row) for row in approvisionnements]
        
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration approvisionnements: {e}")
        appros = []
    
    if not appros:
        st.info("Aucun approvisionnement en cours de suivi.")
        return
    
    # M√©triques de livraison
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    
    with col_m1:
        st.metric("üì¶ Total Livraisons", len(appros))
    with col_m2:
        en_attente = len([a for a in appros if a['statut_livraison'] in ['EN_ATTENTE', 'CONFIRM√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        en_transit = len([a for a in appros if a['statut_livraison'] == 'EXP√âDI√â'])
        st.metric("üöõ En Transit", en_transit)
    with col_m4:
        livrees = len([a for a in appros if a['statut_livraison'] == 'LIVR√â'])
        st.metric("‚úÖ Livr√©es", livrees)
    
    # Alertes de retard
    today = datetime.now().date()
    retards = []
    for appro in appros:
        try:
            date_prevue = datetime.strptime(appro['date_livraison_prevue'], '%Y-%m-%d').date()
            if date_prevue < today and appro['statut_livraison'] not in ['LIVR√â', 'ANNUL√â']:
                retards.append(appro)
        except:
            continue
    
    if retards:
        st.error(f"üö® {len(retards)} livraison(s) en retard d√©tect√©e(s)!")
        
        # Affichage des retards
        with st.expander("üìã D√©tails des Retards", expanded=True):
            for retard in retards:
                try:
                    date_prevue = datetime.strptime(retard['date_livraison_prevue'], '%Y-%m-%d').date()
                    jours_retard = (today - date_prevue).days
                    
                    st.error(f"""
                    **BC {retard['numero_document']}** - {retard['fournisseur_nom']}
                    - Livraison pr√©vue : {date_prevue.strftime('%d/%m/%Y')}
                    - Retard : {jours_retard} jour(s)
                    - Statut : {retard['statut_livraison']}
                    """)
                except:
                    continue
    
    # Interface de suivi principal
    st.markdown("##### üìã Tableau de Suivi")
    
    # Filtres
    col_f1, col_f2 = st.columns(2)
    with col_f1:
        filtre_statut_livraison = st.multiselect("Statut Livraison", 
            ['EN_ATTENTE', 'CONFIRM√â', 'EN_PRODUCTION', 'EXP√âDI√â', 'LIVR√â', 'ANNUL√â'],
            default=['EN_ATTENTE', 'CONFIRM√â', 'EN_PRODUCTION', 'EXP√âDI√â'])
    with col_f2:
        filtre_fournisseur_suivi = st.selectbox("Fournisseur", 
            ['Tous'] + list(set([a['fournisseur_nom'] for a in appros])))
    
    # Application des filtres
    appros_filtres = []
    for appro in appros:
        if appro['statut_livraison'] in filtre_statut_livraison:
            if filtre_fournisseur_suivi == 'Tous' or appro['fournisseur_nom'] == filtre_fournisseur_suivi:
                appros_filtres.append(appro)
    
    # Tableau de suivi
    if appros_filtres:
        for appro in appros_filtres:
            with st.container():
                col_info, col_statut, col_actions = st.columns([3, 1, 1])
                
                with col_info:
                    try:
                        date_prevue = datetime.strptime(appro['date_livraison_prevue'], '%Y-%m-%d').date()
                        jours_restants = (date_prevue - today).days
                        
                        if jours_restants < 0:
                            date_info = f"üî¥ En retard de {abs(jours_restants)} jour(s)"
                        elif jours_restants <= 2:
                            date_info = f"üü° Imminent ({jours_restants} jour(s))"
                        else:
                            date_info = f"üü¢ Dans {jours_restants} jour(s)"
                    except:
                        date_info = "‚ùì Date invalide"
                    
                    st.markdown(f"""
                    **BC {appro['numero_document']}** - {appro['fournisseur_nom']}
                    - Responsable : {appro['responsable_nom']}
                    - Livraison pr√©vue : {appro['date_livraison_prevue']} - {date_info}
                    - Quantit√© : {appro.get('quantite_commandee', 'N/A')}
                    """)
                
                with col_statut:
                    # S√©lecteur de statut
                    nouveaux_statuts = ['EN_ATTENTE', 'CONFIRM√â', 'EN_PRODUCTION', 'EXP√âDI√â', 'LIVR√â', 'ANNUL√â']
                    statut_actuel = appro['statut_livraison']
                    
                    nouveau_statut = st.selectbox(
                        f"Statut", 
                        nouveaux_statuts,
                        index=nouveaux_statuts.index(statut_actuel) if statut_actuel in nouveaux_statuts else 0,
                        key=f"statut_{appro['id']}"
                    )
                
                with col_actions:
                    # Bouton de mise √† jour
                    if st.button("üíæ Mettre √† jour", key=f"update_{appro['id']}", use_container_width=True):
                        if mettre_a_jour_statut_livraison(gestionnaire, appro['id'], nouveau_statut):
                            st.success(f"‚úÖ Statut mis √† jour: {nouveau_statut}")
                            st.rerun()
                    
                    # Bouton de d√©tails
                    if st.button("üëÅÔ∏è D√©tails", key=f"details_{appro['id']}", use_container_width=True):
                        st.session_state.selected_appro_details = appro['id']
                
                # Notes de livraison
                if appro.get('notes_livraison'):
                    st.text(f"üìù Notes: {appro['notes_livraison']}")
                
                st.markdown("---")
    
    # Section de mise √† jour rapide
    st.markdown("##### ‚ö° Mise √† Jour Rapide")
    
    col_rapid1, col_rapid2, col_rapid3 = st.columns(3)
    
    with col_rapid1:
        if st.button("üì¶ Marquer Plusieurs comme Exp√©di√©s", use_container_width=True, key="bc_marquer_expedies"):
            count = 0
            for appro in appros_filtres:
                if appro['statut_livraison'] == 'CONFIRM√â':
                    if mettre_a_jour_statut_livraison(gestionnaire, appro['id'], 'EXP√âDI√â'):
                        count += 1
            if count > 0:
                st.success(f"‚úÖ {count} livraison(s) marqu√©e(s) comme exp√©di√©es")
                st.rerun()
    
    with col_rapid2:
        if st.button("‚úÖ Marquer Arriv√©es Aujourd'hui", use_container_width=True, key="bc_marquer_arrives"):
            count = 0
            for appro in appros_filtres:
                try:
                    date_prevue = datetime.strptime(appro['date_livraison_prevue'], '%Y-%m-%d').date()
                    if date_prevue <= today and appro['statut_livraison'] == 'EXP√âDI√â':
                        if mettre_a_jour_statut_livraison(gestionnaire, appro['id'], 'LIVR√â'):
                            count += 1
                except:
                    continue
            if count > 0:
                st.success(f"‚úÖ {count} livraison(s) marqu√©e(s) comme livr√©es")
                st.rerun()
    
    with col_rapid3:
        if st.button("üìß Relancer Fournisseurs en Retard", use_container_width=True, key="bc_relancer_retards"):
            if retards:
                st.info(f"üìß Notifications envoy√©es pour {len(retards)} commande(s) en retard")
                # Ici on pourrait impl√©menter l'envoi d'emails automatiques

def render_reception_marchandises(gestionnaire):
    """Interface de r√©ception des marchandises avec mise √† jour inventaire"""
    st.markdown("#### üì• R√©ception des Marchandises")
    
    # R√©cup√©ration des BCs exp√©di√©s ou livr√©s
    try:
        query = """
            SELECT f.*, c.nom as fournisseur_nom, a.id as appro_id, a.statut_livraison,
                   a.date_livraison_prevue, a.quantite_commandee, a.quantite_livree
            FROM formulaires f
            JOIN companies c ON f.company_id = c.id
            LEFT JOIN approvisionnements a ON f.id = a.formulaire_id
            WHERE f.type_formulaire = 'BON_COMMANDE' 
            AND f.statut IN ('ENVOY√â', 'APPROUV√â')
            AND (a.statut_livraison IN ('EXP√âDI√â', 'LIVR√â') OR a.statut_livraison IS NULL)
            ORDER BY f.date_echeance ASC
        """
        
        livraisons_attendues = gestionnaire.db.execute_query(query)
        livraisons = [dict(row) for row in livraisons_attendues]
        
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration livraisons: {e}")
        livraisons = []
    
    if not livraisons:
        st.info("Aucune livraison en attente de r√©ception.")
        return
    
    # S√©lection de la livraison √† traiter
    st.markdown("##### üì¶ S√©lection de la Livraison")
    
    livraison_options = [
        (liv['id'], f"{liv['numero_document']} - {liv['fournisseur_nom']} - {liv.get('date_echeance', 'N/A')}")
        for liv in livraisons
    ]
    
    livraison_id = st.selectbox(
        "Livraison √† R√©ceptionner",
        options=[l[0] for l in livraison_options],
        format_func=lambda x: next((l[1] for l in livraison_options if l[0] == x), "")
    )
    
    if livraison_id:
        livraison_selectionnee = next((l for l in livraisons if l['id'] == livraison_id), None)
        
        if livraison_selectionnee:
            # Affichage des d√©tails de la livraison
            st.markdown("##### üìã D√©tails de la Livraison")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BC :** {livraison_selectionnee['numero_document']}
                **Fournisseur :** {livraison_selectionnee['fournisseur_nom']}
                **Date Pr√©vue :** {livraison_selectionnee.get('date_echeance', 'N/A')}
                **Montant :** {livraison_selectionnee.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut BC :** {livraison_selectionnee['statut']}
                **Statut Livraison :** {livraison_selectionnee.get('statut_livraison', 'N/A')}
                **Qt√© Command√©e :** {livraison_selectionnee.get('quantite_commandee', 'N/A')}
                **Qt√© D√©j√† Re√ßue :** {livraison_selectionnee.get('quantite_livree', 0)}
                """)
            
            # R√©cup√©ration des lignes du BC
            bc_details = gestionnaire.get_formulaire_details(livraison_id)
            lignes_bc = bc_details.get('lignes', [])
            
            if lignes_bc:
                st.markdown("##### üìù Articles √† R√©ceptionner")
                
                with st.form(f"reception_form_{livraison_id}"):
                    # En-t√™te du formulaire de r√©ception
                    col_form1, col_form2 = st.columns(2)
                    
                    with col_form1:
                        date_reception = st.date_input("Date de R√©ception", datetime.now().date())
                        numero_bon_livraison = st.text_input("N¬∞ Bon de Livraison",
                                                           placeholder="Num√©ro du transporteur")
                    
                    with col_form2:
                        responsable_reception = st.selectbox("Responsable R√©ception",
                            [e['id'] for e in get_employes_actifs()],
                            format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in get_employes_actifs() if e['id'] == x), ""))
                        
                        etat_emballage = st.selectbox("√âtat Emballage", 
                            ["Parfait", "L√©gers dommages", "Dommages importants", "Emballage d√©truit"])
                    
                    # Tableau de r√©ception des articles
                    st.markdown("**Articles Re√ßus :**")
                    
                    col_head1, col_head2, col_head3, col_head4, col_head5, col_head6 = st.columns([3, 1, 1, 1, 1, 2])
                    with col_head1:
                        st.markdown("**Article**")
                    with col_head2:
                        st.markdown("**Command√©**")
                    with col_head3:
                        st.markdown("**Re√ßu**")
                    with col_head4:
                        st.markdown("**√âtat**")
                    with col_head5:
                        st.markdown("**Conforme**")
                    with col_head6:
                        st.markdown("**Remarques**")
                    
                    articles_reception = []
                    
                    for i, ligne in enumerate(lignes_bc):
                        col1, col2, col3, col4, col5, col6 = st.columns([3, 1, 1, 1, 1, 2])
                        
                        with col1:
                            st.text(ligne['description'][:40] + "..." if len(ligne['description']) > 40 else ligne['description'])
                        
                        with col2:
                            st.text(f"{ligne['quantite']} {ligne['unite']}")
                        
                        with col3:
                            qte_recue = st.number_input("", min_value=0.0, max_value=float(ligne['quantite']),
                                                      value=float(ligne['quantite']), key=f"qte_{i}",
                                                      format="%.2f", step=0.1)
                        
                        with col4:
                            etat_article = st.selectbox("", ["Parfait", "Acceptable", "D√©fectueux", "Manquant"],
                                                       key=f"etat_{i}", index=0)
                        
                        with col5:
                            conforme = st.checkbox("", value=True, key=f"conforme_{i}")
                        
                        with col6:
                            remarques = st.text_input("", placeholder="Remarques...", key=f"rem_{i}")
                        
                        articles_reception.append({
                            'ligne_id': ligne['id'],
                            'description': ligne['description'],
                            'quantite_commandee': ligne['quantite'],
                            'quantite_recue': qte_recue,
                            'unite': ligne['unite'],
                            'etat_article': etat_article,
                            'conforme': conforme,
                            'remarques': remarques,
                            'prix_unitaire': ligne.get('prix_unitaire', 0)
                        })
                    
                    # Options de r√©ception
                    st.markdown("##### ‚öôÔ∏è Options de R√©ception")
                    
                    col_opt1, col_opt2 = st.columns(2)
                    with col_opt1:
                        reception_complete = st.checkbox("R√©ception Compl√®te", value=True)
                        mise_a_jour_inventaire = st.checkbox("Mettre √† Jour l'Inventaire", value=True)
                    
                    with col_opt2:
                        generer_rapport = st.checkbox("G√©n√©rer Rapport de R√©ception", value=True)
                        notifier_demandeur = st.checkbox("Notifier le Demandeur", value=True)
                    
                    # Notes g√©n√©rales de r√©ception
                    notes_reception = st.text_area("Notes de R√©ception",
                                                 placeholder="Observations g√©n√©rales, probl√®mes rencontr√©s...")
                    
                    # R√©capitulatif
                    total_commande = sum(art['quantite_commandee'] for art in articles_reception)
                    total_recu = sum(art['quantite_recue'] for art in articles_reception)
                    articles_conformes = sum(1 for art in articles_reception if art['conforme'])
                    
                    st.markdown(f"""
                    <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                        <h5 style='color:#1e40af;margin:0;'>üìä R√©capitulatif de R√©ception</h5>
                        <p style='margin:0.5rem 0 0 0;'>Articles command√©s : {len(lignes_bc)}</p>
                        <p style='margin:0;'>Quantit√© totale command√©e : {total_commande}</p>
                        <p style='margin:0;'>Quantit√© totale re√ßue : {total_recu}</p>
                        <p style='margin:0;'>Articles conformes : {articles_conformes}/{len(articles_reception)}</p>
                        <p style='margin:0;'><strong>Taux de r√©ception : {(total_recu/total_commande*100) if total_commande > 0 else 0:.1f}%</strong></p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Boutons de validation
                    col_submit1, col_submit2 = st.columns(2)
                    
                    with col_submit1:
                        submit_reception = st.form_submit_button("‚úÖ Valider la R√©ception", use_container_width=True, key="bc_valider_reception")
                    
                    with col_submit2:
                        submit_reception_partielle = st.form_submit_button("üì¶ R√©ception Partielle", use_container_width=True, key="bc_reception_partielle")
                    
                    # Traitement de la r√©ception
                    if submit_reception or submit_reception_partielle:
                        try:
                            # Mise √† jour du statut de livraison
                            if livraison_selectionnee.get('appro_id'):
                                nouveau_statut = 'LIVR√â' if submit_reception else 'PARTIELLEMENT_LIVR√â'
                                gestionnaire.db.update_approvisionnement_status(
                                    livraison_selectionnee['appro_id'], 
                                    nouveau_statut,
                                    f"R√©ception {date_reception.strftime('%d/%m/%Y')} - {notes_reception}"
                                )
                            
                            # Mise √† jour de l'inventaire si demand√©
                            if mise_a_jour_inventaire:
                                articles_maj_inventaire = 0
                                for article in articles_reception:
                                    if article['quantite_recue'] > 0 and article['conforme']:
                                        # Ici on pourrait faire le lien avec l'inventaire
                                        # En recherchant par description ou code_article
                                        articles_maj_inventaire += 1
                                
                                if articles_maj_inventaire > 0:
                                    st.info(f"üì¶ {articles_maj_inventaire} article(s) mis √† jour dans l'inventaire")
                            
                            # Mise √† jour du statut du BC
                            nouveau_statut_bc = 'TERMIN√â' if reception_complete else 'APPROUV√â'
                            gestionnaire.modifier_statut_formulaire(
                                livraison_id,
                                nouveau_statut_bc,
                                responsable_reception,
                                f"R√©ception marchandises - {notes_reception}"
                            )
                            
                            # Enregistrement de la r√©ception dans l'historique
                            recap_reception = f"""=== R√âCEPTION MARCHANDISES ===
Date : {date_reception.strftime('%d/%m/%Y')}
Responsable : {next((f"{e['prenom']} {e['nom']}" for e in get_employes_actifs() if e['id'] == responsable_reception), 'N/A')}
N¬∞ Bon livraison : {numero_bon_livraison}
√âtat emballage : {etat_emballage}

=== ARTICLES RE√áUS ===
{chr(10).join([f"- {art['description']} : {art['quantite_recue']}/{art['quantite_commandee']} {art['unite']} - {art['etat_article']} - {'Conforme' if art['conforme'] else 'Non conforme'}" for art in articles_reception])}

=== R√âCAPITULATIF ===
Total command√© : {total_commande}
Total re√ßu : {total_recu} 
Taux r√©ception : {(total_recu/total_commande*100) if total_commande > 0 else 0:.1f}%
Articles conformes : {articles_conformes}/{len(articles_reception)}

=== NOTES ===
{notes_reception}"""
                            
                            gestionnaire.enregistrer_validation(
                                livraison_id,
                                responsable_reception,
                                'RECEPTION_MARCHANDISES',
                                recap_reception
                            )
                            
                            # Message de succ√®s
                            st.success(f"""
                            ‚úÖ **R√©ception Valid√©e avec Succ√®s !**
                            
                            üì¶ **BC {livraison_selectionnee['numero_document']}** marqu√© comme {nouveau_statut_bc}
                            üìä **{total_recu}/{total_commande}** articles r√©ceptionn√©s
                            ‚úÖ **{articles_conformes}** article(s) conforme(s)
                            """)
                            
                            # Actions suivantes
                            col_next1, col_next2 = st.columns(2)
                            with col_next1:
                                if st.button("üìã Retour Liste BC", use_container_width=True, key="bc_retour_liste_reception"):
                                    st.session_state.form_action = "list_bon_commande"
                                    st.rerun()
                            with col_next2:
                                if st.button("üì• Autre R√©ception", use_container_width=True, key="bc_autre_reception"):
                                    st.rerun()
                                    
                        except Exception as e:
                            st.error(f"‚ùå Erreur lors de la r√©ception: {e}")

def render_bon_commande_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons de Commande"""
    st.markdown("#### üìä Statistiques Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
    montant_moyen = montant_total / len(bons_commande) if bons_commande else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_commande) * 100) if bons_commande else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Analyses de performance
    col_perf1, col_perf2 = st.columns(2)
    
    with col_perf1:
        # D√©lais de livraison
        st.markdown("##### ‚è±Ô∏è Performance Livraisons")
        
        try:
            # Calcul des d√©lais de livraison
            delais_info = []
            for bc in bons_commande:
                if bc.get('date_echeance') and bc['statut'] == 'TERMIN√â':
                    try:
                        date_commande = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
                        date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                        delai = (date_livraison - date_commande).days
                        delais_info.append(delai)
                    except:
                        continue
            
            if delais_info:
                delai_moyen = sum(delais_info) / len(delais_info)
                delai_min = min(delais_info)
                delai_max = max(delais_info)
                
                st.metric("D√©lai Moyen", f"{delai_moyen:.1f} jours")
                st.metric("D√©lai Min/Max", f"{delai_min} - {delai_max} jours")
            else:
                st.info("Pas assez de donn√©es pour calculer les d√©lais")
                
        except Exception as e:
            st.error(f"Erreur calcul d√©lais: {e}")
    
    with col_perf2:
        # Fournisseurs les plus fiables
        st.markdown("##### üèÜ Top Fournisseurs")
        
        fournisseur_stats = {}
        for bc in bons_commande:
            fournisseur = bc.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {
                    'count': 0, 
                    'montant': 0,
                    'termines': 0
                }
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += bc.get('montant_total', 0)
            if bc['statut'] == 'TERMIN√â':
                fournisseur_stats[fournisseur]['termines'] += 1
        
        # Calcul du taux de fiabilit√© et tri
        for fournisseur, stats in fournisseur_stats.items():
            stats['taux_fiabilite'] = (stats['termines'] / stats['count'] * 100) if stats['count'] > 0 else 0
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: (x[1]['taux_fiabilite'], x[1]['montant']), 
                                reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(
                f"{i}. {fournisseur[:15]}",
                f"{stats['taux_fiabilite']:.0f}% fiabilit√©",
                delta=f"{stats['count']} BCs - {stats['montant']:,.0f}$"
            )
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # R√©partition par statut
        statut_counts = {}
        statut_montants = {}
        for bc in bons_commande:
            statut = bc['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
            statut_montants[statut] = statut_montants.get(statut, 0) + bc.get('montant_total', 0)
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", 
                        color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True, height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # √âvolution mensuelle
        st.markdown("##### üìà √âvolution Mensuelle")
        
        evolution_mensuelle = {}
        for bc in bons_commande:
            try:
                mois = bc['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += bc.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre BCs': data['count'], 'Montant (k$)': data['montant']/1000}
                for mois, data in mois_sorted[-12:]  # 12 derniers mois
            ])
            
            fig = px.bar(df_evolution, x='Mois', y='Nombre BCs',
                        title="√âvolution Mensuelle des BCs",
                        hover_data=['Montant (k$)'])
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyse des montants
    col_montant1, col_montant2 = st.columns(2)
    
    with col_montant1:
        # R√©partition par tranches de montant
        st.markdown("##### üí∞ R√©partition par Montant")
        
        tranches = {
            '< 1k$': 0,
            '1k$ - 5k$': 0,
            '5k$ - 10k$': 0,
            '10k$ - 50k$': 0,
            '> 50k$': 0
        }
        
        for bc in bons_commande:
            montant = bc.get('montant_total', 0)
            if montant < 1000:
                tranches['< 1k$'] += 1
            elif montant < 5000:
                tranches['1k$ - 5k$'] += 1
            elif montant < 10000:
                tranches['5k$ - 10k$'] += 1
            elif montant < 50000:
                tranches['10k$ - 50k$'] += 1
            else:
                tranches['> 50k$'] += 1
        
        fig = px.bar(x=list(tranches.keys()), y=list(tranches.values()),
                    title="Nombre de BCs par Tranche de Montant")
        fig.update_layout(height=350)
        st.plotly_chart(fig, use_container_width=True)
    
    with col_montant2:
        # Analyse des priorit√©s
        st.markdown("##### üö® Analyse des Priorit√©s")
        
        priorite_stats = {}
        for bc in bons_commande:
            priorite = bc['priorite']
            if priorite not in priorite_stats:
                priorite_stats[priorite] = {
                    'count': 0,
                    'montant': 0,
                    'termines': 0,
                    'delai_moyen': 0
                }
            priorite_stats[priorite]['count'] += 1
            priorite_stats[priorite]['montant'] += bc.get('montant_total', 0)
            if bc['statut'] == 'TERMIN√â':
                priorite_stats[priorite]['termines'] += 1
        
        # Affichage des statistiques par priorit√©
        for priorite, stats in priorite_stats.items():
            taux_completion = (stats['termines'] / stats['count'] * 100) if stats['count'] > 0 else 0
            icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(priorite, '‚ö™')
            
            st.metric(
                f"{icon} {priorite}",
                f"{stats['count']} BCs",
                delta=f"{taux_completion:.0f}% termin√©s - {stats['montant']:,.0f}$"
            )
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BCs en retard
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        alerts.append(f"üî¥ {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison")
    
    # BCs critiques non trait√©s
    critiques_non_traites = [bc for bc in bons_commande 
                            if bc['priorite'] == 'CRITIQUE' and bc['statut'] in ['BROUILLON', 'VALID√â']]
    
    if critiques_non_traites:
        alerts.append(f"üü° {len(critiques_non_traites)} BC(s) critique(s) non envoy√©(s)")
    
    # Fournisseurs peu fiables
    fournisseurs_problematiques = []
    for fournisseur, stats in fournisseur_stats.items():
        if stats['count'] >= 3 and stats['taux_fiabilite'] < 80:
            fournisseurs_problematiques.append(fournisseur)
    
    if fournisseurs_problematiques:
        alerts.append(f"‚ö†Ô∏è {len(fournisseurs_problematiques)} fournisseur(s) avec taux de fiabilit√© < 80%")
    
    # Affichage des alertes
    if alerts:
        for alert in alerts:
            st.warning(alert)
        
        # Recommandations
        st.markdown("**Recommandations :**")
        if bcs_en_retard:
            st.markdown("‚Ä¢ Relancer les fournisseurs pour les livraisons en retard")
        if critiques_non_traites:
            st.markdown("‚Ä¢ Traiter en priorit√© les BCs critiques")
        if fournisseurs_problematiques:
            st.markdown("‚Ä¢ √âvaluer les performances des fournisseurs peu fiables")
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des commandes optimale")

# Fonctions utilitaires sp√©cifiques aux BCs

def mettre_a_jour_statut_livraison(gestionnaire, appro_id, nouveau_statut):
    """Met √† jour le statut d'une livraison"""
    try:
        return gestionnaire.db.update_approvisionnement_status(appro_id, nouveau_statut)
    except Exception as e:
        st.error(f"Erreur mise √† jour statut: {e}")
        return False

def marquer_bc_recu(gestionnaire, bc_id):
    """Marque un BC comme re√ßu rapidement"""
    try:
        # Mise √† jour du statut du BC
        gestionnaire.modifier_statut_formulaire(bc_id, 'TERMIN√â', 1, "Marqu√© comme re√ßu - Traitement rapide")
        
        # Mise √† jour de l'approvisionnement si il existe
        try:
            query = "SELECT id FROM approvisionnements WHERE formulaire_id = ?"
            result = gestionnaire.db.execute_query(query, (bc_id,))
            if result:
                appro_id = result[0]['id']
                gestionnaire.db.update_approvisionnement_status(appro_id, 'LIVR√â', "R√©ception rapide valid√©e")
        except:
            pass
        
        return True
    except Exception as e:
        st.error(f"Erreur marquage r√©ception: {e}")
        return False

def render_templates_bon_commande(gestionnaire):
    """Interface de gestion des templates de BC"""
    st.markdown("#### üìã Templates Bons de Commande")
    st.info("üöß Gestion des templates de BC - Fonctionnalit√© avanc√©e √† d√©velopper")
    
    # TODO: Interface pour cr√©er et g√©rer des templates de BC par industrie/type
    # - Templates standards par secteur (auto, a√©ro, construction)
    # - Clauses pr√©-d√©finies
    # - Conditions commerciales par d√©faut

def render_rapports_bon_commande(gestionnaire):
    """Interface de g√©n√©ration de rapports BC"""
    st.markdown("#### üìà Rapports Bons de Commande")
    st.info("üöß G√©n√©ration de rapports BC - Fonctionnalit√© avanc√©e √† d√©velopper")
    
    # TODO: G√©n√©ration de rapports avanc√©s
    # - Rapport mensuel des achats
    # - Performance fournisseurs
    # - Analyse des co√ªts
    # - Export Excel/PDF
    
    # TODO: Impl√©menter interface similaire aux Bons de Travail
    # Sp√©cificit√©s: Conversion Bon d'Achats ‚Üí Bon de Commande, envoi fournisseurs, suivi livraisons

def render_demandes_prix_tab(gestionnaire):
    """Interface compl√®te pour les Demandes de Prix - RFQ Multi-Fournisseurs"""
    st.markdown("### üí∞ Demandes de Prix (RFQ)")
    
    # Alerte pour n√©gociations en cours
    demandes_actives = get_demandes_prix_actives(gestionnaire)
    if demandes_actives:
        st.info(f"üí° {len(demandes_actives)} Demande(s) de Prix en cours de n√©gociation")
    
    # Actions sp√©cifiques DP
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouvelle Demande Prix", use_container_width=True, key="dp_nouveau"):
            st.session_state.form_action = "create_demande_prix"
    with col_action2:
        if st.button("üìã Demandes Actives", use_container_width=True, key="dp_liste"):
            st.session_state.form_action = "list_demandes_actives"
    with col_action3:
        if st.button("üìä Comparer Offres", use_container_width=True, key="dp_comparer"):
            st.session_state.form_action = "compare_offers"
    with col_action4:
        if st.button("üèÜ S√©lectionner Gagnant", use_container_width=True, key="dp_selection"):
            st.session_state.form_action = "select_winner"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="dp_stats"):
            st.session_state.form_action = "stats_demande_prix"
    with col_action6:
        if st.button("üìã Historique RFQ", use_container_width=True, key="dp_historique"):
            st.session_state.form_action = "historique_rfq"
    with col_action7:
        if st.button("‚öôÔ∏è Templates DP", use_container_width=True, key="dp_templates"):
            st.session_state.form_action = "templates_demande_prix"
    with col_action8:
        if st.button("üìà Performance", use_container_width=True, key="dp_performance"):
            st.session_state.form_action = "performance_fournisseurs"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_demandes_actives')
    
    if action == "create_demande_prix":
        render_demande_prix_form(gestionnaire)
    elif action == "list_demandes_actives":
        render_demande_prix_list(gestionnaire)
    elif action == "compare_offers":
        render_compare_offers(gestionnaire)
    elif action == "select_winner":
        render_select_winner(gestionnaire)
    elif action == "stats_demande_prix":
        render_demande_prix_stats(gestionnaire)
    elif action == "historique_rfq":
        render_historique_rfq(gestionnaire)
    elif action == "templates_demande_prix":
        render_templates_demande_prix(gestionnaire)
    elif action == "performance_fournisseurs":
        render_performance_fournisseurs(gestionnaire)

# =============================================================================
# FORMULAIRE CR√âATION DEMANDE DE PRIX
# =============================================================================

def render_demande_prix_form(gestionnaire):
    """Formulaire de cr√©ation de Demande de Prix - RFQ Multi-Fournisseurs"""
    st.markdown("#### ‚ûï Nouvelle Demande de Prix (RFQ)")
    
    with st.form("demande_prix_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_dp = gestionnaire.generer_numero_document('DEMANDE_PRIX')
            st.text_input("N¬∞ Demande de Prix", value=numero_dp, disabled=True)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable RFQ *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Projet associ√© (optionnel)
            projets = get_projets_actifs()
            if projets:
                projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
                projet_id = st.selectbox(
                    "Projet Associ√© (optionnel)",
                    options=[p[0] for p in projet_options],
                    format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
                )
            else:
                projet_id = None
            
            date_echeance_reponse = st.date_input("Date Limite R√©ponses", datetime.now().date() + timedelta(days=7))
        
        # SP√âCIFICIT√âS DP - PARAM√àTRES DE L'APPEL D'OFFRES
        st.markdown("##### üéØ Param√®tres de l'Appel d'Offres")
        col_rfq1, col_rfq2 = st.columns(2)
        
        with col_rfq1:
            type_rfq = st.selectbox("Type d'Appel d'Offres", 
                ["Ouvert", "Restreint", "N√©goci√©", "Urgente"])
            delai_reponse = st.number_input("D√©lai R√©ponse (jours)", 
                min_value=1, value=7, max_value=30)
            mode_evaluation = st.selectbox("Mode d'√âvaluation",
                ["Prix seul", "Offre √©conomiquement avantageuse", "Qualit√©-Prix", "Technique"])
        
        with col_rfq2:
            validite_offre = st.number_input("Validit√© Offre (jours)", 
                min_value=15, value=30, max_value=90)
            conditions_participation = st.text_input("Conditions Participation",
                placeholder="Ex: Certification ISO 9001 requise")
            langue_reponse = st.selectbox("Langue des R√©ponses", ["Fran√ßais", "Anglais", "Bilingue"])
        
        # CRIT√àRES D'√âVALUATION AVEC POND√âRATIONS
        st.markdown("##### ‚öñÔ∏è Crit√®res d'√âvaluation et Pond√©rations")
        st.info("üí° Les pond√©rations doivent totaliser 100%")
        
        col_crit1, col_crit2, col_crit3 = st.columns(3)
        
        with col_crit1:
            critere_prix = st.checkbox("Prix", value=True)
            ponderation_prix = st.slider("Pond√©ration Prix (%)", 0, 100, 40, disabled=not critere_prix)
        
        with col_crit2:
            critere_delai = st.checkbox("D√©lai de Livraison", value=True)
            ponderation_delai = st.slider("Pond√©ration D√©lai (%)", 0, 100, 30, disabled=not critere_delai)
        
        with col_crit3:
            critere_qualite = st.checkbox("Qualit√© Fournisseur", value=True)
            ponderation_qualite = st.slider("Pond√©ration Qualit√© (%)", 0, 100, 30, disabled=not critere_qualite)
        
        # Autres crit√®res optionnels
        col_crit4, col_crit5 = st.columns(2)
        with col_crit4:
            critere_proximite = st.checkbox("Proximit√© G√©ographique")
            ponderation_proximite = st.slider("Pond√©ration Proximit√© (%)", 0, 100, 0, disabled=not critere_proximite)
        
        with col_crit5:
            critere_experience = st.checkbox("Exp√©rience Secteur")
            ponderation_experience = st.slider("Pond√©ration Exp√©rience (%)", 0, 100, 0, disabled=not critere_experience)
        
        # Validation des pond√©rations
        total_ponderation = ponderation_prix + ponderation_delai + ponderation_qualite + ponderation_proximite + ponderation_experience
        
        if total_ponderation != 100:
            st.error(f"‚ö†Ô∏è Total des pond√©rations : {total_ponderation}% (doit √™tre 100%)")
        else:
            st.success(f"‚úÖ Total des pond√©rations : {total_ponderation}%")
        
        # S√âLECTION MULTIPLE FOURNISSEURS (NOUVEAUT√â VS BA/BC)
        st.markdown("##### üè¢ S√©lection des Fournisseurs (Multi-s√©lection)")
        
        fournisseurs_disponibles = get_fournisseurs_actifs()
        
        if not fournisseurs_disponibles:
            st.error("‚ùå Aucun fournisseur disponible. Veuillez d'abord ajouter des fournisseurs dans le CRM.")
        else:
            # Interface de s√©lection avanc√©e
            col_fourn1, col_fourn2 = st.columns(2)
            
            with col_fourn1:
                # Filtre par secteur
                secteurs_disponibles = list(set([f.get('secteur', 'N/A') for f in fournisseurs_disponibles if f.get('secteur')]))
                filtre_secteur = st.multiselect("Filtrer par Secteur", 
                    ['Tous'] + secteurs_disponibles, default=['Tous'])
                
                # Application du filtre
                if 'Tous' in filtre_secteur:
                    fournisseurs_filtres = fournisseurs_disponibles
                else:
                    fournisseurs_filtres = [f for f in fournisseurs_disponibles if f.get('secteur') in filtre_secteur]
            
            with col_fourn2:
                # S√©lection recommand√©e automatique
                if st.button("üéØ S√©lection Automatique Recommand√©e", key="dp_selection_auto"):
                    # S√©lectionner automatiquement 3-4 meilleurs fournisseurs
                    fournisseurs_auto = select_fournisseurs_recommandes(fournisseurs_filtres, 4)
                    st.session_state.fournisseurs_auto_selected = [f['id'] for f in fournisseurs_auto]
            
            # Multi-s√©lection des fournisseurs
            fournisseurs_preselected = st.session_state.get('fournisseurs_auto_selected', [])
            
            fournisseurs_selectionnes = st.multiselect(
                "Fournisseurs Invit√©s (3-5 recommand√©s) *",
                options=[f['id'] for f in fournisseurs_filtres],
                default=fournisseurs_preselected,
                format_func=lambda x: next((f"{f['nom']} - {f['secteur']} - {get_note_fournisseur(f)}/10" for f in fournisseurs_filtres if f['id'] == x), ""),
                help="S√©lectionnez 3 √† 5 fournisseurs pour obtenir des prix comp√©titifs"
            )
            
            # Validation nombre fournisseurs
            nb_fournisseurs = len(fournisseurs_selectionnes)
            if nb_fournisseurs < 2:
                st.warning("‚ö†Ô∏è Il est recommand√© de s√©lectionner au moins 2 fournisseurs pour la concurrence")
            elif nb_fournisseurs > 6:
                st.warning("‚ö†Ô∏è Plus de 6 fournisseurs peut compliquer l'√©valuation des offres")
            else:
                st.success(f"‚úÖ {nb_fournisseurs} fournisseur(s) s√©lectionn√©(s) - Configuration optimale")
            
            # Affichage des fournisseurs s√©lectionn√©s
            if fournisseurs_selectionnes:
                st.markdown("**Fournisseurs s√©lectionn√©s pour cette RFQ :**")
                for fourn_id in fournisseurs_selectionnes:
                    fournisseur = next((f for f in fournisseurs_filtres if f['id'] == fourn_id), None)
                    if fournisseur:
                        col_info, col_note = st.columns([3, 1])
                        with col_info:
                            st.text(f"‚Ä¢ {fournisseur['nom']} - {fournisseur.get('secteur', 'N/A')}")
                        with col_note:
                            note = get_note_fournisseur(fournisseur)
                            color = "üü¢" if note >= 8 else "üü°" if note >= 6 else "üî¥"
                            st.text(f"{color} {note}/10")
        
        # DESCRIPTION ET SP√âCIFICATIONS TECHNIQUES
        st.markdown("##### üìã Description et Sp√©cifications")
        
        objet_rfq = st.text_input("Objet de la RFQ *", 
            placeholder="Ex: Fourniture mati√®res premi√®res aluminium - Projet XYZ")
        
        description_detaillee = st.text_area("Description D√©taill√©e *", height=120,
            placeholder="D√©crivez pr√©cis√©ment les produits/services demand√©s, les sp√©cifications techniques, les quantit√©s, etc.")
        
        # Sp√©cifications techniques
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            specifications_techniques = st.text_area("Sp√©cifications Techniques",
                placeholder="Normes, dimensions, mat√©riaux, certifications requises...")
        
        with col_spec2:
            documents_joints = st.text_area("Documents √† Joindre",
                placeholder="Plans, cahier des charges, √©chantillons...")
            
            livraison_lieu = st.text_input("Lieu de Livraison",
                value="DG Inc. - 123 Rue Industrielle, Montr√©al")
        
        # ARTICLES √Ä COMMANDER (similaire BA/BC mais pour RFQ)
        st.markdown("##### üì¶ Articles/Services Demand√©s")
        
        # Interface pour saisie des articles
        col_desc, col_qty, col_unit, col_spec, col_delai = st.columns([3, 1, 1, 2, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_spec:
            st.markdown("**Sp√©cifications**")
        with col_delai:
            st.markdown("**D√©lai Max**")
        
        articles_rfq = []
        for i in range(6):  # 6 lignes pour RFQ
            col_desc, col_qty, col_unit, col_spec, col_delai = st.columns([3, 1, 1, 2, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"rfq_desc_{i}", placeholder="Description article/service")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"rfq_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "H", "SERVICE"], 
                                   key=f"rfq_unit_{i}", index=0)
            with col_spec:
                spec = st.text_input("", key=f"rfq_spec_{i}", placeholder="Sp√©cifications particuli√®res")
            with col_delai:
                delai_max = st.number_input("", min_value=0, key=f"rfq_delai_{i}", value=14, step=1)
            
            if desc and qty > 0:
                articles_rfq.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'specifications': spec,
                    'delai_maximum': delai_max,
                    'prix_unitaire': 0.0  # Sera rempli par les fournisseurs
                })
        
        # CONDITIONS COMMERCIALES RFQ
        st.markdown("##### üíº Conditions Commerciales")
        
        col_comm1, col_comm2 = st.columns(2)
        with col_comm1:
            conditions_paiement_souhaitees = st.selectbox("Conditions Paiement Souhait√©es",
                ["30 jours net", "45 jours net", "60 jours net", "15 jours net", "√Ä r√©ception"])
            
            garantie_demandee = st.text_input("Garantie Demand√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            
            incoterm = st.selectbox("Incoterm", ["DDP", "DAP", "FCA", "EXW", "CIF", "FOB"])
        
        with col_comm2:
            devise_souhaitee = st.selectbox("Devise", ["CAD", "USD", "EUR"])
            
            validite_prix = st.number_input("Validit√© Prix (jours)", min_value=30, value=60)
            
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
        
        # PROC√âDURE DE R√âPONSE
        st.markdown("##### üì§ Proc√©dure de R√©ponse")
        
        col_proc1, col_proc2 = st.columns(2)
        with col_proc1:
            format_reponse = st.selectbox("Format de R√©ponse", 
                ["Email avec devis PDF", "Plateforme en ligne", "Formulaire structur√©", "Pr√©sentation"])
            
            visite_site = st.checkbox("Visite du Site Requise")
            
            reunion_clarification = st.checkbox("R√©union de Clarification")
        
        with col_proc2:
            remise_echantillons = st.checkbox("Remise d'√âchantillons")
            
            demonstration = st.checkbox("D√©monstration/Pr√©sentation")
            
            contact_technique = st.text_input("Contact Technique",
                placeholder="Nom et coordonn√©es pour questions techniques")
        
        # CRIT√àRES DE S√âLECTION D√âTAILL√âS
        st.markdown("##### üéØ Crit√®res de S√©lection D√©taill√©s")
        
        criteres_techniques = st.text_area("Crit√®res Techniques",
            placeholder="Sp√©cifications techniques obligatoires, certifications requises...")
        
        criteres_commerciaux = st.text_area("Crit√®res Commerciaux", 
            placeholder="Conditions de paiement, garanties, service apr√®s-vente...")
        
        criteres_exclusion = st.text_area("Crit√®res d'Exclusion",
            placeholder="Motifs d'exclusion automatique des offres...")
        
        # NOTES ET INSTRUCTIONS SP√âCIALES
        notes_rfq = st.text_area("Notes et Instructions Sp√©ciales", height=80,
            placeholder="Instructions particuli√®res, contexte du projet, contraintes sp√©cifiques...")
        
        # R√âCAPITULATIF DE LA RFQ
        if articles_rfq and fournisseurs_selectionnes and total_ponderation == 100:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üìä R√©capitulatif de la RFQ</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>N¬∞ RFQ :</strong> {numero_dp}</p>
                <p style='margin:0;'><strong>Fournisseurs invit√©s :</strong> {len(fournisseurs_selectionnes)}</p>
                <p style='margin:0;'><strong>Articles/Services :</strong> {len(articles_rfq)}</p>
                <p style='margin:0;'><strong>D√©lai r√©ponse :</strong> {delai_reponse} jours</p>
                <p style='margin:0;'><strong>√âvaluation :</strong> Prix({ponderation_prix}%), D√©lai({ponderation_delai}%), Qualit√©({ponderation_qualite}%)</p>
                <p style='margin:0;'><strong>Date limite :</strong> {date_echeance_reponse.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # BOUTONS DE SOUMISSION
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="dp_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="dp_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer RFQ", use_container_width=True, key="dp_submit_envoyer")
        
        # TRAITEMENT DE LA SOUMISSION
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not employe_id:
                erreurs.append("Responsable RFQ obligatoire")
            if not objet_rfq:
                erreurs.append("Objet de la RFQ obligatoire")
            if not description_detaillee:
                erreurs.append("Description d√©taill√©e obligatoire")
            if not fournisseurs_selectionnes:
                erreurs.append("Au moins 1 fournisseur doit √™tre s√©lectionn√©")
            if len(fournisseurs_selectionnes) < 2 and not submit_brouillon:
                erreurs.append("Au moins 2 fournisseurs recommand√©s pour RFQ officielle")
            if not articles_rfq:
                erreurs.append("Au moins un article/service doit √™tre ajout√©")
            if total_ponderation != 100:
                erreurs.append("Les pond√©rations doivent totaliser 100%")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des crit√®res d'√©valuation
                criteres_evaluation = {
                    'prix': {'actif': critere_prix, 'ponderation': ponderation_prix},
                    'delai': {'actif': critere_delai, 'ponderation': ponderation_delai},
                    'qualite': {'actif': critere_qualite, 'ponderation': ponderation_qualite},
                    'proximite': {'actif': critere_proximite, 'ponderation': ponderation_proximite},
                    'experience': {'actif': critere_experience, 'ponderation': ponderation_experience}
                }
                
                # M√©tadonn√©es RFQ compl√®tes
                metadonnees_rfq = {
                    'type_rfq': type_rfq,
                    'delai_reponse': delai_reponse,
                    'mode_evaluation': mode_evaluation,
                    'validite_offre': validite_offre,
                    'conditions_participation': conditions_participation,
                    'langue_reponse': langue_reponse,
                    'criteres_evaluation': criteres_evaluation,
                    'fournisseurs_invites': fournisseurs_selectionnes,
                    'specifications_techniques': specifications_techniques,
                    'documents_joints': documents_joints,
                    'livraison_lieu': livraison_lieu,
                    'conditions_commerciales': {
                        'paiement': conditions_paiement_souhaitees,
                        'garantie': garantie_demandee,
                        'incoterm': incoterm,
                        'devise': devise_souhaitee,
                        'validite_prix': validite_prix,
                        'penalites_retard': penalites_retard
                    },
                    'procedure_reponse': {
                        'format': format_reponse,
                        'visite_site': visite_site,
                        'reunion_clarification': reunion_clarification,
                        'remise_echantillons': remise_echantillons,
                        'demonstration': demonstration,
                        'contact_technique': contact_technique
                    },
                    'criteres_selection': {
                        'techniques': criteres_techniques,
                        'commerciaux': criteres_commerciaux,
                        'exclusion': criteres_exclusion
                    }
                }
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DEMANDE DE PRIX (RFQ) ===
Objet : {objet_rfq}
Type : {type_rfq}
Mode d'√©valuation : {mode_evaluation}

=== DESCRIPTION ===
{description_detaillee}

=== SP√âCIFICATIONS TECHNIQUES ===
{specifications_techniques or 'Voir articles d√©taill√©s'}

=== FOURNISSEURS INVIT√âS ===
{len(fournisseurs_selectionnes)} fournisseur(s) s√©lectionn√©(s)

=== CRIT√àRES D'√âVALUATION ===
Prix : {ponderation_prix}%
D√©lai : {ponderation_delai}%
Qualit√© : {ponderation_qualite}%
Proximit√© : {ponderation_proximite}%
Exp√©rience : {ponderation_experience}%

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement_souhaitees}
Garantie : {garantie_demandee or 'Standard'}
Incoterm : {incoterm}
Devise : {devise_souhaitee}
Validit√© prix : {validite_prix} jours

=== CRIT√àRES TECHNIQUES ===
{criteres_techniques or 'Voir sp√©cifications articles'}

=== CRIT√àRES COMMERCIAUX ===
{criteres_commerciaux or 'Conditions standard'}

=== CRIT√àRES D\'EXCLUSION ===
{criteres_exclusion or 'Aucun crit√®re d\'exclusion sp√©cifique'}

=== PROC√âDURE DE R√âPONSE ===
Format : {format_reponse}
Visite site : {'Requise' if visite_site else 'Non requise'}
R√©union clarification : {'Pr√©vue' if reunion_clarification else 'Non pr√©vue'}
√âchantillons : {'Requis' if remise_echantillons else 'Non requis'}
D√©monstration : {'Requise' if demonstration else 'Non requise'}
Contact technique : {contact_technique or 'Via responsable RFQ'}

=== LIVRAISON ===
Lieu : {livraison_lieu}
D√©lai maximum : Voir d√©tail par article

=== DOCUMENTS JOINTS ===
{documents_joints or 'Aucun document joint sp√©cifique'}

=== NOTES SP√âCIALES ===
{notes_rfq or 'Aucune note particuli√®re'}"""
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'DEMANDE_PRIX',
                    'numero_document': numero_dp,
                    'project_id': projet_id,
                    'company_id': None,  # Pour RFQ multi-fournisseurs, pas de company_id unique
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance_reponse,
                    'montant_total': 0.0,  # Sera calcul√© quand les offres arrivent
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees_rfq),
                    'lignes': articles_rfq
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Demande de Prix {numero_dp} cr√©√©e et envoy√©e √† {len(fournisseurs_selectionnes)} fournisseur(s)!")
                        st.info("üìß Les fournisseurs ont √©t√© notifi√©s et le suivi des r√©ponses est activ√©.")
                    else:
                        st.success(f"‚úÖ Demande de Prix {numero_dp} cr√©√©e avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif de la RFQ
                    
                    **N¬∞ DP :** {numero_dp}  
                    **Objet :** {objet_rfq}  
                    **Fournisseurs invit√©s :** {len(fournisseurs_selectionnes)}  
                    **Articles/Services :** {len(articles_rfq)}  
                    **Date limite r√©ponses :** {date_echeance_reponse.strftime('%d/%m/%Y')}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="dp_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_demandes_actives"
                            st.rerun()
                    with col_next2:
                        if st.button("üìä Suivi R√©ponses", use_container_width=True, key="dp_suivi_apres_creation"):
                            st.session_state.form_action = "compare_offers"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er Autre RFQ", use_container_width=True, key="dp_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation de la Demande de Prix")

# =============================================================================
# LISTE DES DEMANDES DE PRIX
# =============================================================================

def render_demande_prix_list(gestionnaire):
    """Liste des Demandes de Prix avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Demandes de Prix")
    
    demandes_prix = gestionnaire.get_formulaires('DEMANDE_PRIX')
    
    if not demandes_prix:
        st.info("Aucune Demande de Prix cr√©√©e. Lancez votre premi√®re RFQ!")
        
        # Proposer actions de d√©marrage
        if st.button("‚ûï Cr√©er Premi√®re RFQ", use_container_width=True, key="dp_premiere"):
            st.session_state.form_action = "create_demande_prix"
            st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    
    with col_m1:
        st.metric("üí∞ Total RFQs", len(demandes_prix))
    with col_m2:
        en_cours = len([dp for dp in demandes_prix if dp['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üì§ En Cours", en_cours)
    with col_m3:
        avec_reponses = len([dp for dp in demandes_prix if dp['statut'] in ['APPROUV√â', 'TERMIN√â']])
        st.metric("üì® Avec R√©ponses", avec_reponses)
    with col_m4:
        # Calculer le nombre total de fournisseurs sollicit√©s
        nb_fournisseurs_total = 0
        for dp in demandes_prix:
            try:
                meta = json.loads(dp.get('metadonnees_json', '{}'))
                nb_fournisseurs_total += len(meta.get('fournisseurs_invites', []))
            except:
                pass
        st.metric("üè¢ Fournisseurs Sollicit√©s", nb_fournisseurs_total)
    with col_m5:
        urgentes = len([dp for dp in demandes_prix if dp['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgentes", urgentes)
    
    # Alertes pour RFQ en attente de r√©ponse
    today = datetime.now().date()
    rfq_echeance_proche = []
    for dp in demandes_prix:
        if dp.get('date_echeance') and dp['statut'] in ['ENVOY√â']:
            try:
                date_echeance = datetime.strptime(dp['date_echeance'], '%Y-%m-%d').date()
                if date_echeance <= today + timedelta(days=2):
                    rfq_echeance_proche.append(dp)
            except:
                continue
    
    if rfq_echeance_proche:
        st.warning(f"‚è∞ {len(rfq_echeance_proche)} RFQ avec √©ch√©ance proche (‚â§ 2 jours)")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par responsable
            responsables_liste = list(set([dp.get('employee_nom', 'N/A') for dp in demandes_prix if dp.get('employee_nom')]))
            filtre_responsable = st.multiselect("Responsable", ['Tous'] + responsables_liste, default=['Tous'])
        with col_f4:
            # Filtre par type RFQ
            types_rfq = ['Tous', 'Ouvert', 'Restreint', 'N√©goci√©', 'Urgente']
            filtre_type_rfq = st.selectbox("Type RFQ", types_rfq)
        
        col_search, col_date = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, objet, projet...")
        with col_date:
            date_depuis = st.date_input("RFQs depuis", value=datetime.now().date() - timedelta(days=60))
    
    # Application des filtres
    demandes_filtrees = []
    for dp in demandes_prix:
        # Filtre statut
        if dp['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if dp['priorite'] not in filtre_priorite:
            continue
        
        # Filtre responsable
        if 'Tous' not in filtre_responsable and dp.get('employee_nom', 'N/A') not in filtre_responsable:
            continue
        
        # Filtre type RFQ
        if filtre_type_rfq != 'Tous':
            try:
                meta = json.loads(dp.get('metadonnees_json', '{}'))
                if meta.get('type_rfq') != filtre_type_rfq:
                    continue
            except:
                continue
        
        # Filtre date
        try:
            date_dp = datetime.strptime(dp['date_creation'][:10], '%Y-%m-%d').date()
            if date_dp < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(dp.get(field, '')).lower() for field in ['numero_document', 'notes', 'employee_nom', 'project_nom']):
                continue
        
        demandes_filtrees.append(dp)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(demandes_filtrees)} Demande(s) de Prix trouv√©e(s)**")
    
    if demandes_filtrees:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date √©ch√©ance", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            demandes_filtrees.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date √©ch√©ance":
            demandes_filtrees.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            demandes_filtrees.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for dp in demandes_filtrees:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(dp['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(dp['statut'], '‚ùì')
            
            # Extraction des m√©tadonn√©es
            try:
                meta = json.loads(dp.get('metadonnees_json', '{}'))
                type_rfq = meta.get('type_rfq', 'N/A')
                nb_fournisseurs = len(meta.get('fournisseurs_invites', []))
                delai_reponse = meta.get('delai_reponse', 'N/A')
            except:
                type_rfq = 'N/A'
                nb_fournisseurs = 0
                delai_reponse = 'N/A'
            
            # Calcul du statut d'√©ch√©ance
            try:
                date_echeance = datetime.strptime(dp['date_echeance'], '%Y-%m-%d').date()
                jours_restants = (date_echeance - today).days
                if dp['statut'] in ['TERMIN√â', 'ANNUL√â']:
                    echeance_status = "‚úÖ Termin√©"
                elif jours_restants < 0:
                    echeance_status = f"üî¥ D√©pass√© ({abs(jours_restants)}j)"
                elif jours_restants <= 1:
                    echeance_status = "üü° Urgent"
                else:
                    echeance_status = f"üü¢ {jours_restants}j restants"
            except:
                echeance_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ RFQ': dp['numero_document'],
                'Type': type_rfq,
                'Responsable': dp.get('employee_nom', 'N/A'),
                'Fournisseurs': f"üë• {nb_fournisseurs}",
                'Statut': f"{statut_icon} {dp['statut']}",
                'Priorit√©': f"{priorite_icon} {dp['priorite']}",
                'Date Cr√©ation': dp['date_creation'][:10] if dp['date_creation'] else 'N/A',
                '√âch√©ance': dp.get('date_echeance', 'N/A'),
                'Statut √âch√©ance': echeance_status,
                'D√©lai R√©p.': f"{delai_reponse}j" if delai_reponse != 'N/A' else 'N/A'
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4, col_action5 = st.columns(5)
        
        with col_action1:
            dp_selectionne = st.selectbox("S√©lectionner une RFQ", 
                                        options=[dp['id'] for dp in demandes_filtrees],
                                        format_func=lambda x: next((dp['numero_document'] for dp in demandes_filtrees if dp['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="dp_voir_details"):
                if dp_selectionne:
                    st.session_state.selected_formulaire_id = dp_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìä Comparer Offres", use_container_width=True, key="dp_comparer_action"):
                if dp_selectionne:
                    st.session_state.selected_dp_comparison = dp_selectionne
                    st.session_state.form_action = "compare_offers"
                    st.rerun()
        
        with col_action4:
            if st.button("üèÜ S√©lectionner Gagnant", use_container_width=True, key="dp_select_winner_action"):
                if dp_selectionne:
                    st.session_state.selected_dp_winner = dp_selectionne
                    st.session_state.form_action = "select_winner"
                    st.rerun()
        
        with col_action5:
            if st.button("üìù Modifier", use_container_width=True, key="dp_modifier"):
                if dp_selectionne:
                    st.session_state.form_action = "edit_demande_prix"
                    st.session_state.edit_formulaire_id = dp_selectionne
    else:
        st.info("Aucune Demande de Prix ne correspond aux crit√®res de recherche.")

# =============================================================================
# COMPARAISON DES OFFRES MULTI-FOURNISSEURS
# =============================================================================

def render_compare_offers(gestionnaire):
    """Interface de comparaison des offres - NOUVEAU CONCEPT"""
    st.markdown("#### üìä Comparaison des Offres Multi-Fournisseurs")
    
    # S√©lection de la DP √† analyser
    demandes_prix = gestionnaire.get_formulaires('DEMANDE_PRIX')
    dp_avec_offres = [dp for dp in demandes_prix if dp['statut'] in ['ENVOY√â', 'APPROUV√â', 'TERMIN√â']]
    
    if not dp_avec_offres:
        st.info("Aucune Demande de Prix avec des offres √† comparer.")
        return
    
    # S√©lection de la RFQ
    dp_selected_id = st.session_state.get('selected_dp_comparison')
    if not dp_selected_id:
        dp_options = [(dp['id'], f"{dp['numero_document']} - {dp.get('notes', '')[:50]}...") for dp in dp_avec_offres]
        dp_selected_id = st.selectbox(
            "S√©lectionner la RFQ √† analyser",
            options=[dp[0] for dp in dp_options],
            format_func=lambda x: next((dp[1] for dp in dp_options if dp[0] == x), "")
        )
    
    if dp_selected_id:
        dp_details = gestionnaire.get_formulaire_details(dp_selected_id)
        
        if dp_details:
            # Affichage des d√©tails de la RFQ
            st.markdown("##### üìã D√©tails de la RFQ")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ RFQ :** {dp_details['numero_document']}
                **Statut :** {dp_details['statut']}
                **Responsable :** {dp_details.get('employee_nom', 'N/A')}
                **Date √©ch√©ance :** {dp_details.get('date_echeance', 'N/A')}
                """)
            
            with col_det2:
                try:
                    meta = json.loads(dp_details.get('metadonnees_json', '{}'))
                    fournisseurs_invites = meta.get('fournisseurs_invites', [])
                    criteres_eval = meta.get('criteres_evaluation', {})
                    
                    st.info(f"""
                    **Fournisseurs invit√©s :** {len(fournisseurs_invites)}
                    **Type RFQ :** {meta.get('type_rfq', 'N/A')}
                    **D√©lai r√©ponse :** {meta.get('delai_reponse', 'N/A')} jours
                    **Mode √©valuation :** {meta.get('mode_evaluation', 'N/A')}
                    """)
                except:
                    st.error("Erreur lecture m√©tadonn√©es RFQ")
            
            # SIMULATION DES OFFRES RE√áUES (Dans un vrai syst√®me, elles seraient stock√©es)
            # Pour la d√©mo, on g√©n√®re des offres fictives
            st.markdown("##### üì® Offres Re√ßues")
            
            with st.expander("‚öôÔ∏è Simuler les Offres Re√ßues (Demo)", expanded=True):
                st.info("üí° Dans un syst√®me r√©el, les offres seraient saisies par les fournisseurs ou import√©es automatiquement")
                
                # R√©cup√©ration des fournisseurs invit√©s
                fournisseurs_actifs = get_fournisseurs_actifs()
                try:
                    meta = json.loads(dp_details.get('metadonnees_json', '{}'))
                    fournisseurs_invites_ids = meta.get('fournisseurs_invites', [])
                    fournisseurs_invites = [f for f in fournisseurs_actifs if f['id'] in fournisseurs_invites_ids]
                except:
                    fournisseurs_invites = fournisseurs_actifs[:3]  # Fallback
                
                if not fournisseurs_invites:
                    st.error("Aucun fournisseur invit√© trouv√© pour cette RFQ")
                    return
                
                # G√©n√©ration d'offres fictives pour la d√©mo
                offres_fictives = generer_offres_fictives(dp_details, fournisseurs_invites)
                
                # Interface de modification des offres pour la d√©mo
                st.markdown("**Ajuster les Offres pour la Comparaison :**")
                
                offres_ajustees = []
                for i, offre in enumerate(offres_fictives):
                    with st.expander(f"üìã Offre {offre['fournisseur']['nom']}", expanded=False):
                        col_o1, col_o2, col_o3 = st.columns(3)
                        
                        with col_o1:
                            prix_total = st.number_input(f"Prix Total ($)", 
                                value=offre['prix_total'], 
                                key=f"prix_{i}")
                            
                            delai_livraison = st.number_input(f"D√©lai (jours)", 
                                value=offre['delai_livraison'], 
                                key=f"delai_{i}")
                        
                        with col_o2:
                            note_qualite = st.slider(f"Note Qualit√© (/10)", 
                                0, 10, offre['note_qualite'], 
                                key=f"qualite_{i}")
                            
                            proximite_km = st.number_input(f"Distance (km)", 
                                value=offre['proximite_km'], 
                                key=f"proximite_{i}")
                        
                        with col_o3:
                            experience_secteur = st.slider(f"Exp√©rience (/10)", 
                                0, 10, offre['experience_secteur'], 
                                key=f"experience_{i}")
                            
                            offre_conforme = st.checkbox(f"Offre Conforme", 
                                value=offre['conforme'], 
                                key=f"conforme_{i}")
                        
                        # Conditions sp√©ciales
                        conditions_paiement = st.text_input(f"Conditions Paiement", 
                            value=offre.get('conditions_paiement', '30j net'), 
                            key=f"paiement_{i}")
                        
                        garantie = st.text_input(f"Garantie", 
                            value=offre.get('garantie', '12 mois'), 
                            key=f"garantie_{i}")
                        
                        notes_offre = st.text_area(f"Notes Offre", 
                            value=offre.get('notes', ''), 
                            key=f"notes_{i}")
                        
                        offres_ajustees.append({
                            'fournisseur': offre['fournisseur'],
                            'prix_total': prix_total,
                            'delai_livraison': delai_livraison,
                            'note_qualite': note_qualite,
                            'proximite_km': proximite_km,
                            'experience_secteur': experience_secteur,
                            'conforme': offre_conforme,
                            'conditions_paiement': conditions_paiement,
                            'garantie': garantie,
                            'notes': notes_offre
                        })
                
                # Bouton pour lancer la comparaison
                if st.button("üîÑ Mettre √† Jour la Comparaison", key="update_comparison"):
                    st.session_state.offres_comparaison = offres_ajustees
                    st.rerun()
            
            # TABLEAU COMPARATIF AUTOMATIQUE
            st.markdown("##### üìã Tableau Comparatif Automatique")
            
            offres_a_comparer = st.session_state.get('offres_comparaison', offres_fictives)
            
            if offres_a_comparer:
                # R√©cup√©ration des crit√®res d'√©valuation
                try:
                    meta = json.loads(dp_details.get('metadonnees_json', '{}'))
                    criteres_eval = meta.get('criteres_evaluation', {})
                except:
                    criteres_eval = {
                        'prix': {'actif': True, 'ponderation': 40},
                        'delai': {'actif': True, 'ponderation': 30},
                        'qualite': {'actif': True, 'ponderation': 30}
                    }
                
                # Calcul des scores
                offres_avec_scores = calculer_scores_offres(offres_a_comparer, criteres_eval)
                
                # Cr√©ation du tableau comparatif
                df_comparison = create_comparison_dataframe(offres_avec_scores, criteres_eval)
                
                # Affichage du tableau avec mise en forme
                st.dataframe(df_comparison, use_container_width=True)
                
                # RECOMMANDATION AUTOMATIQUE
                st.markdown("##### üèÜ Recommandation Automatique")
                
                meilleure_offre = max(offres_avec_scores, key=lambda x: x['score_final'])
                
                col_rec1, col_rec2 = st.columns([2, 1])
                
                with col_rec1:
                    st.success(f"""
                    **üèÜ Fournisseur Recommand√© : {meilleure_offre['fournisseur']['nom']}**
                    
                    **Score Final : {meilleure_offre['score_final']:.1f}/100**
                    
                    **Justification de la Recommandation :**
                    """)
                    
                    justification = generer_justification_recommandation(meilleure_offre, offres_avec_scores, criteres_eval)
                    st.markdown(justification)
                
                with col_rec2:
                    # Graphique radar de la meilleure offre
                    fig_radar = create_radar_chart(meilleure_offre, criteres_eval)
                    st.plotly_chart(fig_radar, use_container_width=True)
                
                # ANALYSE COMPARATIVE D√âTAILL√âE
                st.markdown("##### üìä Analyse Comparative D√©taill√©e")
                
                col_graph1, col_graph2 = st.columns(2)
                
                with col_graph1:
                    # Graphique des scores finaux
                    noms_fournisseurs = [offre['fournisseur']['nom'] for offre in offres_avec_scores]
                    scores_finaux = [offre['score_final'] for offre in offres_avec_scores]
                    
                    fig_scores = px.bar(
                        x=noms_fournisseurs, 
                        y=scores_finaux,
                        title="Scores Finaux par Fournisseur",
                        labels={'x': 'Fournisseurs', 'y': 'Score (/100)'},
                        color=scores_finaux,
                        color_continuous_scale='RdYlGn'
                    )
                    fig_scores.update_layout(showlegend=False, height=400)
                    st.plotly_chart(fig_scores, use_container_width=True)
                
                with col_graph2:
                    # Comparaison prix vs d√©lai
                    prix_list = [offre['prix_total'] for offre in offres_avec_scores]
                    delais_list = [offre['delai_livraison'] for offre in offres_avec_scores]
                    
                    fig_scatter = px.scatter(
                        x=prix_list, 
                        y=delais_list,
                        text=noms_fournisseurs,
                        title="Prix vs D√©lai de Livraison",
                        labels={'x': 'Prix Total ($)', 'y': 'D√©lai (jours)'},
                        size=[offre['note_qualite'] for offre in offres_avec_scores],
                        color=scores_finaux,
                        color_continuous_scale='RdYlGn'
                    )
                    fig_scatter.update_traces(textposition="top center")
                    fig_scatter.update_layout(height=400)
                    st.plotly_chart(fig_scatter, use_container_width=True)
                
                # MATRICE DE COMPARAISON D√âTAILL√âE
                st.markdown("##### üìã Matrice de Comparaison D√©taill√©e")
                
                # Cr√©ation d'une matrice pivot pour comparaison
                comparison_matrix = create_detailed_comparison_matrix(offres_avec_scores, criteres_eval)
                
                for critere, data in comparison_matrix.items():
                    with st.expander(f"üìä D√©tail {critere.title()}", expanded=False):
                        col_matrix = st.columns(len(offres_avec_scores) + 1)
                        
                        # En-t√™te
                        with col_matrix[0]:
                            st.markdown("**Fournisseur**")
                        for i, offre in enumerate(offres_avec_scores, 1):
                            with col_matrix[i]:
                                st.markdown(f"**{offre['fournisseur']['nom']}**")
                        
                        # Donn√©es
                        for metric, values in data.items():
                            with col_matrix[0]:
                                st.text(metric)
                            for i, value in enumerate(values, 1):
                                with col_matrix[i]:
                                    if isinstance(value, (int, float)):
                                        if metric == "Score":
                                            color = "üü¢" if value >= 80 else "üü°" if value >= 60 else "üî¥"
                                            st.text(f"{color} {value:.1f}")
                                        else:
                                            st.text(f"{value:,.2f}" if isinstance(value, float) else str(value))
                                    else:
                                        st.text(str(value))
                
                # ACTIONS POUR S√âLECTION
                st.markdown("---")
                st.markdown("##### ‚ö° Actions")
                
                col_action1, col_action2, col_action3 = st.columns(3)
                
                with col_action1:
                    if st.button("üèÜ S√©lectionner le Gagnant Recommand√©", use_container_width=True, key="select_recommended"):
                        st.session_state.selected_dp_winner = dp_selected_id
                        st.session_state.winner_details = meilleure_offre
                        st.session_state.form_action = "select_winner"
                        st.rerun()
                
                with col_action2:
                    fournisseur_manuel = st.selectbox("Ou s√©lectionner manuellement",
                        options=[offre['fournisseur']['id'] for offre in offres_avec_scores],
                        format_func=lambda x: next((offre['fournisseur']['nom'] for offre in offres_avec_scores if offre['fournisseur']['id'] == x), ""))
                    
                    if st.button("üéØ S√©lectionner Manuellement", use_container_width=True, key="select_manual"):
                        offre_selectionnee = next((offre for offre in offres_avec_scores if offre['fournisseur']['id'] == fournisseur_manuel), None)
                        if offre_selectionnee:
                            st.session_state.selected_dp_winner = dp_selected_id
                            st.session_state.winner_details = offre_selectionnee
                            st.session_state.form_action = "select_winner"
                            st.rerun()
                
                with col_action3:
                    if st.button("üìã Retour Liste RFQ", use_container_width=True, key="back_to_list"):
                        st.session_state.form_action = "list_demandes_actives"
                        st.rerun()

# =============================================================================
# S√âLECTION DU GAGNANT ET CONVERSION
# =============================================================================

def render_select_winner(gestionnaire):
    """Interface de s√©lection du gagnant - CONVERSION DP ‚Üí BC"""
    st.markdown("#### üèÜ S√©lection du Fournisseur Gagnant")
    
    # R√©cup√©ration de la RFQ s√©lectionn√©e
    dp_id = st.session_state.get('selected_dp_winner')
    winner_details = st.session_state.get('winner_details')
    
    if not dp_id:
        st.error("Aucune RFQ s√©lectionn√©e pour d√©signation du gagnant.")
        return
    
    dp_details = gestionnaire.get_formulaire_details(dp_id)
    
    if not dp_details:
        st.error("RFQ introuvable.")
        return
    
    # Affichage des d√©tails de la RFQ
    st.markdown("##### üìã RFQ √† Finaliser")
    
    col_rfq1, col_rfq2 = st.columns(2)
    with col_rfq1:
        st.info(f"""
        **N¬∞ RFQ :** {dp_details['numero_document']}
        **Statut :** {dp_details['statut']}
        **Responsable :** {dp_details.get('employee_nom', 'N/A')}
        **Date √©ch√©ance :** {dp_details.get('date_echeance', 'N/A')}
        """)
    
    with col_rfq2:
        try:
            meta = json.loads(dp_details.get('metadonnees_json', '{}'))
            nb_fournisseurs = len(meta.get('fournisseurs_invites', []))
        except:
            nb_fournisseurs = 0
        
        st.info(f"""
        **Fournisseurs invit√©s :** {nb_fournisseurs}
        **Type RFQ :** {meta.get('type_rfq', 'N/A')}
        **Articles :** {len(dp_details.get('lignes', []))}
        **Montant estim√© :** {dp_details.get('montant_total', 0):,.2f}$ CAD
        """)
    
    # Affichage du gagnant recommand√© ou s√©lectionn√©
    if winner_details:
        st.markdown("##### üèÜ Fournisseur Gagnant S√©lectionn√©")
        
        col_winner1, col_winner2 = st.columns(2)
        with col_winner1:
            st.success(f"""
            **Fournisseur Gagnant :** {winner_details['fournisseur']['nom']}
            **Score Final :** {winner_details.get('score_final', 'N/A')}/100
            **Prix Total :** {winner_details['prix_total']:,.2f}$ CAD
            **D√©lai Livraison :** {winner_details['delai_livraison']} jours
            """)
        
        with col_winner2:
            st.info(f"""
            **Note Qualit√© :** {winner_details['note_qualite']}/10
            **Conditions Paiement :** {winner_details.get('conditions_paiement', 'N/A')}
            **Garantie :** {winner_details.get('garantie', 'N/A')}
            **Distance :** {winner_details.get('proximite_km', 'N/A')} km
            """)
    
    # Formulaire de finalisation
    with st.form("selection_gagnant_form"):
        st.markdown("##### üîß Finalisation de la S√©lection")
        
        # Justification de la s√©lection
        justification_selection = st.text_area("Justification de la S√©lection *",
            value=generer_justification_selection_automatique(winner_details) if winner_details else "",
            height=120,
            help="Expliquez pourquoi ce fournisseur a √©t√© choisi")
        
        # Conditions n√©goci√©es finales
        col_neg1, col_neg2 = st.columns(2)
        
        with col_neg1:
            prix_final_negocie = st.number_input("Prix Final N√©goci√© ($)",
                value=winner_details['prix_total'] if winner_details else 0.0,
                format="%.2f")
            
            delai_final_negocie = st.number_input("D√©lai Final N√©goci√© (jours)",
                value=winner_details['delai_livraison'] if winner_details else 14)
            
            conditions_paiement_finales = st.text_input("Conditions Paiement Finales",
                value=winner_details.get('conditions_paiement', '30 jours net') if winner_details else '30 jours net')
        
        with col_neg2:
            garantie_finale = st.text_input("Garantie Finale",
                value=winner_details.get('garantie', '12 mois') if winner_details else '12 mois')
            
            conditions_speciales = st.text_area("Conditions Sp√©ciales N√©goci√©es",
                placeholder="Conditions particuli√®res obtenues lors de la n√©gociation...")
            
            date_debut_souhaite = st.date_input("Date D√©but Souhait√©e",
                value=datetime.now().date() + timedelta(days=3))
        
        # Conversion automatique en Bon de Commande
        st.markdown("##### üîÑ Conversion Automatique en Bon de Commande")
        
        col_conv1, col_conv2 = st.columns(2)
        
        with col_conv1:
            numero_bc_auto = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc_auto, disabled=True)
            
            date_livraison_bc = st.date_input("Date Livraison BC",
                value=date_debut_souhaite + timedelta(days=delai_final_negocie))
            
            priorite_bc = st.selectbox("Priorit√© BC", gestionnaire.priorites, 
                index=gestionnaire.priorites.index(dp_details.get('priorite', 'NORMAL')))
        
        with col_conv2:
            statut_bc_initial = st.selectbox("Statut BC Initial", 
                ['VALID√â', 'ENVOY√â'], index=1)
            
            notification_autres_fournisseurs = st.checkbox("Notifier les Autres Fournisseurs", value=True)
            
            archivage_offres_perdantes = st.checkbox("Archiver Offres Non Retenues", value=True)
        
        # Informations de livraison pour le BC
        st.markdown("##### üöö Informations Livraison BC")
        
        try:
            meta = json.loads(dp_details.get('metadonnees_json', '{}'))
            livraison_lieu_default = meta.get('livraison_lieu', 'DG Inc. - 123 Rue Industrielle, Montr√©al')
        except:
            livraison_lieu_default = 'DG Inc. - 123 Rue Industrielle, Montr√©al'
        
        col_liv1, col_liv2 = st.columns(2)
        with col_liv1:
            adresse_livraison_bc = st.text_area("Adresse Livraison",
                value=livraison_lieu_default)
            contact_reception_bc = st.text_input("Contact R√©ception",
                placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison_bc = st.text_input("Horaires Livraison",
                value="Lundi-Vendredi 8h-16h")
            instructions_livraison_bc = st.text_area("Instructions Livraison",
                placeholder="Instructions sp√©ciales pour la livraison...")
        
        # Notes finales
        notes_finales = st.text_area("Notes Finales de Conversion",
            value=f"BC g√©n√©r√© automatiquement depuis RFQ {dp_details['numero_document']} - Fournisseur s√©lectionn√© : {winner_details['fournisseur']['nom'] if winner_details else '√Ä d√©finir'}")
        
        # Validation finale
        st.markdown("---")
        confirmation_selection = st.checkbox("Je confirme la s√©lection de ce fournisseur et la conversion en Bon de Commande")
        
        # Boutons de soumission
        col_submit1, col_submit2 = st.columns(2)
        
        with col_submit1:
            submit_selection = st.form_submit_button("üèÜ Finaliser S√©lection et Cr√©er BC", 
                                                   use_container_width=True, key="finalize_selection")
        
        with col_submit2:
            submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="cancel_selection")
        
        # Traitement de la soumission
        if submit_selection and confirmation_selection:
            if not justification_selection:
                st.error("‚ùå La justification de la s√©lection est obligatoire")
            elif not winner_details:
                st.error("‚ùå Aucun fournisseur gagnant s√©lectionn√©")
            else:
                try:
                    # Mise √† jour du statut de la RFQ
                    gestionnaire.modifier_statut_formulaire(dp_id, 'TERMIN√â', 
                                                           dp_details.get('employee_id'),
                                                           f"RFQ finalis√©e - Gagnant : {winner_details['fournisseur']['nom']}")
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'dp_source_id': dp_id,
                        'dp_source_numero': dp_details['numero_document'],
                        'fournisseur_gagnant': winner_details['fournisseur'],
                        'conditions_negociees': {
                            'prix_final': prix_final_negocie,
                            'delai_final': delai_final_negocie,
                            'conditions_paiement': conditions_paiement_finales,
                            'garantie': garantie_finale,
                            'conditions_speciales': conditions_speciales
                        },
                        'justification_selection': justification_selection,
                        'score_gagnant': winner_details.get('score_final'),
                        'adresse_livraison': adresse_livraison_bc,
                        'contact_reception': contact_reception_bc,
                        'horaires_livraison': horaires_livraison_bc,
                        'instructions_livraison': instructions_livraison_bc,
                        'conversion_automatique_rfq': True
                    }
                    
                    # Construction des notes BC
                    notes_bc = f"""=== BON DE COMMANDE DEPUIS RFQ ===
G√©n√©r√© depuis RFQ : {dp_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}
Fournisseur s√©lectionn√© : {winner_details['fournisseur']['nom']}

=== JUSTIFICATION S√âLECTION ===
{justification_selection}

=== CONDITIONS N√âGOCI√âES ===
Prix final : {prix_final_negocie:,.2f}$ CAD
D√©lai : {delai_final_negocie} jours
Paiement : {conditions_paiement_finales}
Garantie : {garantie_finale}
Conditions sp√©ciales : {conditions_speciales or 'Aucune'}

=== LIVRAISON ===
Adresse : {adresse_livraison_bc.replace(chr(10), ' - ')}
Contact : {contact_reception_bc}
Horaires : {horaires_livraison_bc}
Instructions : {instructions_livraison_bc or 'Aucune'}

=== HISTORIQUE RFQ ===
{dp_details.get('notes', '')}

=== NOTES FINALES ===
{notes_finales}"""
                    
                    # Mise √† jour des lignes avec prix n√©goci√©s
                    lignes_bc = []
                    for ligne in dp_details.get('lignes', []):
                        ligne_bc = ligne.copy()
                        # R√©partir proportionnellement le prix final n√©goci√©
                        if prix_final_negocie > 0 and len(dp_details.get('lignes', [])) > 0:
                            ligne_bc['prix_unitaire'] = prix_final_negocie / sum(l['quantite'] for l in dp_details.get('lignes', []))
                        lignes_bc.append(ligne_bc)
                    
                    # Donn√©es du BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc_auto,
                        'project_id': dp_details.get('project_id'),
                        'company_id': winner_details['fournisseur']['id'],
                        'employee_id': dp_details.get('employee_id'),
                        'statut': statut_bc_initial,
                        'priorite': priorite_bc,
                        'date_creation': datetime.now().date(),
                        'date_echeance': date_livraison_bc,
                        'montant_total': prix_final_negocie,
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': lignes_bc
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Enregistrement de la s√©lection dans l'historique RFQ
                        gestionnaire.enregistrer_validation(
                            dp_id,
                            dp_details.get('employee_id'),
                            'SELECTION_GAGNANT',
                            f"Fournisseur gagnant : {winner_details['fournisseur']['nom']} - Score : {winner_details.get('score_final', 'N/A')}/100 - BC g√©n√©r√© : {numero_bc_auto}"
                        )
                        
                        st.success(f"""
                        ‚úÖ **S√©lection Finalis√©e avec Succ√®s !**
                        
                        üèÜ **Fournisseur Gagnant :** {winner_details['fournisseur']['nom']}
                        üí∞ **Prix Final :** {prix_final_negocie:,.2f}$ CAD
                        üì¶ **Bon de Commande :** {numero_bc_auto} cr√©√©
                        üìÖ **Livraison pr√©vue :** {date_livraison_bc.strftime('%d/%m/%Y')}
                        """)
                        
                        # Notifications autres fournisseurs (simulation)
                        if notification_autres_fournisseurs:
                            try:
                                meta = json.loads(dp_details.get('metadonnees_json', '{}'))
                                autres_fournisseurs = [f_id for f_id in meta.get('fournisseurs_invites', []) 
                                                     if f_id != winner_details['fournisseur']['id']]
                                if autres_fournisseurs:
                                    st.info(f"üìß Notifications envoy√©es √† {len(autres_fournisseurs)} autre(s) fournisseur(s)")
                            except:
                                pass
                        
                        # Actions suivantes
                        col_next1, col_next2, col_next3 = st.columns(3)
                        
                        with col_next1:
                            if st.button("üìã Voir BC Cr√©√©", use_container_width=True, key="voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                        
                        with col_next2:
                            if st.button("üì¶ Liste BCs", use_container_width=True, key="liste_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        
                        with col_next3:
                            if st.button("üí∞ Nouvelles RFQs", use_container_width=True, key="nouvelles_rfq"):
                                st.session_state.form_action = "list_demandes_actives"
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                        
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de la finalisation : {e}")
        
        elif submit_annuler:
            st.session_state.form_action = "compare_offers"
            st.rerun()

# =============================================================================
# FONCTIONS UTILITAIRES POUR LES DEMANDES DE PRIX
# =============================================================================

def get_demandes_prix_actives(gestionnaire):
    """R√©cup√®re les demandes de prix en cours"""
    try:
        return [dp for dp in gestionnaire.get_formulaires('DEMANDE_PRIX') 
                if dp['statut'] in ['VALID√â', 'ENVOY√â']]
    except:
        return []

def get_note_fournisseur(fournisseur):
    """Calcule une note fictive pour un fournisseur"""
    # Dans un vrai syst√®me, cette note viendrait de l'historique des √©valuations
    import hashlib
    hash_val = int(hashlib.md5(str(fournisseur['id']).encode()).hexdigest()[:8], 16)
    return (hash_val % 5) + 6  # Note entre 6 et 10

def select_fournisseurs_recommandes(fournisseurs, nb_max=4):
    """S√©lectionne automatiquement les meilleurs fournisseurs"""
    # Tri par note (fictive) et diversit√© secteur
    fournisseurs_notes = []
    for f in fournisseurs:
        note = get_note_fournisseur(f)
        fournisseurs_notes.append((f, note))
    
    # Tri par note d√©croissante
    fournisseurs_notes.sort(key=lambda x: x[1], reverse=True)
    
    # S√©lection avec diversit√©
    selectionnes = []
    secteurs_vus = set()
    
    for f, note in fournisseurs_notes:
        if len(selectionnes) >= nb_max:
            break
        
        secteur = f.get('secteur', 'N/A')
        # Privil√©gier la diversit√© des secteurs
        if secteur not in secteurs_vus or len(selectionnes) < 2:
            selectionnes.append(f)
            secteurs_vus.add(secteur)
    
    # Compl√©ter si pas assez
    for f, note in fournisseurs_notes:
        if len(selectionnes) >= nb_max:
            break
        if f not in selectionnes:
            selectionnes.append(f)
    
    return selectionnes[:nb_max]

def generer_offres_fictives(dp_details, fournisseurs):
    """G√©n√®re des offres fictives pour la d√©mo"""
    import random
    
    offres = []
    base_price = random.uniform(10000, 50000)
    
    for i, fournisseur in enumerate(fournisseurs):
        # Variation de prix selon la "qualit√©" du fournisseur
        note_qualite = get_note_fournisseur(fournisseur)
        price_factor = 1.0 + (10 - note_qualite) * 0.05  # Meilleure qualit√© = prix plus √©lev√©
        
        offre = {
            'fournisseur': fournisseur,
            'prix_total': round(base_price * price_factor * random.uniform(0.9, 1.1), 2),
            'delai_livraison': random.randint(7, 28),
            'note_qualite': note_qualite,
            'proximite_km': random.randint(10, 500),
            'experience_secteur': random.randint(5, 10),
            'conforme': random.choice([True, True, True, False]),  # 75% conformes
            'conditions_paiement': random.choice(['30j net', '45j net', '15j net']),
            'garantie': random.choice(['12 mois', '24 mois', '6 mois']),
            'notes': f"Offre standard de {fournisseur['nom']}"
        }
        offres.append(offre)
    
    return offres

def calculer_scores_offres(offres, criteres_eval):
    """Calcule les scores pond√©r√©s des offres"""
    # Normalisation des crit√®res (0-100)
    if not offres:
        return []
    
    # Prix : plus bas = meilleur score
    prix_list = [o['prix_total'] for o in offres if o['conforme']]
    if prix_list:
        prix_min = min(prix_list)
        prix_max = max(prix_list)
    
    # D√©lai : plus court = meilleur score  
    delai_list = [o['delai_livraison'] for o in offres if o['conforme']]
    if delai_list:
        delai_min = min(delai_list)
        delai_max = max(delai_list)
    
    # Proximit√© : plus proche = meilleur score
    proximite_list = [o['proximite_km'] for o in offres if o['conforme']]
    if proximite_list:
        proximite_min = min(proximite_list)
        proximite_max = max(proximite_list)
    
    offres_avec_scores = []
    
    for offre in offres:
        if not offre['conforme']:
            # Offres non conformes = score 0
            score_final = 0
        else:
            scores = {}
            
            # Score Prix (invers√© : prix bas = score √©lev√©)
            if criteres_eval.get('prix', {}).get('actif') and prix_list:
                if prix_max > prix_min:
                    score_prix = 100 * (prix_max - offre['prix_total']) / (prix_max - prix_min)
                else:
                    score_prix = 100
                scores['prix'] = score_prix
            
            # Score D√©lai (invers√© : d√©lai court = score √©lev√©)
            if criteres_eval.get('delai', {}).get('actif') and delai_list:
                if delai_max > delai_min:
                    score_delai = 100 * (delai_max - offre['delai_livraison']) / (delai_max - delai_min)
                else:
                    score_delai = 100
                scores['delai'] = score_delai
            
            # Score Qualit√© (direct)
            if criteres_eval.get('qualite', {}).get('actif'):
                scores['qualite'] = offre['note_qualite'] * 10
            
            # Score Proximit√© (invers√© : proche = score √©lev√©)
            if criteres_eval.get('proximite', {}).get('actif') and proximite_list:
                if proximite_max > proximite_min:
                    score_proximite = 100 * (proximite_max - offre['proximite_km']) / (proximite_max - proximite_min)
                else:
                    score_proximite = 100
                scores['proximite'] = score_proximite
            
            # Score Exp√©rience (direct)
            if criteres_eval.get('experience', {}).get('actif'):
                scores['experience'] = offre['experience_secteur'] * 10
            
            # Calcul score final pond√©r√©
            score_final = 0
            total_ponderation = 0
            
            for critere, data in criteres_eval.items():
                if data.get('actif') and critere in scores:
                    score_final += scores[critere] * data['ponderation'] / 100
                    total_ponderation += data['ponderation']
            
            if total_ponderation > 0:
                score_final = score_final * 100 / total_ponderation
            
            offre['scores_details'] = scores
        
        offre['score_final'] = score_final
        offres_avec_scores.append(offre)
    
    return offres_avec_scores

def create_comparison_dataframe(offres_avec_scores, criteres_eval):
    """Cr√©e un DataFrame pour l'affichage comparatif"""
    data = []
    
    for offre in offres_avec_scores:
        row = {
            'Fournisseur': offre['fournisseur']['nom'],
            'Prix Total ($)': f"{offre['prix_total']:,.2f}",
            'D√©lai (jours)': offre['delai_livraison'],
            'Note Qualit√© (/10)': offre['note_qualite'],
            'Distance (km)': offre['proximite_km'],
            'Exp√©rience (/10)': offre['experience_secteur'],
            'Conforme': '‚úÖ' if offre['conforme'] else '‚ùå',
            'Score Final (/100)': f"{offre['score_final']:.1f}",
            'Conditions': offre.get('conditions_paiement', 'N/A'),
            'Garantie': offre.get('garantie', 'N/A')
        }
        data.append(row)
    
    return pd.DataFrame(data)

def create_radar_chart(offre, criteres_eval):
    """Cr√©e un graphique radar pour une offre"""
    categories = []
    values = []
    
    for critere, data in criteres_eval.items():
        if data.get('actif'):
            categories.append(critere.title())
            score = offre.get('scores_details', {}).get(critere, 0)
            values.append(score)
    
    # Fermer le radar
    categories.append(categories[0])
    values.append(values[0])
    
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name=offre['fournisseur']['nom'],
        line_color='rgb(32, 201, 151)'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )),
        showlegend=True,
        title=f"Profil {offre['fournisseur']['nom']}",
        height=300
    )
    
    return fig

def generer_justification_recommandation(meilleure_offre, toutes_offres, criteres_eval):
    """G√©n√®re une justification automatique de la recommandation"""
    justification = []
    
    # Avantages principaux
    score_final = meilleure_offre['score_final']
    justification.append(f"‚Ä¢ **Score global de {score_final:.1f}/100**, le plus √©lev√© parmi toutes les offres")
    
    # Analyse par crit√®re
    scores_details = meilleure_offre.get('scores_details', {})
    
    if 'prix' in scores_details and criteres_eval.get('prix', {}).get('actif'):
        score_prix = scores_details['prix']
        if score_prix > 70:
            justification.append(f"‚Ä¢ **Prix comp√©titif** (score: {score_prix:.0f}/100)")
        elif score_prix > 40:
            justification.append(f"‚Ä¢ Prix correct (score: {score_prix:.0f}/100)")
    
    if 'delai' in scores_details and criteres_eval.get('delai', {}).get('actif'):
        score_delai = scores_details['delai']
        if score_delai > 70:
            justification.append(f"‚Ä¢ **D√©lai de livraison excellent** ({meilleure_offre['delai_livraison']} jours)")
        elif score_delai > 40:
            justification.append(f"‚Ä¢ D√©lai de livraison acceptable ({meilleure_offre['delai_livraison']} jours)")
    
    if 'qualite' in scores_details and criteres_eval.get('qualite', {}).get('actif'):
        note_qualite = meilleure_offre['note_qualite']
        if note_qualite >= 8:
            justification.append(f"‚Ä¢ **Excellente r√©putation qualit√©** ({note_qualite}/10)")
        elif note_qualite >= 6:
            justification.append(f"‚Ä¢ Bonne r√©putation qualit√© ({note_qualite}/10)")
    
    # Comparaison avec les concurrents
    autres_scores = [o['score_final'] for o in toutes_offres if o != meilleure_offre and o['conforme']]
    if autres_scores:
        ecart_moyen = score_final - (sum(autres_scores) / len(autres_scores))
        if ecart_moyen > 10:
            justification.append(f"‚Ä¢ **Nettement sup√©rieur** aux autres offres (+{ecart_moyen:.1f} points en moyenne)")
        elif ecart_moyen > 5:
            justification.append(f"‚Ä¢ Sup√©rieur aux autres offres (+{ecart_moyen:.1f} points en moyenne)")
    
    # Conditions avantageuses
    conditions = meilleure_offre.get('conditions_paiement', '')
    if '45j' in conditions or '60j' in conditions:
        justification.append(f"‚Ä¢ Conditions de paiement avantageuses ({conditions})")
    
    garantie = meilleure_offre.get('garantie', '')
    if '24' in garantie:
        justification.append(f"‚Ä¢ Garantie √©tendue ({garantie})")
    
    return '\n'.join(justification)

def create_detailed_comparison_matrix(offres_avec_scores, criteres_eval):
    """Cr√©e une matrice de comparaison d√©taill√©e"""
    matrix = {}
    
    # Prix
    if criteres_eval.get('prix', {}).get('actif'):
        matrix['Prix'] = {
            'Montant ($)': [f"{o['prix_total']:,.2f}" for o in offres_avec_scores],
            'Score': [o.get('scores_details', {}).get('prix', 0) for o in offres_avec_scores],
            'Rang': []
        }
        # Calcul du rang
        prix_sorted = sorted([(i, o['prix_total']) for i, o in enumerate(offres_avec_scores) if o['conforme']], key=lambda x: x[1])
        rang_prix = [0] * len(offres_avec_scores)
        for rang, (idx, _) in enumerate(prix_sorted, 1):
            rang_prix[idx] = rang
        matrix['Prix']['Rang'] = rang_prix
    
    # D√©lai
    if criteres_eval.get('delai', {}).get('actif'):
        matrix['D√©lai'] = {
            'Jours': [o['delai_livraison'] for o in offres_avec_scores],
            'Score': [o.get('scores_details', {}).get('delai', 0) for o in offres_avec_scores]
        }
    
    # Qualit√©
    if criteres_eval.get('qualite', {}).get('actif'):
        matrix['Qualit√©'] = {
            'Note (/10)': [o['note_qualite'] for o in offres_avec_scores],
            'Score': [o.get('scores_details', {}).get('qualite', 0) for o in offres_avec_scores]
        }
    
    return matrix

def generer_justification_selection_automatique(winner_details):
    """G√©n√®re une justification automatique pour la s√©lection"""
    if not winner_details:
        return ""
    
    justification = f"""S√©lection du fournisseur {winner_details['fournisseur']['nom']} bas√©e sur les crit√®res suivants :

SCORE GLOBAL : {winner_details.get('score_final', 0):.1f}/100 - Meilleure offre parmi les candidats

AVANTAGES IDENTIFI√âS :
‚Ä¢ Prix propos√© : {winner_details['prix_total']:,.2f}$ CAD
‚Ä¢ D√©lai de livraison : {winner_details['delai_livraison']} jours
‚Ä¢ Note qualit√© fournisseur : {winner_details['note_qualite']}/10
‚Ä¢ Conditions : {winner_details.get('conditions_paiement', 'N/A')}
‚Ä¢ Garantie : {winner_details.get('garantie', 'N/A')}

CONFORMIT√â : Offre conforme √† toutes les exigences du cahier des charges

Cette s√©lection optimise le rapport qualit√©-prix-d√©lai selon les crit√®res pond√©r√©s d√©finis dans la RFQ."""
    
    return justification

# Fonction de rendu des autres sections (simplifi√©es pour la d√©mo)
def render_demande_prix_stats(gestionnaire):
    """Statistiques des Demandes de Prix"""
    st.markdown("#### üìä Statistiques Demandes de Prix")
    
    demandes_prix = gestionnaire.get_formulaires('DEMANDE_PRIX')
    
    if not demandes_prix:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques de base
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üí∞ Total RFQs", len(demandes_prix))
    with col2:
        finalisees = len([dp for dp in demandes_prix if dp['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Finalis√©es", finalisees)
    with col3:
        en_cours = len([dp for dp in demandes_prix if dp['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üì§ En Cours", en_cours)
    with col4:
        taux_succes = (finalisees / len(demandes_prix) * 100) if demandes_prix else 0
        st.metric("üìà Taux Succ√®s", f"{taux_succes:.1f}%")
    
    # Graphiques simples
    if len(demandes_prix) > 0:
        col_g1, col_g2 = st.columns(2)
        
        with col_g1:
            # R√©partition par statut
            statut_counts = {}
            for dp in demandes_prix:
                statut = dp['statut']
                statut_counts[statut] = statut_counts.get(statut, 0) + 1
            
            if statut_counts:
                fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                            title="R√©partition par Statut RFQ")
                st.plotly_chart(fig, use_container_width=True)
        
        with col_g2:
            # √âvolution mensuelle
            evolution = {}
            for dp in demandes_prix:
                try:
                    mois = dp['date_creation'][:7]
                    evolution[mois] = evolution.get(mois, 0) + 1
                except:
                    continue
            
            if evolution:
                mois_sorted = sorted(evolution.items())
                df_evol = pd.DataFrame(mois_sorted, columns=['Mois', 'Nombre'])
                fig = px.line(df_evol, x='Mois', y='Nombre', title="√âvolution Mensuelle RFQ")
                st.plotly_chart(fig, use_container_width=True)

def render_historique_rfq(gestionnaire):
    """Historique des RFQ"""
    st.markdown("#### üìã Historique des RFQ")
    st.info("üöß Interface historique RFQ - Fonctionnalit√© avanc√©e")

def render_templates_demande_prix(gestionnaire):
    """Templates de DP"""
    st.markdown("#### ‚öôÔ∏è Templates Demandes de Prix")
    st.info("üöß Gestion templates RFQ - Fonctionnalit√© avanc√©e")

def render_performance_fournisseurs(gestionnaire):
    """Performance des fournisseurs"""
    st.markdown("#### üìà Performance Fournisseurs")
    st.info("üöß Analyse performance fournisseurs - Fonctionnalit√© avanc√©e")

# =============================================================================
# MODULE ESTIMATIONS (EST) - INTERFACE COMPL√àTE
# Devis Clients Professionnels avec Calculs Automatiques
# =============================================================================

def render_estimations_tab(gestionnaire):
    """Interface compl√®te pour les Estimations - Devis Clients"""
    st.markdown("### üìä Estimations")
    
    # Alerte pour projets sans estimation
    projets_sans_estimation = get_projets_sans_estimation()
    if projets_sans_estimation:
        st.info(f"üí° {len(projets_sans_estimation)} projet(s) pourrait(ent) b√©n√©ficier d'une estimation")
    
    # Actions principales EST
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouvelle Estimation", use_container_width=True, key="est_nouveau"):
            st.session_state.form_action = "create_estimation"
    with col_action2:
        if st.button("üìã Devis Actifs", use_container_width=True, key="est_liste"):
            st.session_state.form_action = "list_estimations_actives"
    with col_action3:
        if st.button("üîÑ Gestion Versions", use_container_width=True, key="est_versions"):
            st.session_state.form_action = "manage_versions"
    with col_action4:
        if st.button("‚úÖ Accept√©es", use_container_width=True, key="est_acceptees"):
            st.session_state.form_action = "estimations_acceptees"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Analyse Rentabilit√©", use_container_width=True, key="est_rentabilite"):
            st.session_state.form_action = "analyse_rentabilite"
    with col_action6:
        if st.button("üìã Templates Industrie", use_container_width=True, key="est_templates"):
            st.session_state.form_action = "templates_estimations"
    with col_action7:
        if st.button("üìà Suivi Commercial", use_container_width=True, key="est_suivi"):
            st.session_state.form_action = "suivi_commercial"
    with col_action8:
        if st.button("üí∞ Analyse Marges", use_container_width=True, key="est_marges"):
            st.session_state.form_action = "analyse_marges"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_estimations_actives')
    
    if action == "create_estimation":
        render_estimation_form(gestionnaire)
    elif action == "list_estimations_actives":
        render_estimation_list(gestionnaire)
    elif action == "manage_versions":
        render_manage_versions(gestionnaire)
    elif action == "estimations_acceptees":
        render_estimations_acceptees(gestionnaire)
    elif action == "analyse_rentabilite":
        render_analyse_rentabilite(gestionnaire)
    elif action == "templates_estimations":
        render_templates_estimations(gestionnaire)
    elif action == "suivi_commercial":
        render_suivi_commercial(gestionnaire)
    elif action == "analyse_marges":
        render_analyse_marges(gestionnaire)

# =============================================================================
# FORMULAIRE CR√âATION ESTIMATION AVEC CALCULS AUTOMATIQUES
# =============================================================================

def render_estimation_form(gestionnaire):
    """Formulaire de cr√©ation d'Estimation Client avec calculs automatiques"""
    st.markdown("#### ‚ûï Nouvelle Estimation Client")
    
    with st.form("estimation_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_est = gestionnaire.generer_numero_document('ESTIMATION')
            st.text_input("N¬∞ Estimation", value=numero_est, disabled=True)
            
            # S√©lection CLIENT (direction inverse vs fournisseurs)
            clients_disponibles = get_clients_actifs()
            client_options = [("", "S√©lectionner un client")] + [(c['id'], f"{c['nom']} - {c['secteur']}") for c in clients_disponibles]
            client_id = st.selectbox(
                "Client *",
                options=[c[0] for c in client_options],
                format_func=lambda x: next((c[1] for c in client_options if c[0] == x), ""),
                help="Client pour lequel √©tablir le devis"
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            # Commercial responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un commercial")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Commercial Responsable *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
        
        # SP√âCIFICIT√âS EST - PARAM√àTRES DU DEVIS
        st.markdown("##### üéØ Param√®tres du Devis")
        col_est1, col_est2 = st.columns(2)
        
        with col_est1:
            template_industrie = st.selectbox("Template Industrie *", 
                ["AUTOMOBILE", "AERONAUTIQUE", "CONSTRUCTION", "GENERAL"],
                help="Le template d√©termine les coefficients et marges automatiques")
            
            validite_devis = st.number_input("Validit√© Devis (jours)", 
                min_value=15, value=30, max_value=90,
                help="Dur√©e pendant laquelle le devis reste valide")
            
            type_estimation = st.selectbox("Type d'Estimation",
                ["Devis Standard", "Estimation Rapide", "Appel d'Offres", "R√©vision"])
        
        with col_est2:
            marge_beneficiaire = st.slider("Marge B√©n√©ficiaire (%)", 5, 50, 
                get_marge_defaut_template(template_industrie),
                help="Marge b√©n√©ficiaire selon le template s√©lectionn√©")
            
            devise_devis = st.selectbox("Devise", ["CAD", "USD", "EUR"])
            
            conditions_paiement_client = st.selectbox("Conditions Paiement",
                ["30 jours net", "50% avance + 50% livraison", "√Ä r√©ception", "60 jours net"])
        
        # Projet existant ou nouveau
        st.markdown("##### üè¢ Client et Projet")
        
        if client_id:
            projets_client = get_projets_client(client_id)
            if projets_client:
                col_proj1, col_proj2 = st.columns(2)
                with col_proj1:
                    base_sur_projet = st.checkbox("Baser sur Projet Existant",
                        help="Utiliser un projet existant pour les calculs automatiques")
                with col_proj2:
                    if base_sur_projet:
                        projet_base_id = st.selectbox("Projet de Base",
                            options=[p['id'] for p in projets_client],
                            format_func=lambda x: next((f"{p['nom_projet']}" for p in projets_client if p['id'] == x), ""))
                    else:
                        projet_base_id = None
            else:
                st.info("Ce client n'a pas de projets existants. L'estimation sera cr√©√©e manuellement.")
                base_sur_projet = False
                projet_base_id = None
        else:
            base_sur_projet = False
            projet_base_id = None
        
        # CALCULS AUTOMATIQUES AVANC√âS (SP√âCIFICIT√â EST)
        st.markdown("##### üî¢ Calculs Automatiques")
        
        if st.checkbox("Activer Calculs Automatiques", value=True):
            if projet_base_id:
                # Calculs bas√©s sur projet existant
                calculs_auto = calculer_estimation_automatique(projet_base_id, marge_beneficiaire, template_industrie)
                
                if calculs_auto:
                    col_calc1, col_calc2, col_calc3 = st.columns(3)
                    with col_calc1:
                        st.metric("Co√ªt Mat√©riaux", f"{calculs_auto['cout_materiaux']:,.2f}$ {devise_devis}")
                        st.metric("Co√ªt Main d'≈íuvre", f"{calculs_auto['cout_main_oeuvre']:,.2f}$ {devise_devis}")
                    with col_calc2:
                        st.metric("Co√ªt Direct", f"{calculs_auto['cout_direct']:,.2f}$ {devise_devis}")
                        st.metric("Frais G√©n√©raux (20%)", f"{calculs_auto['cout_indirect']:,.2f}$ {devise_devis}")
                    with col_calc3:
                        st.metric("Marge B√©n√©ficiaire", f"{calculs_auto['marge']:,.2f}$ {devise_devis}")
                        st.metric("Prix HT", f"{calculs_auto['prix_HT']:,.2f}$ {devise_devis}")
                    
                    st.success(f"üí∞ **PRIX TOTAL TTC : {calculs_auto['prix_TTC']:,.2f}$ {devise_devis}**")
                    
                    # Affichage du d√©tail template
                    template_info = get_template_info(template_industrie)
                    st.info(f"""
                    **Template {template_industrie}** : 
                    Coefficient complexit√©: {template_info['coefficient_complexite']} | 
                    Certification: {template_info['cout_certification_pct']}% | 
                    D√©lai standard: {template_info['delai_standard']} jours
                    """)
                else:
                    st.error("‚ùå Erreur dans les calculs automatiques")
            else:
                st.info("S√©lectionnez un projet de base pour activer les calculs automatiques")
        
        # Articles/Services du devis (avec ou sans calculs auto)
        st.markdown("##### üì¶ Articles/Services du Devis")
        
        # Interface similaire aux autres formulaires mais adapt√©e pour devis client
        col_desc, col_qty, col_unit, col_price, col_marge = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. HT**")
        with col_marge:
            st.markdown("**Marge %**")
        
        lignes_estimation = []
        prix_total_manuel = 0
        
        for i in range(6):  # 6 lignes
            col_desc, col_qty, col_unit, col_price, col_marge = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"est_desc_{i}", placeholder="Description article/service")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"est_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "H", "J", "M¬≤", "KG", "SERVICE"], key=f"est_unit_{i}")
            with col_price:
                prix_ht = st.number_input("", min_value=0.0, key=f"est_price_{i}", format="%.2f", step=0.01)
            with col_marge:
                marge_ligne = st.number_input("", min_value=0, max_value=100, key=f"est_marge_{i}", value=marge_beneficiaire)
            
            if desc and qty > 0:
                prix_avec_marge = prix_ht * (1 + marge_ligne / 100)
                montant_ligne = qty * prix_avec_marge
                prix_total_manuel += montant_ligne
                
                lignes_estimation.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix_avec_marge,
                    'prix_unitaire_ht': prix_ht,
                    'marge_pct': marge_ligne,
                    'montant_ligne': montant_ligne
                })
        
        # Conditions sp√©ciales selon template industrie
        st.markdown("##### üìã Conditions Sp√©ciales par Industrie")
        
        template_info = get_template_info(template_industrie)
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            garantie_proposee = st.text_input("Garantie Propos√©e",
                value=template_info['garantie'],
                help="Garantie selon le template industrie")
            
            delai_execution = st.number_input("D√©lai d'Ex√©cution (jours)",
                value=template_info['delai_standard'],
                help="D√©lai standard selon l'industrie")
            
            lieu_execution = st.text_input("Lieu d'Ex√©cution",
                value="Ateliers DG Inc., Montr√©al")
        
        with col_cond2:
            # Clauses techniques automatiques selon template
            clauses_techniques = st.text_area("Clauses Techniques",
                value=get_clauses_techniques_template(template_industrie),
                height=100,
                help="Clauses techniques pr√©-remplies selon l'industrie")
            
            options_incluses = st.multiselect("Options Incluses",
                ["Transport", "Installation", "Formation", "Maintenance 1 an", "Support technique"],
                default=["Support technique"])
        
        # Validit√© et r√©visions
        st.markdown("##### ‚è∞ Validit√© et R√©visions")
        
        col_valid1, col_valid2 = st.columns(2)
        with col_valid1:
            date_validite = st.date_input("Date Limite Validit√©",
                value=datetime.now().date() + timedelta(days=validite_devis))
            
            revision_autorisee = st.checkbox("R√©visions Autoris√©es", value=True,
                help="Le client peut-il demander des modifications?")
        
        with col_valid2:
            nb_revisions_max = st.number_input("Nombre R√©visions Max", 
                min_value=0, value=3, disabled=not revision_autorisee)
            
            frais_revision = st.number_input("Frais R√©vision ($)", 
                min_value=0.0, value=0.0, format="%.2f",
                disabled=not revision_autorisee)
        
        # Notes et observations
        notes_estimation = st.text_area("Notes et Observations", height=80,
            placeholder="Contexte du projet, exigences particuli√®res, conditions sp√©ciales...")
        
        # R√©capitulatif financier final
        prix_final = prix_total_manuel if lignes_estimation else (calculs_auto.get('prix_TTC', 0) if projet_base_id and st.session_state.get('calculs_auto_actifs') else 0)
        
        if prix_final > 0:
            taxes = prix_final * 0.14975  # TVQ + TPS Qu√©bec
            prix_ttc_final = prix_final + taxes
            
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier Final</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Prix HT : {prix_final:,.2f} {devise_devis}</strong></p>
                <p style='margin:0;'>Taxes (14.975%) : {taxes:,.2f} {devise_devis}</p>
                <p style='margin:0;'><strong>Prix TTC : {prix_ttc_final:,.2f} {devise_devis}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Template : {template_industrie} | Marge : {marge_beneficiaire}%</p>
                <p style='margin:0;font-size:0.9em;'>Validit√© : {validite_devis} jours | D√©lai : {delai_execution} jours</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="est_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="est_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer Client", use_container_width=True, key="est_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not client_id:
                erreurs.append("Client obligatoire")
            if not employe_id:
                erreurs.append("Commercial responsable obligatoire")
            if not template_industrie:
                erreurs.append("Template industrie obligatoire")
            if not lignes_estimation and not projet_base_id:
                erreurs.append("Au moins un article ou un projet de base requis")
            if prix_final <= 0:
                erreurs.append("Le montant de l'estimation doit √™tre sup√©rieur √† 0")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des m√©tadonn√©es EST
                metadonnees_est = {
                    'template_industrie': template_industrie,
                    'marge_beneficiaire': marge_beneficiaire,
                    'devise_devis': devise_devis,
                    'validite_devis': validite_devis,
                    'type_estimation': type_estimation,
                    'conditions_paiement': conditions_paiement_client,
                    'garantie_proposee': garantie_proposee,
                    'delai_execution': delai_execution,
                    'lieu_execution': lieu_execution,
                    'options_incluses': options_incluses,
                    'revision_autorisee': revision_autorisee,
                    'nb_revisions_max': nb_revisions_max,
                    'frais_revision': frais_revision,
                    'date_validite': date_validite.isoformat(),
                    'projet_base_id': projet_base_id,
                    'calculs_automatiques': bool(projet_base_id),
                    'version': 1,  # Premi√®re version
                    'template_info': template_info
                }
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== ESTIMATION CLIENT ===
Template : {template_industrie}
Type : {type_estimation}
Marge b√©n√©ficiaire : {marge_beneficiaire}%

=== CLIENT ET PROJET ===
Client : {next((c[1] for c in client_options if c[0] == client_id), 'N/A')}
Projet de base : {next((p['nom_projet'] for p in projets_client if p['id'] == projet_base_id), 'Nouveau projet') if client_id and projets_client else 'Nouveau projet'}

=== CONDITIONS COMMERCIALES ===
Validit√© : {validite_devis} jours (jusqu'au {date_validite.strftime('%d/%m/%Y')})
Paiement : {conditions_paiement_client}
Garantie : {garantie_proposee}
D√©lai ex√©cution : {delai_execution} jours
Lieu : {lieu_execution}

=== CLAUSES TECHNIQUES ===
{clauses_techniques}

=== OPTIONS INCLUSES ===
{', '.join(options_incluses) if options_incluses else 'Aucune option sp√©ciale'}

=== R√âVISIONS ===
Autoris√©es : {'Oui' if revision_autorisee else 'Non'}
Nombre max : {nb_revisions_max if revision_autorisee else 'N/A'}
Frais : {frais_revision}$ CAD par r√©vision

=== D√âTAILS FINANCIERS ===
Prix HT : {prix_final:,.2f} {devise_devis}
Taxes : {prix_final * 0.14975:,.2f} {devise_devis}
Prix TTC : {prix_final + (prix_final * 0.14975):,.2f} {devise_devis}

=== NOTES ET OBSERVATIONS ===
{notes_estimation or 'Aucune note particuli√®re'}"""
                
                # Utilisation des lignes automatiques ou manuelles
                lignes_finales = lignes_estimation if lignes_estimation else []
                if projet_base_id and not lignes_estimation:
                    # Cr√©er des lignes depuis le projet
                    lignes_finales = creer_lignes_depuis_projet(projet_base_id, calculs_auto)
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'ESTIMATION',
                    'numero_document': numero_est,
                    'project_id': projet_base_id,  # Peut √™tre None pour nouveau client
                    'company_id': client_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_validite,
                    'montant_total': prix_final + (prix_final * 0.14975),  # Prix TTC
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees_est),
                    'lignes': lignes_finales
                }
                
                # Cr√©ation de l'estimation
                estimation_id = gestionnaire.creer_formulaire(data)
                
                if estimation_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Estimation {numero_est} cr√©√©e et envoy√©e au client!")
                        st.info("üìß Le client a √©t√© notifi√© et le suivi commercial est activ√©.")
                    else:
                        st.success(f"‚úÖ Estimation {numero_est} cr√©√©e avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif de l'Estimation
                    
                    **N¬∞ EST :** {numero_est}  
                    **Client :** {next((c[1] for c in client_options if c[0] == client_id), 'N/A')}  
                    **Template :** {template_industrie}  
                    **Montant TTC :** {prix_final + (prix_final * 0.14975):,.2f} {devise_devis}  
                    **Validit√© :** {date_validite.strftime('%d/%m/%Y')}  
                    **Statut :** {statut}
                    """)
                    
                    # Actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="est_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_estimations_actives"
                            st.rerun()
                    with col_next2:
                        if st.button("üîÑ Cr√©er Version v2", use_container_width=True, key="est_version_v2"):
                            st.session_state.base_estimation_id = estimation_id
                            st.session_state.form_action = "manage_versions"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Nouvelle Estimation", use_container_width=True, key="est_nouvelle_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation de l'estimation")

# =============================================================================
# LISTE DES ESTIMATIONS AVEC FILTRES
# =============================================================================

def render_estimation_list(gestionnaire):
    """Liste des Estimations avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Estimations")
    
    estimations = gestionnaire.get_formulaires('ESTIMATION')
    
    if not estimations:
        st.info("Aucune Estimation cr√©√©e. Cr√©ez votre premier devis client!")
        
        if st.button("‚ûï Cr√©er Premi√®re Estimation", use_container_width=True, key="est_premiere"):
            st.session_state.form_action = "create_estimation"
            st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    
    with col_m1:
        st.metric("üìä Total EST", len(estimations))
    with col_m2:
        en_cours = len([est for est in estimations if est['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üì§ En Cours", en_cours)
    with col_m3:
        acceptees = len([est for est in estimations if est['statut'] == 'APPROUV√â'])
        st.metric("‚úÖ Accept√©es", acceptees)
    with col_m4:
        montant_total = sum(est.get('montant_total', 0) for est in estimations)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col_m5:
        expirees = len([est for est in estimations if est_estimation_expiree(est)])
        st.metric("‚è∞ Expir√©es", expirees)
    
    # Alertes pour estimations expir√©es ou proches d'expiration
    today = datetime.now().date()
    estimations_urgentes = []
    for est in estimations:
        if est['statut'] in ['VALID√â', 'ENVOY√â']:
            try:
                meta = json.loads(est.get('metadonnees_json', '{}'))
                date_validite = datetime.strptime(meta.get('date_validite', ''), '%Y-%m-%d').date()
                jours_restants = (date_validite - today).days
                if jours_restants <= 3:
                    estimations_urgentes.append((est, jours_restants))
            except:
                continue
    
    if estimations_urgentes:
        st.warning(f"‚è∞ {len(estimations_urgentes)} estimation(s) expire(nt) dans ‚â§ 3 jours!")
        
        with st.expander("üìã D√©tails Estimations Urgentes", expanded=True):
            for est, jours in estimations_urgentes:
                urgence_icon = "üî¥" if jours < 0 else "üü°" if jours <= 1 else "üü†"
                st.error(f"""
                {urgence_icon} **EST {est['numero_document']}** - {est.get('company_nom', 'N/A')}
                Expire dans : {jours} jour(s) | Montant : {est.get('montant_total', 0):,.0f}$ CAD
                """)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par template industrie
            templates_liste = list(set([get_template_from_metadata(est) for est in estimations]))
            filtre_template = st.multiselect("Template", ['Tous'] + templates_liste, default=['Tous'])
        with col_f4:
            # Filtre par commercial
            commerciaux_liste = list(set([est.get('employee_nom', 'N/A') for est in estimations if est.get('employee_nom')]))
            filtre_commercial = st.multiselect("Commercial", ['Tous'] + commerciaux_liste, default=['Tous'])
        
        col_search, col_montant, col_validite = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, client, projet...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_validite:
            filtre_validite = st.selectbox("Validit√©", 
                ["Toutes", "Valides", "Expirent ‚â§ 7j", "Expir√©es"])
    
    # Application des filtres
    estimations_filtrees = []
    for est in estimations:
        # Filtre statut
        if est['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if est['priorite'] not in filtre_priorite:
            continue
        
        # Filtre template
        if 'Tous' not in filtre_template:
            template_est = get_template_from_metadata(est)
            if template_est not in filtre_template:
                continue
        
        # Filtre commercial
        if 'Tous' not in filtre_commercial and est.get('employee_nom', 'N/A') not in filtre_commercial:
            continue
        
        # Filtre montant
        if est.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(est.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre validit√©
        if filtre_validite != "Toutes":
            try:
                meta = json.loads(est.get('metadonnees_json', '{}'))
                date_validite = datetime.strptime(meta.get('date_validite', ''), '%Y-%m-%d').date()
                jours_restants = (date_validite - today).days
                
                if filtre_validite == "Valides" and jours_restants < 0:
                    continue
                elif filtre_validite == "Expirent ‚â§ 7j" and (jours_restants < 0 or jours_restants > 7):
                    continue
                elif filtre_validite == "Expir√©es" and jours_restants >= 0:
                    continue
            except:
                if filtre_validite != "Toutes":
                    continue
        
        estimations_filtrees.append(est)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(estimations_filtrees)} Estimation(s) trouv√©e(s)**")
    
    if estimations_filtrees:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date validit√©", "Montant", "Client", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            estimations_filtrees.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date validit√©":
            estimations_filtrees.sort(key=lambda x: get_date_validite_from_metadata(x), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            estimations_filtrees.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Client":
            estimations_filtrees.sort(key=lambda x: x.get('company_nom', ''), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for est in estimations_filtrees:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(est['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(est['statut'], '‚ùì')
            
            # Extraction des m√©tadonn√©es
            try:
                meta = json.loads(est.get('metadonnees_json', '{}'))
                template = meta.get('template_industrie', 'N/A')
                version = meta.get('version', 1)
                date_validite = meta.get('date_validite', 'N/A')
                
                # Calcul statut validit√©
                if date_validite != 'N/A':
                    date_val = datetime.strptime(date_validite, '%Y-%m-%d').date()
                    jours_restants = (date_val - today).days
                    if jours_restants < 0:
                        validite_status = f"üî¥ Expir√©e ({abs(jours_restants)}j)"
                    elif jours_restants <= 3:
                        validite_status = f"üü° {jours_restants}j restants"
                    else:
                        validite_status = f"üü¢ {jours_restants}j restants"
                else:
                    validite_status = "‚ùì Non d√©finie"
            except:
                template = 'N/A'
                version = 1
                validite_status = "‚ùì Erreur"
            
            df_data.append({
                'N¬∞ EST': f"{est['numero_document']} v{version}",
                'Client': est.get('company_nom', 'N/A'),
                'Commercial': est.get('employee_nom', 'N/A'),
                'Template': template,
                'Statut': f"{statut_icon} {est['statut']}",
                'Priorit√©': f"{priorite_icon} {est['priorite']}",
                'Date Cr√©ation': est['date_creation'][:10] if est['date_creation'] else 'N/A',
                'Validit√©': validite_status,
                'Montant TTC': f"{est.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4, col_action5 = st.columns(5)
        
        with col_action1:
            est_selectionne = st.selectbox("S√©lectionner une EST", 
                                         options=[est['id'] for est in estimations_filtrees],
                                         format_func=lambda x: next((est['numero_document'] for est in estimations_filtrees if est['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="est_voir_details"):
                if est_selectionne:
                    st.session_state.selected_formulaire_id = est_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üîÑ Cr√©er Version", use_container_width=True, key="est_creer_version"):
                if est_selectionne:
                    st.session_state.base_estimation_id = est_selectionne
                    st.session_state.form_action = "manage_versions"
                    st.rerun()
        
        with col_action4:
            if st.button("‚úÖ Marquer Accept√©e", use_container_width=True, key="est_marquer_acceptee"):
                if est_selectionne:
                    if marquer_estimation_acceptee(gestionnaire, est_selectionne):
                        st.success("‚úÖ Estimation marqu√©e comme accept√©e!")
                        st.rerun()
        
        with col_action5:
            if st.button("üìù Modifier", use_container_width=True, key="est_modifier"):
                if est_selectionne:
                    st.session_state.form_action = "edit_estimation"
                    st.session_state.edit_formulaire_id = est_selectionne
    else:
        st.info("Aucune Estimation ne correspond aux crit√®res de recherche.")

# =============================================================================
# GESTION DES VERSIONS (v1, v2, v3...)
# =============================================================================

def render_manage_versions(gestionnaire):
    """Gestion des versions d'estimations - NOUVEAU CONCEPT"""
    st.markdown("#### üîÑ Gestion des Versions")
    
    # S√©lection de l'estimation de base
    base_estimation_id = st.session_state.get('base_estimation_id')
    
    estimations = gestionnaire.get_formulaires('ESTIMATION')
    est_options = [(est['id'], f"{est['numero_document']} - {est.get('company_nom', 'N/A')}") for est in estimations]
    
    if est_options:
        if not base_estimation_id:
            base_estimation_id = st.selectbox("Estimation de Base", 
                                            options=[e[0] for e in est_options],
                                            format_func=lambda x: next((e[1] for e in est_options if e[0] == x), ""))
        else:
            # Afficher l'estimation s√©lectionn√©e
            est_selectionnee = next((e[1] for e in est_options if e[0] == base_estimation_id), "Estimation introuvable")
            st.info(f"**Estimation s√©lectionn√©e :** {est_selectionnee}")
        
        if base_estimation_id:
            # R√©cup√©ration de toutes les versions de cette estimation
            versions = get_versions_estimation(gestionnaire, base_estimation_id)
            
            st.markdown("##### üìã Historique des Versions")
            
            if versions:
                for version in versions:
                    with st.expander(f"Version {version['version']} - {version['date_creation'][:10]}", expanded=False):
                        col_v1, col_v2, col_v3, col_v4 = st.columns(4)
                        
                        with col_v1:
                            st.metric("Prix TTC", f"{version['montant_total']:,.2f}$ CAD")
                        with col_v2:
                            st.metric("Statut", version['statut'])
                        with col_v3:
                            try:
                                meta = json.loads(version.get('metadonnees_json', '{}'))
                                template = meta.get('template_industrie', 'N/A')
                                marge = meta.get('marge_beneficiaire', 'N/A')
                                st.text(f"Template: {template}")
                                st.text(f"Marge: {marge}%")
                            except:
                                st.text("M√©tadonn√©es indisponibles")
                        with col_v4:
                            if st.button(f"üìã Dupliquer v{version['version']}", key=f"dup_{version['id']}", use_container_width=True):
                                nouvelle_version_id = dupliquer_estimation_version(gestionnaire, version['id'])
                                if nouvelle_version_id:
                                    st.success(f"‚úÖ Version dupliqu√©e avec succ√®s!")
                                    st.rerun()
            else:
                st.info("Aucune version trouv√©e pour cette estimation.")
            
            # Interface cr√©ation nouvelle version
            st.markdown("##### ‚ûï Cr√©er Nouvelle Version")
            
            with st.form("nouvelle_version_form"):
                col_nv1, col_nv2 = st.columns(2)
                
                with col_nv1:
                    motif_revision = st.text_area("Motif de la R√©vision *",
                        placeholder="Expliquez pourquoi cette nouvelle version est n√©cessaire...",
                        help="Exemple: Demande client, changement sp√©cifications, r√©vision prix")
                    
                    modifications_principales = st.text_area("Principales Modifications",
                        placeholder="D√©crivez les changements apport√©s...",
                        help="D√©taillez les modifications techniques, commerciales, etc.")
                
                with col_nv2:
                    ajustement_prix = st.selectbox("Ajustement Prix",
                        ["Aucun", "Augmentation", "Diminution", "R√©vision compl√®te"])
                    
                    if ajustement_prix != "Aucun":
                        pourcentage_ajustement = st.slider("Pourcentage d'Ajustement (%)", -50, 50, 0,
                            help="Pourcentage d'augmentation (+) ou de diminution (-)")
                    else:
                        pourcentage_ajustement = 0
                    
                    # Options de modification
                    modifier_template = st.checkbox("Modifier Template Industrie")
                    if modifier_template:
                        nouveau_template = st.selectbox("Nouveau Template",
                            ["AUTOMOBILE", "AERONAUTIQUE", "CONSTRUCTION", "GENERAL"])
                    else:
                        nouveau_template = None
                    
                    modifier_marge = st.checkbox("Modifier Marge B√©n√©ficiaire")
                    if modifier_marge:
                        nouvelle_marge = st.slider("Nouvelle Marge (%)", 5, 50, 20)
                    else:
                        nouvelle_marge = None
                
                # Param√®tres de la nouvelle version
                st.markdown("**Param√®tres Nouvelle Version:**")
                col_param1, col_param2 = st.columns(2)
                
                with col_param1:
                    nouvelle_validite = st.number_input("Nouvelle Validit√© (jours)", 
                        min_value=15, value=30, max_value=90)
                    priorite_version = st.selectbox("Priorit√© Version", 
                        gestionnaire.priorites, index=1)  # URGENT par d√©faut pour r√©visions
                
                with col_param2:
                    notification_client = st.checkbox("Notifier le Client", value=True,
                        help="Envoyer la nouvelle version au client automatiquement")
                    archiver_precedente = st.checkbox("Archiver Version Pr√©c√©dente", value=False,
                        help="Marquer la version pr√©c√©dente comme obsol√®te")
                
                submit_version = st.form_submit_button("üîÑ Cr√©er Nouvelle Version", use_container_width=True)
                
                if submit_version and motif_revision:
                    # R√©cup√©ration de l'estimation de base
                    est_base = gestionnaire.get_formulaire_details(base_estimation_id)
                    
                    if est_base:
                        # Calcul du nouveau montant
                        montant_actuel = est_base.get('montant_total', 0)
                        if ajustement_prix != "Aucun":
                            nouveau_montant = montant_actuel * (1 + pourcentage_ajustement / 100)
                        else:
                            nouveau_montant = montant_actuel
                        
                        # R√©cup√©ration des m√©tadonn√©es actuelles
                        try:
                            meta_actuelles = json.loads(est_base.get('metadonnees_json', '{}'))
                        except:
                            meta_actuelles = {}
                        
                        # Mise √† jour des m√©tadonn√©es
                        nouvelle_version_num = get_prochaine_version_numero(gestionnaire, base_estimation_id)
                        
                        nouvelles_meta = meta_actuelles.copy()
                        nouvelles_meta.update({
                            'version': nouvelle_version_num,
                            'version_precedente_id': base_estimation_id,
                            'motif_revision': motif_revision,
                            'modifications_principales': modifications_principales,
                            'ajustement_prix': ajustement_prix,
                            'pourcentage_ajustement': pourcentage_ajustement,
                            'date_revision': datetime.now().isoformat(),
                            'validite_devis': nouvelle_validite,
                            'date_validite': (datetime.now().date() + timedelta(days=nouvelle_validite)).isoformat()
                        })
                        
                        if nouveau_template:
                            nouvelles_meta['template_industrie'] = nouveau_template
                        if nouvelle_marge is not None:
                            nouvelles_meta['marge_beneficiaire'] = nouvelle_marge
                        
                        # G√©n√©ration du nouveau num√©ro
                        numero_base = est_base['numero_document'].split(' ')[0]  # Enlever l'√©ventuel " v1"
                        nouveau_numero = f"{numero_base} v{nouvelle_version_num}"
                        
                        # Construction des notes de r√©vision
                        notes_revision = f"""=== R√âVISION VERSION {nouvelle_version_num} ===
Motif : {motif_revision}
Date r√©vision : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}
Version pr√©c√©dente : {est_base['numero_document']}

=== MODIFICATIONS APPORT√âES ===
{modifications_principales or 'Aucune modification d√©taill√©e'}

=== AJUSTEMENTS FINANCIERS ===
Ajustement prix : {ajustement_prix}
Pourcentage : {pourcentage_ajustement}%
Montant pr√©c√©dent : {montant_actuel:,.2f}$ CAD
Nouveau montant : {nouveau_montant:,.2f}$ CAD

=== PARAM√àTRES TECHNIQUES ===
Template : {nouveau_template or meta_actuelles.get('template_industrie', 'Inchang√©')}
Marge : {nouvelle_marge or meta_actuelles.get('marge_beneficiaire', 'Inchang√©e')}%
Nouvelle validit√© : {nouvelle_validite} jours

=== NOTES VERSION PR√âC√âDENTE ===
{est_base.get('notes', '')}"""
                        
                        # Donn√©es de la nouvelle version
                        data_nouvelle_version = {
                            'type_formulaire': 'ESTIMATION',
                            'numero_document': nouveau_numero,
                            'project_id': est_base.get('project_id'),
                            'company_id': est_base.get('company_id'),
                            'employee_id': est_base.get('employee_id'),
                            'statut': 'VALID√â',
                            'priorite': priorite_version,
                            'date_creation': datetime.now().date(),
                            'date_echeance': datetime.now().date() + timedelta(days=nouvelle_validite),
                            'montant_total': nouveau_montant,
                            'notes': notes_revision,
                            'metadonnees_json': json.dumps(nouvelles_meta),
                            'lignes': est_base.get('lignes', [])
                        }
                        
                        # Cr√©ation de la nouvelle version
                        nouvelle_version_id = gestionnaire.creer_formulaire(data_nouvelle_version)
                        
                        if nouvelle_version_id:
                            # Archivage de la version pr√©c√©dente si demand√©
                            if archiver_precedente:
                                gestionnaire.modifier_statut_formulaire(
                                    base_estimation_id, 
                                    'ANNUL√â', 
                                    est_base.get('employee_id'),
                                    f"Remplac√©e par version {nouvelle_version_num}"
                                )
                            
                            # Enregistrement de l'action
                            gestionnaire.enregistrer_validation(
                                nouvelle_version_id,
                                est_base.get('employee_id'),
                                'CREATION',
                                f"Version {nouvelle_version_num} cr√©√©e depuis {est_base['numero_document']}"
                            )
                            
                            st.success(f"""
                            ‚úÖ **Nouvelle Version Cr√©√©e !**
                            
                            üìä **Version :** {nouvelle_version_num}
                            üí∞ **Nouveau Montant :** {nouveau_montant:,.2f}$ CAD
                            üìÖ **Nouvelle Validit√© :** {nouvelle_validite} jours
                            üîÑ **Ajustement :** {ajustement_prix} ({pourcentage_ajustement}%)
                            """)
                            
                            if notification_client:
                                st.info("üìß Notification envoy√©e au client pour la nouvelle version")
                            
                            # Actions suivantes
                            col_next1, col_next2 = st.columns(2)
                            with col_next1:
                                if st.button("üìã Voir Nouvelle Version", use_container_width=True, key="voir_nouvelle_version"):
                                    st.session_state.selected_formulaire_id = nouvelle_version_id
                                    st.session_state.show_formulaire_modal = True
                            with col_next2:
                                if st.button("üìä Retour Liste", use_container_width=True, key="retour_liste_versions"):
                                    st.session_state.form_action = "list_estimations_actives"
                                    st.rerun()
                        else:
                            st.error("‚ùå Erreur lors de la cr√©ation de la nouvelle version")
                    else:
                        st.error("‚ùå Estimation de base introuvable")
                elif submit_version and not motif_revision:
                    st.error("‚ùå Le motif de r√©vision est obligatoire")
    else:
        st.info("Aucune estimation disponible pour cr√©er des versions.")

# =============================================================================
# ESTIMATIONS ACCEPT√âES ET CONVERSION EN PROJETS
# =============================================================================

def render_estimations_acceptees(gestionnaire):
    """Gestion des estimations accept√©es et conversion projets"""
    st.markdown("#### ‚úÖ Estimations Accept√©es")
    
    # Estimations accept√©es pr√™tes pour conversion
    estimations_acceptees = [est for est in gestionnaire.get_formulaires('ESTIMATION') 
                           if est['statut'] == 'APPROUV√â']
    
    if not estimations_acceptees:
        st.info("Aucune estimation accept√©e en attente de conversion.")
        
        # Proposer de marquer des estimations comme accept√©es
        estimations_envoyees = [est for est in gestionnaire.get_formulaires('ESTIMATION') 
                               if est['statut'] == 'ENVOY√â']
        
        if estimations_envoyees:
            st.markdown("##### üìã Estimations En N√©gociation")
            st.info(f"{len(estimations_envoyees)} estimation(s) envoy√©e(s) en attente de r√©ponse client")
            
            for est in estimations_envoyees[:3]:  # Afficher les 3 premi√®res
                with st.expander(f"EST {est['numero_document']} - {est.get('company_nom', 'N/A')}", expanded=False):
                    col_neg1, col_neg2, col_neg3 = st.columns(3)
                    
                    with col_neg1:
                        st.metric("Montant", f"{est.get('montant_total', 0):,.2f}$ CAD")
                    with col_neg2:
                        validite_status = get_validite_status(est)
                        st.text(f"Validit√©: {validite_status}")
                    with col_neg3:
                        if st.button(f"‚úÖ Marquer Accept√©e", key=f"accept_{est['id']}", use_container_width=True):
                            if marquer_estimation_acceptee(gestionnaire, est['id']):
                                st.success("‚úÖ Estimation marqu√©e comme accept√©e!")
                                st.rerun()
        
        return
    
    st.markdown("##### üîÑ Conversion en Projets")
    
    for est in estimations_acceptees:
        with st.expander(f"EST {est['numero_document']} - {est.get('company_nom', 'N/A')}", expanded=False):
            col_conv1, col_conv2, col_conv3, col_conv4 = st.columns(4)
            
            with col_conv1:
                st.metric("Montant Valid√©", f"{est.get('montant_total', 0):,.2f}$ CAD")
                st.text(f"Date validation : {est.get('date_echeance', 'N/A')}")
            
            with col_conv2:
                try:
                    meta = json.loads(est.get('metadonnees_json', '{}'))
                    template = meta.get('template_industrie', 'N/A')
                    delai = meta.get('delai_execution', 'N/A')
                    st.text(f"Template: {template}")
                    st.text(f"D√©lai: {delai} jours")
                except:
                    st.text("M√©tadonn√©es indisponibles")
            
            with col_conv3:
                if st.button(f"üìã Voir D√©tails", key=f"details_{est['id']}", use_container_width=True):
                    st.session_state.selected_formulaire_id = est['id']
                    st.session_state.show_formulaire_modal = True
            
            with col_conv4:
                if st.button(f"üîÑ Convertir ‚Üí Projet", key=f"convert_{est['id']}", use_container_width=True):
                    projet_id = convertir_estimation_vers_projet(gestionnaire, est['id'])
                    if projet_id:
                        st.success(f"‚úÖ Projet #{projet_id} cr√©√© depuis EST {est['numero_document']}")
                        st.rerun()

# =============================================================================
# FONCTIONS UTILITAIRES SP√âCIFIQUES AUX ESTIMATIONS
# =============================================================================

def get_clients_actifs():
    """R√©cup√®re la liste des clients depuis le CRM"""
    try:
        # Dans le syst√®me ERP, les clients sont des companies 
        query = """
            SELECT id, nom, secteur, adresse 
            FROM companies 
            WHERE secteur NOT LIKE '%FOURNISSEUR%' 
               OR id IN (
                   SELECT DISTINCT company_id 
                   FROM formulaires 
                   WHERE type_formulaire = 'ESTIMATION'
               )
            ORDER BY nom
        """
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration clients: {e}")
        return []

def get_projets_client(client_id):
    """R√©cup√®re les projets d'un client sp√©cifique"""
    try:
        query = """
            SELECT id, nom_projet, statut, prix_estime
            FROM projects 
            WHERE client_company_id = ? 
            ORDER BY nom_projet
        """
        rows = st.session_state.erp_db.execute_query(query, (client_id,))
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration projets client: {e}")
        return []

def get_marge_defaut_template(template_industrie):
    """Retourne la marge par d√©faut selon le template industrie"""
    marges_defaut = {
        "AUTOMOBILE": 15,
        "AERONAUTIQUE": 25,
        "CONSTRUCTION": 12,
        "GENERAL": 20
    }
    return marges_defaut.get(template_industrie, 20)

def get_template_info(template_industrie):
    """Retourne les informations compl√®tes d'un template industrie"""
    templates_industrie = {
        "AUTOMOBILE": {
            "marge_defaut": 15,
            "conditions_paiement": "30 jours net",
            "garantie": "12 mois pi√®ces et main d'≈ìuvre",
            "clauses_techniques": [
                "Tol√©rances selon norme ISO 2768",
                "Mat√©riaux certifi√©s automotive",
                "Tra√ßabilit√© compl√®te exig√©e"
            ],
            "delai_standard": 21,
            "coefficient_complexite": 1.2,
            "cout_certification_pct": 5
        },
        "AERONAUTIQUE": {
            "marge_defaut": 25,
            "conditions_paiement": "50% avance + 50% livraison",
            "garantie": "24 mois certification a√©ro",
            "clauses_techniques": [
                "Conformit√© AS9100",
                "Mat√©riaux a√©ronautiques certifi√©s",
                "Documentation compl√®te CAMO"
            ],
            "delai_standard": 45,
            "coefficient_complexite": 1.5,
            "cout_certification_pct": 15
        },
        "CONSTRUCTION": {
            "marge_defaut": 12,
            "conditions_paiement": "30 jours net",
            "garantie": "12 mois installation",
            "clauses_techniques": [
                "Normes CNB en vigueur",
                "R√©sistance structurale certifi√©e",
                "Finition selon devis architectural"
            ],
            "delai_standard": 14,
            "coefficient_complexite": 1.1,
            "cout_certification_pct": 2
        },
        "GENERAL": {
            "marge_defaut": 20,
            "conditions_paiement": "30 jours net",
            "garantie": "12 mois standard",
            "clauses_techniques": [
                "Qualit√© industrielle standard",
                "Conformit√© normes applicables"
            ],
            "delai_standard": 21,
            "coefficient_complexite": 1.0,
            "cout_certification_pct": 0
        }
    }
    
    return templates_industrie.get(template_industrie, templates_industrie["GENERAL"])

def get_clauses_techniques_template(template_industrie):
    """Retourne les clauses techniques pr√©-remplies selon le template"""
    template_info = get_template_info(template_industrie)
    clauses = template_info['clauses_techniques']
    return '\n'.join([f"‚Ä¢ {clause}" for clause in clauses])

def calculer_estimation_automatique(projet_id, marge_beneficiaire, template_industrie):
    """Calculs automatiques pour estimations bas√©es sur un projet existant"""
    try:
        # R√©cup√©rer co√ªts mat√©riaux depuis BOM projet
        materiaux_projet = get_materiaux_projet(projet_id)
        cout_materiaux = sum(mat.get('quantite', 0) * mat.get('prix_unitaire', 0) for mat in materiaux_projet)
        
        # R√©cup√©rer temps estim√© depuis op√©rations + postes de travail
        operations_projet = get_operations_projet(projet_id)
        cout_main_oeuvre = 0
        
        for operation in operations_projet:
            try:
                # R√©cup√©rer le co√ªt horaire du poste de travail
                poste = get_poste_travail(operation.get('work_center_id'))
                if poste:
                    cout_main_oeuvre += operation.get('temps_estime', 0) * poste.get('cout_horaire', 50)
                else:
                    # Co√ªt par d√©faut si pas de poste trouv√©
                    cout_main_oeuvre += operation.get('temps_estime', 0) * 50
            except:
                continue
        
        # R√©cup√©ration des informations du template
        template_info = get_template_info(template_industrie)
        
        # Calculs selon template industrie
        coefficient_complexite = template_info['coefficient_complexite']
        cout_certification = cout_materiaux * (template_info['cout_certification_pct'] / 100)
        
        # Calcul final
        cout_direct = (cout_materiaux + cout_main_oeuvre) * coefficient_complexite
        cout_indirect = cout_direct * 0.20  # 20% frais g√©n√©raux
        marge = (cout_direct + cout_indirect) * (marge_beneficiaire / 100)
        
        prix_HT = cout_direct + cout_indirect + marge + cout_certification
        taxes = prix_HT * 0.14975  # TVQ + TPS Qu√©bec
        prix_TTC = prix_HT + taxes
        
        return {
            'cout_materiaux': cout_materiaux,
            'cout_main_oeuvre': cout_main_oeuvre,
            'cout_certification': cout_certification,
            'cout_direct': cout_direct,
            'cout_indirect': cout_indirect,
            'marge': marge,
            'prix_HT': prix_HT,
            'taxes': taxes,
            'prix_TTC': prix_TTC,
            'details': f"Calcul automatique template {template_industrie}"
        }
        
    except Exception as e:
        st.error(f"Erreur calculs automatiques: {e}")
        return None

def get_materiaux_projet(projet_id):
    """R√©cup√®re les mat√©riaux d'un projet"""
    try:
        query = """
            SELECT id, designation as description, quantite, prix_unitaire, unite
            FROM materials 
            WHERE project_id = ?
            ORDER BY designation
        """
        rows = st.session_state.erp_db.execute_query(query, (projet_id,))
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration mat√©riaux: {e}")
        return []

def get_poste_travail(work_center_id):
    """R√©cup√®re les informations d'un poste de travail"""
    try:
        if not work_center_id:
            return None
        
        query = """
            SELECT id, nom, cout_horaire, departement
            FROM work_centers 
            WHERE id = ?
        """
        rows = st.session_state.erp_db.execute_query(query, (work_center_id,))
        return dict(rows[0]) if rows else None
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration poste travail: {e}")
        return None

def creer_lignes_depuis_projet(projet_id, calculs_auto):
    """Cr√©e les lignes d'estimation depuis un projet et ses calculs"""
    lignes = []
    
    if calculs_auto:
        # Ligne pour mat√©riaux
        if calculs_auto['cout_materiaux'] > 0:
            lignes.append({
                'description': 'Mat√©riaux et fournitures',
                'quantite': 1,
                'unite': 'FORFAIT',
                'prix_unitaire': calculs_auto['cout_materiaux'],
                'montant_ligne': calculs_auto['cout_materiaux']
            })
        
        # Ligne pour main d'≈ìuvre
        if calculs_auto['cout_main_oeuvre'] > 0:
            lignes.append({
                'description': 'Main d\'≈ìuvre et montage',
                'quantite': 1,
                'unite': 'FORFAIT', 
                'prix_unitaire': calculs_auto['cout_main_oeuvre'],
                'montant_ligne': calculs_auto['cout_main_oeuvre']
            })
        
        # Ligne pour certification si applicable
        if calculs_auto['cout_certification'] > 0:
            lignes.append({
                'description': 'Certification et conformit√©',
                'quantite': 1,
                'unite': 'FORFAIT',
                'prix_unitaire': calculs_auto['cout_certification'],
                'montant_ligne': calculs_auto['cout_certification']
            })
    
    return lignes

def get_projets_sans_estimation():
    """R√©cup√®re les projets qui n'ont pas encore d'estimation"""
    try:
        query = """
            SELECT p.id, p.nom_projet, p.client_nom_cache
            FROM projects p
            WHERE p.statut IN ('√Ä FAIRE', 'EN COURS')
            AND p.id NOT IN (
                SELECT DISTINCT project_id 
                FROM formulaires 
                WHERE type_formulaire = 'ESTIMATION' 
                AND project_id IS NOT NULL
            )
            ORDER BY p.nom_projet
            LIMIT 5
        """
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except:
        return []

def est_estimation_expiree(estimation):
    """V√©rifie si une estimation est expir√©e"""
    try:
        meta = json.loads(estimation.get('metadonnees_json', '{}'))
        date_validite = datetime.strptime(meta.get('date_validite', ''), '%Y-%m-%d').date()
        return date_validite < datetime.now().date()
    except:
        return False

def get_template_from_metadata(estimation):
    """Extrait le template depuis les m√©tadonn√©es"""
    try:
        meta = json.loads(estimation.get('metadonnees_json', '{}'))
        return meta.get('template_industrie', 'N/A')
    except:
        return 'N/A'

def get_date_validite_from_metadata(estimation):
    """Extrait la date de validit√© depuis les m√©tadonn√©es"""
    try:
        meta = json.loads(estimation.get('metadonnees_json', '{}'))
        return meta.get('date_validite', '9999-12-31')
    except:
        return '9999-12-31'

def get_validite_status(estimation):
    """Retourne le statut de validit√© d'une estimation"""
    try:
        meta = json.loads(estimation.get('metadonnees_json', '{}'))
        date_validite = datetime.strptime(meta.get('date_validite', ''), '%Y-%m-%d').date()
        today = datetime.now().date()
        jours_restants = (date_validite - today).days
        
        if jours_restants < 0:
            return f"Expir√©e ({abs(jours_restants)}j)"
        elif jours_restants <= 3:
            return f"{jours_restants}j restants"
        else:
            return f"{jours_restants}j restants"
    except:
        return "Non d√©finie"

def marquer_estimation_acceptee(gestionnaire, estimation_id):
    """Marque une estimation comme accept√©e par le client"""
    try:
        gestionnaire.modifier_statut_formulaire(
            estimation_id, 
            'APPROUV√â',
            1,  # TODO: Utiliser l'utilisateur courant
            "Estimation accept√©e par le client"
        )
        return True
    except Exception as e:
        st.error(f"Erreur marquage acceptation: {e}")
        return False

def get_versions_estimation(gestionnaire, base_estimation_id):
    """R√©cup√®re toutes les versions d'une estimation"""
    try:
        # R√©cup√©rer l'estimation de base
        est_base = gestionnaire.get_formulaire_details(base_estimation_id)
        if not est_base:
            return []
        
        # R√©cup√©rer le num√©ro de base (sans version)
        numero_base = est_base['numero_document'].split(' v')[0]
        
        # Rechercher toutes les estimations avec ce num√©ro de base
        query = """
            SELECT * FROM formulaires 
            WHERE type_formulaire = 'ESTIMATION' 
            AND (numero_document = ? OR numero_document LIKE ?)
            ORDER BY id
        """
        
        rows = gestionnaire.db.execute_query(query, (numero_base, f"{numero_base} v%"))
        versions = [dict(row) for row in rows]
        
        # Ajouter le num√©ro de version depuis les m√©tadonn√©es
        for version in versions:
            try:
                meta = json.loads(version.get('metadonnees_json', '{}'))
                version['version'] = meta.get('version', 1)
            except:
                version['version'] = 1
        
        return sorted(versions, key=lambda x: x['version'])
        
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration versions: {e}")
        return []

def get_prochaine_version_numero(gestionnaire, base_estimation_id):
    """Calcule le prochain num√©ro de version"""
    versions = get_versions_estimation(gestionnaire, base_estimation_id)
    if not versions:
        return 2  # Si pas de versions trouv√©es, commencer √† v2
    
    max_version = max(v.get('version', 1) for v in versions)
    return max_version + 1

def dupliquer_estimation_version(gestionnaire, version_id):
    """Duplique une version d'estimation existante"""
    try:
        # Utiliser la fonction de duplication existante du gestionnaire
        nouveau_id = gestionnaire.db.dupliquer_formulaire(version_id, 'ESTIMATION')
        
        if nouveau_id:
            # Mettre le statut en brouillon pour modification
            gestionnaire.modifier_statut_formulaire(nouveau_id, 'BROUILLON', 1, "Version dupliqu√©e")
        
        return nouveau_id
    except Exception as e:
        st.error(f"Erreur duplication: {e}")
        return None

def convertir_estimation_vers_projet(gestionnaire, estimation_id):
    """Convertit une estimation accept√©e en nouveau projet"""
    try:
        est_details = gestionnaire.get_formulaire_details(estimation_id)
        if not est_details:
            return None
        
        # R√©cup√©ration des m√©tadonn√©es
        try:
            meta = json.loads(est_details.get('metadonnees_json', '{}'))
        except:
            meta = {}
        
        # Donn√©es du nouveau projet
        data_projet = {
            'nom_projet': f"Projet depuis EST {est_details['numero_document']}",
            'client_company_id': est_details.get('company_id'),
            'statut': '√Ä FAIRE',
            'priorite': est_details.get('priorite', 'NORMAL'),
            'prix_estime': est_details.get('montant_total', 0),
            'date_soumis': datetime.now().date(),
            'date_prevu': datetime.now().date() + timedelta(days=meta.get('delai_execution', 30)),
            'description': f"Projet g√©n√©r√© automatiquement depuis l'estimation {est_details['numero_document']}"
        }
        
        # Insertion du nouveau projet
        query = """
            INSERT INTO projects 
            (nom_projet, client_company_id, statut, priorite, prix_estime, date_soumis, date_prevu, description)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        projet_id = gestionnaire.db.execute_insert(query, (
            data_projet['nom_projet'],
            data_projet['client_company_id'],
            data_projet['statut'],
            data_projet['priorite'],
            data_projet['prix_estime'],
            data_projet['date_soumis'],
            data_projet['date_prevu'],
            data_projet['description']
        ))
        
        if projet_id:
            # Mise √† jour de l'estimation
            gestionnaire.modifier_statut_formulaire(
                estimation_id,
                'TERMIN√â',
                est_details.get('employee_id'),
                f"Convertie en projet #{projet_id}"
            )
            
            # Enregistrement de la conversion
            gestionnaire.enregistrer_validation(
                estimation_id,
                est_details.get('employee_id'),
                'CONVERSION',
                f"Estimation convertie en projet #{projet_id}"
            )
        
        return projet_id
        
    except Exception as e:
        st.error(f"Erreur conversion projet: {e}")
        return None

# =============================================================================
# INTERFACES AVANC√âES (SIMPLIFI√âES POUR LA D√âMO)
# =============================================================================

def render_analyse_rentabilite(gestionnaire):
    """Analyse de rentabilit√© des estimations"""
    st.markdown("#### üìä Analyse de Rentabilit√©")
    
    estimations = gestionnaire.get_formulaires('ESTIMATION')
    
    if not estimations:
        st.info("Aucune estimation pour l'analyse de rentabilit√©.")
        return
    
    # M√©triques de rentabilit√©
    col1, col2, col3, col4 = st.columns(4)
    
    total_estimations = len(estimations)
    acceptees = len([e for e in estimations if e['statut'] == 'APPROUV√â'])
    montant_total = sum(e.get('montant_total', 0) for e in estimations)
    montant_accepte = sum(e.get('montant_total', 0) for e in estimations if e['statut'] == 'APPROUV√â')
    
    with col1:
        st.metric("Total Estimations", total_estimations)
    with col2:
        taux_acceptation = (acceptees / total_estimations * 100) if total_estimations > 0 else 0
        st.metric("Taux d'Acceptation", f"{taux_acceptation:.1f}%")
    with col3:
        st.metric("CA Potentiel", f"{montant_total:,.0f}$ CAD")
    with col4:
        st.metric("CA R√©alis√©", f"{montant_accepte:,.0f}$ CAD")
    
    # Analyse par template
    st.markdown("##### üìà Rentabilit√© par Template Industrie")
    
    templates_stats = {}
    for est in estimations:
        template = get_template_from_metadata(est)
        if template not in templates_stats:
            templates_stats[template] = {'total': 0, 'acceptees': 0, 'montant_total': 0, 'montant_accepte': 0}
        
        templates_stats[template]['total'] += 1
        templates_stats[template]['montant_total'] += est.get('montant_total', 0)
        
        if est['statut'] == 'APPROUV√â':
            templates_stats[template]['acceptees'] += 1
            templates_stats[template]['montant_accepte'] += est.get('montant_total', 0)
    
    if templates_stats:
        df_templates = []
        for template, stats in templates_stats.items():
            taux = (stats['acceptees'] / stats['total'] * 100) if stats['total'] > 0 else 0
            df_templates.append({
                'Template': template,
                'Total Estimations': stats['total'],
                'Accept√©es': stats['acceptees'],
                'Taux (%%)': f"{taux:.1f}",
                'CA Potentiel': f"{stats['montant_total']:,.0f}$",
                'CA R√©alis√©': f"{stats['montant_accepte']:,.0f}$"
            })
        
        df = pd.DataFrame(df_templates)
        st.dataframe(df, use_container_width=True)

def render_templates_estimations(gestionnaire):
    """Gestion des templates d'estimation"""
    st.markdown("#### üìã Templates Estimations")
    
    # Affichage des templates disponibles
    templates_industrie = ["AUTOMOBILE", "AERONAUTIQUE", "CONSTRUCTION", "GENERAL"]
    
    for template in templates_industrie:
        with st.expander(f"Template {template}", expanded=False):
            template_info = get_template_info(template)
            
            col1, col2 = st.columns(2)
            with col1:
                st.text(f"Marge par d√©faut: {template_info['marge_defaut']}%")
                st.text(f"D√©lai standard: {template_info['delai_standard']} jours")
                st.text(f"Coefficient complexit√©: {template_info['coefficient_complexite']}")
            
            with col2:
                st.text(f"Garantie: {template_info['garantie']}")
                st.text(f"Conditions paiement: {template_info['conditions_paiement']}")
                st.text(f"Certification: {template_info['cout_certification_pct']}%")
            
            st.markdown("**Clauses techniques:**")
            for clause in template_info['clauses_techniques']:
                st.text(f"‚Ä¢ {clause}")

def render_suivi_commercial(gestionnaire):
    """Suivi commercial des estimations"""
    st.markdown("#### üìà Suivi Commercial")
    
    estimations = gestionnaire.get_formulaires('ESTIMATION')
    estimations_actives = [e for e in estimations if e['statut'] in ['VALID√â', 'ENVOY√â']]
    
    if not estimations_actives:
        st.info("Aucune estimation en cours de n√©gociation.")
        return
    
    st.markdown("##### üìã Estimations en N√©gociation")
    
    for est in estimations_actives:
        with st.expander(f"EST {est['numero_document']} - {est.get('company_nom', 'N/A')}", expanded=False):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Montant", f"{est.get('montant_total', 0):,.2f}$ CAD")
                validite_status = get_validite_status(est)
                st.text(f"Validit√©: {validite_status}")
            
            with col2:
                st.text(f"Commercial: {est.get('employee_nom', 'N/A')}")
                st.text(f"Statut: {est['statut']}")
            
            with col3:
                if st.button(f"üìû Relancer Client", key=f"relance_{est['id']}"):
                    st.info("üìß Relance envoy√©e au client")
                
                if st.button(f"‚úÖ Marquer Accept√©e", key=f"accept_suivi_{est['id']}"):
                    if marquer_estimation_acceptee(gestionnaire, est['id']):
                        st.success("‚úÖ Estimation accept√©e!")
                        st.rerun()

def render_analyse_marges(gestionnaire):
    """Analyse des marges b√©n√©ficiaires"""
    st.markdown("#### üí∞ Analyse des Marges")
    
    estimations = gestionnaire.get_formulaires('ESTIMATION')
    
    if not estimations:
        st.info("Aucune estimation pour l'analyse des marges.")
        return
    
    # Analyse des marges par template
    marges_par_template = {}
    
    for est in estimations:
        try:
            meta = json.loads(est.get('metadonnees_json', '{}'))
            template = meta.get('template_industrie', 'N/A')
            marge = meta.get('marge_beneficiaire', 0)
            
            if template not in marges_par_template:
                marges_par_template[template] = []
            marges_par_template[template].append(marge)
        except:
            continue
    
    if marges_par_template:
        st.markdown("##### üìä Marges Moyennes par Template")
        
        df_marges = []
        for template, marges in marges_par_template.items():
            if marges:
                marge_moyenne = sum(marges) / len(marges)
                marge_min = min(marges)
                marge_max = max(marges)
                
                df_marges.append({
                    'Template': template,
                    'Nombre d\'estimations': len(marges),
                    'Marge Moyenne (%)': f"{marge_moyenne:.1f}",
                    'Marge Min (%)': f"{marge_min:.1f}",
                    'Marge Max (%)': f"{marge_max:.1f}"
                })
        
        if df_marges:
            df = pd.DataFrame(df_marges)
            st.dataframe(df, use_container_width=True)
    
    # Recommandations
    st.markdown("##### üí° Recommandations")
    st.success("‚úÖ Les marges sont coh√©rentes avec les standards de l'industrie")
    st.info("üí° Consid√©rer l'ajustement des marges selon la performance des templates")

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def get_projets_actifs():
    """R√©cup√®re la liste des projets actifs"""
    try:
        query = "SELECT id, nom_projet FROM projects WHERE statut NOT IN ('TERMIN√â', 'ANNUL√â') ORDER BY nom_projet"
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except:
        return []

def get_employes_actifs():
    """R√©cup√®re la liste des employ√©s actifs"""
    try:
        query = "SELECT id, prenom, nom, poste FROM employees WHERE statut = 'ACTIF' ORDER BY prenom, nom"
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except:
        return []

def get_operations_projet(projet_id):
    """R√©cup√®re les op√©rations d'un projet"""
    try:
        query = "SELECT id, sequence_number as sequence, description FROM operations WHERE project_id = ? ORDER BY sequence_number"
        rows = st.session_state.erp_db.execute_query(query, (projet_id,))
        return [dict(row) for row in rows]
    except:
        return []

# =============================================================================
# FONCTIONS UTILITAIRES SP√âCIFIQUES AUX BONS D'ACHATS
# =============================================================================

def get_fournisseurs_actifs():
    """R√©cup√®re la liste des fournisseurs depuis le CRM"""
    try:
        # Dans le syst√®me ERP, les fournisseurs sont des companies avec un secteur sp√©cifique
        # ou peuvent √™tre identifi√©s par un type dans les m√©tadonn√©es
        query = """
            SELECT id, nom, secteur, adresse 
            FROM companies 
            WHERE secteur LIKE '%FOURNISSEUR%' 
               OR secteur LIKE '%DISTRIBUTION%' 
               OR secteur LIKE '%COMMERCE%'
               OR id IN (
                   SELECT DISTINCT company_id 
                   FROM formulaires 
                   WHERE type_formulaire = 'BON_ACHAT'
               )
            ORDER BY nom
        """
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration fournisseurs: {e}")
        return []

def get_articles_inventaire_critique():
    """R√©cup√®re les articles avec stock critique n√©cessitant r√©approvisionnement"""
    try:
        query = """
            SELECT id, nom, type_produit, quantite_imperial, limite_minimale_imperial, statut
            FROM inventory_items 
            WHERE statut IN ('CRITIQUE', 'FAIBLE', '√âPUIS√â')
            ORDER BY 
                CASE statut 
                    WHEN '√âPUIS√â' THEN 1
                    WHEN 'CRITIQUE' THEN 2 
                    WHEN 'FAIBLE' THEN 3
                END, nom
        """
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration stocks critiques: {e}")
        return []

def search_articles_inventaire(search_term):
    """Recherche dans l'inventaire par nom ou type"""
    try:
        if not search_term:
            return []
        
        query = """
            SELECT id, nom, type_produit, quantite_imperial, statut
            FROM inventory_items 
            WHERE LOWER(nom) LIKE LOWER(?) 
               OR LOWER(type_produit) LIKE LOWER(?)
            ORDER BY nom
            LIMIT 10
        """
        search_pattern = f"%{search_term}%"
        rows = st.session_state.erp_db.execute_query(query, (search_pattern, search_pattern))
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur recherche inventaire: {e}")
        return []

def calculer_quantite_recommandee(article):
    """Calcule la quantit√© recommand√©e pour un r√©approvisionnement"""
    try:
        # Logique simple : 2x le stock minimum ou 10 unit√©s minimum
        stock_min_str = article.get('limite_minimale_imperial', '0\' 0"')
        
        # Pour simplifier, on retourne une valeur par d√©faut
        # Dans un vrai syst√®me, il faudrait parser la cha√Æne imp√©riale
        if 'CRITIQUE' in article.get('statut', ''):
            return 20
        elif 'FAIBLE' in article.get('statut', ''):
            return 15
        else:
            return 10
            
    except Exception:
        return 10

def convertir_ba_vers_bc(gestionnaire, ba_id):
    """Conversion rapide BA ‚Üí BC avec param√®tres par d√©faut"""
    try:
        ba_details = gestionnaire.get_formulaire_details(ba_id)
        if not ba_details:
            return None
        
        # Num√©ro BC automatique
        numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
        
        # M√©tadonn√©es BC minimales
        metadonnees_bc = {
            'ba_source_id': ba_id,
            'ba_source_numero': ba_details['numero_document'],
            'conversion_automatique': True,
            'conditions_paiement': '30 jours net'
        }
        
        # Notes de conversion automatique
        notes_bc = f"""=== CONVERSION AUTOMATIQUE ===
Bon de Commande g√©n√©r√© automatiquement depuis {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== NOTES BA SOURCE ===
{ba_details.get('notes', '')}"""
        
        # Donn√©es du BC
        data_bc = {
            'type_formulaire': 'BON_COMMANDE',
            'numero_document': numero_bc,
            'project_id': ba_details.get('project_id'),
            'company_id': ba_details.get('company_id'),
            'employee_id': ba_details.get('employee_id'),
            'statut': 'VALID√â',
            'priorite': ba_details.get('priorite'),
            'date_creation': datetime.now().date(),
            'date_echeance': datetime.now().date() + timedelta(days=14),
            'montant_total': ba_details.get('montant_total', 0),
            'notes': notes_bc,
            'metadonnees_json': json.dumps(metadonnees_bc),
            'lignes': ba_details.get('lignes', [])
        }
        
        # Cr√©ation du BC
        bc_id = gestionnaire.creer_formulaire(data_bc)
        
        if bc_id:
            # Mise √† jour du BA original
            gestionnaire.modifier_statut_formulaire(ba_id, 'TERMIN√â', 
                                                   ba_details.get('employee_id'), 
                                                   f"Converti automatiquement en BC {numero_bc}")
            return numero_bc
        
        return None
        
    except Exception as e:
        st.error(f"Erreur conversion BA‚ÜíBC: {e}")
        return None
