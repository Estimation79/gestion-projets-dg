# formulaires.py - Module Formulaires ERP Production DG Inc.
# Gestion compl√®te des documents m√©tier : Bons de Travail, Achats, Commandes, Devis, Estimations

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional, Any
import json

class GestionnaireFormulaires:
    """
    Gestionnaire unifi√© pour tous les formulaires m√©tier DG Inc.
    - Bons de Travail (BT)
    - Bons d'Achats (BA) 
    - Bons de Commande (BC)
    - Demandes de Prix (DP)
    - Estimations (EST)
    """
    
    def __init__(self, db):
        self.db = db
        self.types_formulaires = {
            'BON_TRAVAIL': {'prefix': 'BT', 'nom': 'Bon de Travail', 'icon': 'üîß'},
            'BON_ACHAT': {'prefix': 'BA', 'nom': "Bon d'Achats", 'icon': 'üõí'},
            'BON_COMMANDE': {'prefix': 'BC', 'nom': 'Bon de Commande', 'icon': 'üì¶'},
            'DEMANDE_PRIX': {'prefix': 'DP', 'nom': 'Demande de Prix', 'icon': 'üí∞'},
            'ESTIMATION': {'prefix': 'EST', 'nom': 'Estimation', 'icon': 'üìä'}
        }
        self.statuts = ['BROUILLON', 'VALID√â', 'ENVOY√â', 'APPROUV√â', 'TERMIN√â', 'ANNUL√â']
        self.priorites = ['NORMAL', 'URGENT', 'CRITIQUE']
    
    def generer_numero_document(self, type_formulaire: str) -> str:
        """G√©n√®re un num√©ro unique pour le document"""
        try:
            config = self.types_formulaires.get(type_formulaire)
            if not config:
                return "ERREUR-001"
            
            prefix = config['prefix']
            annee = datetime.now().year
            
            # R√©cup√©rer le dernier num√©ro pour ce type et cette ann√©e
            query = '''
                SELECT numero_document FROM formulaires 
                WHERE type_formulaire = ? AND numero_document LIKE ?
                ORDER BY id DESC LIMIT 1
            '''
            pattern = f"{prefix}-{annee}-%"
            result = self.db.execute_query(query, (type_formulaire, pattern))
            
            if result:
                last_num = result[0]['numero_document']
                sequence = int(last_num.split('-')[-1]) + 1
            else:
                sequence = 1
            
            return f"{prefix}-{annee}-{sequence:03d}"
            
        except Exception as e:
            st.error(f"Erreur g√©n√©ration num√©ro: {e}")
            return f"ERR-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    def creer_formulaire(self, data: Dict) -> int:
        """Cr√©e un nouveau formulaire dans la base"""
        try:
            # G√©n√©rer num√©ro si pas fourni
            if not data.get('numero_document'):
                data['numero_document'] = self.generer_numero_document(data['type_formulaire'])
            
            query = '''
                INSERT INTO formulaires 
                (type_formulaire, numero_document, project_id, company_id, employee_id,
                 statut, date_creation, montant_total, notes, priorite, date_echeance)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            '''
            
            formulaire_id = self.db.execute_insert(query, (
                data['type_formulaire'],
                data['numero_document'],
                data.get('project_id'),
                data.get('company_id'),
                data.get('employee_id'),
                data.get('statut', 'BROUILLON'),
                data.get('date_creation', datetime.now()),
                data.get('montant_total', 0.0),
                data.get('notes', ''),
                data.get('priorite', 'NORMAL'),
                data.get('date_echeance')
            ))
            
            # Ajouter les lignes de d√©tail si fournies
            if data.get('lignes') and formulaire_id:
                self.ajouter_lignes_formulaire(formulaire_id, data['lignes'])
            
            # Enregistrer la cr√©ation
            self.enregistrer_validation(formulaire_id, data.get('employee_id'), 'CREATION', 'Document cr√©√©')
            
            return formulaire_id
            
        except Exception as e:
            st.error(f"Erreur cr√©ation formulaire: {e}")
            return None
    
    def ajouter_lignes_formulaire(self, formulaire_id: int, lignes: List[Dict]):
        """Ajoute les lignes de d√©tail √† un formulaire"""
        try:
            for i, ligne in enumerate(lignes, 1):
                query = '''
                    INSERT INTO formulaire_lignes
                    (formulaire_id, sequence_ligne, description, quantite, unite,
                     prix_unitaire, montant_ligne, reference_materiau, code_article)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                '''
                
                montant_ligne = float(ligne.get('quantite', 0)) * float(ligne.get('prix_unitaire', 0))
                
                self.db.execute_insert(query, (
                    formulaire_id,
                    i,
                    ligne.get('description', ''),
                    ligne.get('quantite', 0),
                    ligne.get('unite', 'UN'),
                    ligne.get('prix_unitaire', 0),
                    montant_ligne,
                    ligne.get('reference_materiau'),
                    ligne.get('code_article', '')
                ))
                
        except Exception as e:
            st.error(f"Erreur ajout lignes: {e}")
    
    def get_formulaires(self, type_formulaire: str = None, statut: str = None) -> List[Dict]:
        """R√©cup√®re les formulaires avec filtres optionnels"""
        try:
            query = '''
                SELECT f.*, c.nom as company_nom, e.prenom || ' ' || e.nom as employee_nom,
                       p.nom_projet as project_nom
                FROM formulaires f
                LEFT JOIN companies c ON f.company_id = c.id
                LEFT JOIN employees e ON f.employee_id = e.id  
                LEFT JOIN projects p ON f.project_id = p.id
                WHERE 1=1
            '''
            params = []
            
            if type_formulaire:
                query += " AND f.type_formulaire = ?"
                params.append(type_formulaire)
            
            if statut:
                query += " AND f.statut = ?"
                params.append(statut)
            
            query += " ORDER BY f.id DESC"
            
            rows = self.db.execute_query(query, tuple(params))
            return [dict(row) for row in rows]
            
        except Exception as e:
            st.error(f"Erreur r√©cup√©ration formulaires: {e}")
            return []
    
    def get_formulaire_details(self, formulaire_id: int) -> Dict:
        """R√©cup√®re les d√©tails complets d'un formulaire"""
        try:
            # Formulaire principal
            query = '''
                SELECT f.*, c.nom as company_nom, e.prenom || ' ' || e.nom as employee_nom,
                       p.nom_projet as project_nom
                FROM formulaires f
                LEFT JOIN companies c ON f.company_id = c.id
                LEFT JOIN employees e ON f.employee_id = e.id
                LEFT JOIN projects p ON f.project_id = p.id
                WHERE f.id = ?
            '''
            result = self.db.execute_query(query, (formulaire_id,))
            if not result:
                return {}
            
            formulaire = dict(result[0])
            
            # Lignes de d√©tail
            query_lignes = '''
                SELECT * FROM formulaire_lignes 
                WHERE formulaire_id = ? 
                ORDER BY sequence_ligne
            '''
            lignes = self.db.execute_query(query_lignes, (formulaire_id,))
            formulaire['lignes'] = [dict(ligne) for ligne in lignes]
            
            # Historique validations
            query_validations = '''
                SELECT fv.*, e.prenom || ' ' || e.nom as validator_nom
                FROM formulaire_validations fv
                LEFT JOIN employees e ON fv.employee_id = e.id
                WHERE fv.formulaire_id = ?
                ORDER BY fv.date_validation DESC
            '''
            validations = self.db.execute_query(query_validations, (formulaire_id,))
            formulaire['validations'] = [dict(val) for val in validations]
            
            return formulaire
            
        except Exception as e:
            st.error(f"Erreur r√©cup√©ration d√©tails: {e}")
            return {}
    
    def modifier_statut_formulaire(self, formulaire_id: int, nouveau_statut: str, employee_id: int, commentaires: str = ""):
        """Modifie le statut d'un formulaire avec tra√ßabilit√©"""
        try:
            # Mettre √† jour le statut
            query = "UPDATE formulaires SET statut = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?"
            self.db.execute_update(query, (nouveau_statut, formulaire_id))
            
            # Enregistrer la validation
            self.enregistrer_validation(formulaire_id, employee_id, 'CHANGEMENT_STATUT', 
                                      f"Statut modifi√© vers {nouveau_statut}. {commentaires}")
            
            return True
            
        except Exception as e:
            st.error(f"Erreur modification statut: {e}")
            return False
    
    def enregistrer_validation(self, formulaire_id: int, employee_id: int, type_validation: str, commentaires: str):
        """Enregistre une validation/action sur un formulaire"""
        try:
            query = '''
                INSERT INTO formulaire_validations
                (formulaire_id, employee_id, type_validation, commentaires, date_validation)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
            '''
            self.db.execute_insert(query, (formulaire_id, employee_id, type_validation, commentaires))
            
        except Exception as e:
            st.error(f"Erreur enregistrement validation: {e}")
    
    def get_statistiques_formulaires(self) -> Dict:
        """Calcule les statistiques des formulaires"""
        try:
            stats = {}
            
            for type_form, config in self.types_formulaires.items():
                query = '''
                    SELECT statut, COUNT(*) as count, SUM(montant_total) as total_montant
                    FROM formulaires 
                    WHERE type_formulaire = ?
                    GROUP BY statut
                '''
                result = self.db.execute_query(query, (type_form,))
                
                stats[type_form] = {
                    'total': 0,
                    'par_statut': {},
                    'montant_total': 0.0
                }
                
                for row in result:
                    stats[type_form]['total'] += row['count']
                    stats[type_form]['par_statut'][row['statut']] = row['count']
                    stats[type_form]['montant_total'] += row['total_montant'] or 0
            
            return stats
            
        except Exception as e:
            st.error(f"Erreur calcul statistiques: {e}")
            return {}

# =============================================================================
# INTERFACES UTILISATEUR PAR TYPE DE FORMULAIRE
# =============================================================================

def show_formulaires_page():
    """Page principale du module Formulaires"""
    st.markdown("## üìë Gestion des Formulaires - DG Inc.")
    
    # Initialisation du gestionnaire
    if 'gestionnaire_formulaires' not in st.session_state:
        st.session_state.gestionnaire_formulaires = GestionnaireFormulaires(st.session_state.erp_db)
    
    gestionnaire = st.session_state.gestionnaire_formulaires
    
    # Statistiques globales
    show_formulaires_dashboard(gestionnaire)
    
    # Tabs pour chaque type de formulaire
    tab_bt, tab_ba, tab_bc, tab_dp, tab_est = st.tabs([
        "üîß Bons de Travail",
        "üõí Bons d'Achats", 
        "üì¶ Bons de Commande",
        "üí∞ Demandes de Prix",
        "üìä Estimations"
    ])
    
    with tab_bt:
        render_bons_travail_tab(gestionnaire)
    
    with tab_ba:
        render_bons_achats_tab(gestionnaire)
    
    with tab_bc:
        render_bons_commande_tab(gestionnaire)
    
    with tab_dp:
        render_demandes_prix_tab(gestionnaire)
    
    with tab_est:
        render_estimations_tab(gestionnaire)

def show_formulaires_dashboard(gestionnaire):
    """Dashboard des formulaires avec m√©triques"""
    st.markdown("### üìä Dashboard Formulaires")
    
    stats = gestionnaire.get_statistiques_formulaires()
    
    if not any(stats.values()):
        st.info("Aucun formulaire cr√©√©. Commencez par cr√©er votre premier document.")
        return
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    for i, (type_form, config) in enumerate(gestionnaire.types_formulaires.items()):
        with [col1, col2, col3, col4, col5][i]:
            type_stats = stats.get(type_form, {})
            st.metric(
                f"{config['icon']} {config['nom']}",
                type_stats.get('total', 0),
                delta=f"{type_stats.get('montant_total', 0):,.0f}$ CAD"
            )
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # R√©partition par type
        types_data = []
        for type_form, config in gestionnaire.types_formulaires.items():
            total = stats.get(type_form, {}).get('total', 0)
            if total > 0:
                types_data.append({'Type': config['nom'], 'Nombre': total})
        
        if types_data:
            df_types = pd.DataFrame(types_data)
            fig = px.pie(df_types, values='Nombre', names='Type', 
                        title="üìä R√©partition par Type de Formulaire")
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # √âvolution par statut
        statuts_data = []
        for type_form, type_stats in stats.items():
            for statut, count in type_stats.get('par_statut', {}).items():
                statuts_data.append({
                    'Statut': statut,
                    'Nombre': count,
                    'Type': gestionnaire.types_formulaires[type_form]['nom']
                })
        
        if statuts_data:
            df_statuts = pd.DataFrame(statuts_data)
            fig = px.bar(df_statuts, x='Statut', y='Nombre', color='Type',
                        title="üìà Documents par Statut")
            st.plotly_chart(fig, use_container_width=True)

def render_bons_travail_tab(gestionnaire):
    """Interface pour les Bons de Travail"""
    st.markdown("### üîß Bons de Travail")
    
    # Actions rapides
    col_action1, col_action2, col_action3 = st.columns(3)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Travail", use_container_width=True, key="bt_nouveau"):
            st.session_state.form_action = "create_bon_travail"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bt_liste"):
            st.session_state.form_action = "list_bon_travail"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="bt_stats"):
            st.session_state.form_action = "stats_bon_travail"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_travail')
    
    if action == "create_bon_travail":
        render_bon_travail_form(gestionnaire)
    elif action == "list_bon_travail":
        render_bon_travail_list(gestionnaire)
    elif action == "stats_bon_travail":
        render_bon_travail_stats(gestionnaire)

def render_bon_travail_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Travail"""
    st.markdown("#### ‚ûï Nouveau Bon de Travail")
    
    with st.form("bon_travail_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bt = gestionnaire.generer_numero_document('BON_TRAVAIL')
            st.text_input("N¬∞ Bon de Travail", value=numero_bt, disabled=True)
            
            # S√©lection projet
            projets = get_projets_actifs()
            projet_options = [("", "S√©lectionner un projet")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet *",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un employ√©")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date d'√âch√©ance", datetime.now().date() + timedelta(days=7))
        
        # Description du travail
        description = st.text_area("Description du Travail *", height=100)
        
        # Op√©rations √† r√©aliser
        st.markdown("##### üîß Op√©rations √† R√©aliser")
        if projet_id:
            operations_projet = get_operations_projet(projet_id)
            operations_selectionnees = st.multiselect(
                "Op√©rations",
                options=[op['id'] for op in operations_projet],
                format_func=lambda x: next((f"{op['sequence']} - {op['description']}" for op in operations_projet if op['id'] == x), "")
            )
        else:
            st.info("S√©lectionnez un projet pour voir les op√©rations disponibles")
            operations_selectionnees = []
        
        # Employ√©s assign√©s
        st.markdown("##### üë• √âquipe Assign√©e")
        employes_assignes = st.multiselect(
            "Employ√©s Assign√©s",
            options=[e['id'] for e in employes],
            format_func=lambda x: next((f"{e['prenom']} {e['nom']} - {e['poste']}" for e in employes if e['id'] == x), "")
        )
        
        # Mat√©riaux n√©cessaires
        st.markdown("##### üì¶ Mat√©riaux Requis")
        col_mat1, col_mat2, col_mat3, col_mat4 = st.columns(4)
        
        # Interface dynamique pour mat√©riaux (simplifi√© pour l'exemple)
        materiaux_lines = []
        for i in range(3):  # 3 lignes par d√©faut
            with col_mat1:
                if i == 0:
                    st.text("Description")
                desc = st.text_input("", key=f"bt_mat_desc_{i}", placeholder="Description mat√©riau")
            with col_mat2:
                if i == 0:
                    st.text("Quantit√©")
                qty = st.number_input("", min_value=0.0, key=f"bt_mat_qty_{i}", format="%.2f")
            with col_mat3:
                if i == 0:
                    st.text("Unit√©")
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L"], key=f"bt_mat_unit_{i}")
            with col_mat4:
                if i == 0:
                    st.text("Co√ªt Unit.")
                cout = st.number_input("", min_value=0.0, key=f"bt_mat_cost_{i}", format="%.2f")
            
            if desc and qty > 0:
                materiaux_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': cout
                })
        
        # Notes sp√©ciales
        notes = st.text_area("Notes Sp√©ciales", height=80)
        
        # Boutons de soumission
        col_submit1, col_submit2 = st.columns(2)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bt_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bt_submit_valide")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide:
            if not projet_id or not employe_id or not description:
                st.error("Veuillez remplir tous les champs obligatoires (*)")
            else:
                # Calcul montant total estim√©
                montant_total = sum(mat['quantite'] * mat['prix_unitaire'] for mat in materiaux_lines)
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_TRAVAIL',
                    'numero_document': numero_bt,
                    'project_id': projet_id,
                    'employee_id': employe_id,
                    'statut': 'VALID√â' if submit_valide else 'BROUILLON',
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total,
                    'notes': f"Description: {description}\n\nOp√©rations: {', '.join(map(str, operations_selectionnees))}\n\nEmploy√©s: {', '.join(map(str, employes_assignes))}\n\nNotes: {notes}",
                    'lignes': materiaux_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    st.success(f"‚úÖ Bon de Travail {numero_bt} cr√©√© avec succ√®s!")
                    st.session_state.form_action = "list_bon_travail"
                    st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Travail")

def render_bon_travail_list(gestionnaire):
    """Liste des Bons de Travail"""
    st.markdown("#### üìã Liste des Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucun Bon de Travail cr√©√©.")
        return
    
    # Filtres
    col_f1, col_f2, col_f3 = st.columns(3)
    with col_f1:
        filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
    with col_f2:
        filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
    with col_f3:
        recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, projet...")
    
    # Application des filtres
    bons_filtres = []
    for bt in bons_travail:
        if bt['statut'] in filtre_statut and bt['priorite'] in filtre_priorite:
            if not recherche or recherche.lower() in str(bt.get('numero_document', '')).lower() or recherche.lower() in str(bt.get('project_nom', '')).lower():
                bons_filtres.append(bt)
    
    # Affichage tableau
    if bons_filtres:
        df_data = []
        for bt in bons_filtres:
            df_data.append({
                'N¬∞ Document': bt['numero_document'],
                'Projet': bt.get('project_nom', 'N/A'),
                'Responsable': bt.get('employee_nom', 'N/A'),
                'Statut': bt['statut'],
                'Priorit√©': bt['priorite'],
                'Date Cr√©ation': bt['date_creation'][:10] if bt['date_creation'] else 'N/A',
                'Montant': f"{bt.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4, col_action5 = st.columns(5)
        
        with col_action1:
            bc_selectionne = st.selectbox("S√©lectionner un BC", 
                                        options=[bc['id'] for bc in bons_filtres],
                                        format_func=lambda x: next((bc['numero_document'] for bc in bons_filtres if bc['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="bc_voir_details"):
                if bc_selectionne:
                    st.session_state.selected_formulaire_id = bc_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="bc_modifier"):
                if bc_selectionne:
                    st.session_state.form_action = "edit_bon_commande"
                    st.session_state.edit_formulaire_id = bc_selectionne
        
        with col_action4:
            if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_action"):
                if bc_selectionne:
                    st.session_state.selected_bc_livraison = bc_selectionne
                    st.session_state.form_action = "track_deliveries"
                    st.rerun()
        
        with col_action5:
            if st.button("üì• Marquer Re√ßu", use_container_width=True, key="bc_marquer_recu"):
                if bc_selectionne:
                    if marquer_bc_recu(gestionnaire, bc_selectionne):
                        st.success("‚úÖ BC marqu√© comme re√ßu!")
                        st.rerun()
    else:
        st.info("Aucun Bon de Commande ne correspond aux crit√®res de recherche.")

def render_delivery_tracking(gestionnaire):
    """Interface de suivi des livraisons"""
    st.markdown("#### üöö Suivi des Livraisons")
    
    # R√©cup√©ration des approvisionnements li√©s aux BCs
    try:
        query = """
            SELECT a.*, f.numero_document, c.nom as fournisseur_nom,
                   e.prenom || ' ' || e.nom as responsable_nom
            FROM approvisionnements a
            JOIN formulaires f ON a.formulaire_id = f.id
            JOIN companies c ON f.company_id = c.id
            LEFT JOIN employees e ON f.employee_id = e.id
            WHERE f.type_formulaire = 'BON_COMMANDE'
            ORDER BY a.date_livraison_prevue ASC
        """
        
        approvisionnements = gestionnaire.db.execute_query(query)
        appros = [dict(row) for row in approvisionnements]
        
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration approvisionnements: {e}")
        appros = []
    
    if not appros:
        st.info("Aucun approvisionnement en cours de suivi.")
        return
    
    # M√©triques de livraison
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    
    with col_m1:
        st.metric("üì¶ Total Livraisons", len(appros))
    with col_m2:
        en_attente = len([a for a in appros if a['statut_livraison'] in ['EN_ATTENTE', 'CONFIRM√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        en_transit = len([a for a in appros if a['statut_livraison'] == 'EXP√âDI√â'])
        st.metric("üöõ En Transit", en_transit)
    with col_m4:
        livrees = len([a for a in appros if a['statut_livraison'] == 'LIVR√â'])
        st.metric("‚úÖ Livr√©es", livrees)
    
    # Alertes de retard
    today = datetime.now().date()
    retards = []
    for appro in appros:
        try:
            date_prevue = datetime.strptime(appro['date_livraison_prevue'], '%Y-%m-%d').date()
            if date_prevue < today and appro['statut_livraison'] not in ['LIVR√â', 'ANNUL√â']:
                retards.append(appro)
        except:
            continue
    
    if retards:
        st.error(f"üö® {len(retards)} livraison(s) en retard d√©tect√©e(s)!")
        
        # Affichage des retards
        with st.expander("üìã D√©tails des Retards", expanded=True):
            for retard in retards:
                try:
                    date_prevue = datetime.strptime(retard['date_livraison_prevue'], '%Y-%m-%d').date()
                    jours_retard = (today - date_prevue).days
                    
                    st.error(f"""
                    **BC {retard['numero_document']}** - {retard['fournisseur_nom']}
                    - Livraison pr√©vue : {date_prevue.strftime('%d/%m/%Y')}
                    - Retard : {jours_retard} jour(s)
                    - Statut : {retard['statut_livraison']}
                    """)
                except:
                    continue
    
    # Interface de suivi principal
    st.markdown("##### üìã Tableau de Suivi")
    
    # Filtres
    col_f1, col_f2 = st.columns(2)
    with col_f1:
        filtre_statut_livraison = st.multiselect("Statut Livraison", 
            ['EN_ATTENTE', 'CONFIRM√â', 'EN_PRODUCTION', 'EXP√âDI√â', 'LIVR√â', 'ANNUL√â'],
            default=['EN_ATTENTE', 'CONFIRM√â', 'EN_PRODUCTION', 'EXP√âDI√â'])
    with col_f2:
        filtre_fournisseur_suivi = st.selectbox("Fournisseur", 
            ['Tous'] + list(set([a['fournisseur_nom'] for a in appros])))
    
    # Application des filtres
    appros_filtres = []
    for appro in appros:
        if appro['statut_livraison'] in filtre_statut_livraison:
            if filtre_fournisseur_suivi == 'Tous' or appro['fournisseur_nom'] == filtre_fournisseur_suivi:
                appros_filtres.append(appro)
    
    # Tableau de suivi
    if appros_filtres:
        for appro in appros_filtres:
            with st.container():
                col_info, col_statut, col_actions = st.columns([3, 1, 1])
                
                with col_info:
                    try:
                        date_prevue = datetime.strptime(appro['date_livraison_prevue'], '%Y-%m-%d').date()
                        jours_restants = (date_prevue - today).days
                        
                        if jours_restants < 0:
                            date_info = f"üî¥ En retard de {abs(jours_restants)} jour(s)"
                        elif jours_restants <= 2:
                            date_info = f"üü° Imminent ({jours_restants} jour(s))"
                        else:
                            date_info = f"üü¢ Dans {jours_restants} jour(s)"
                    except:
                        date_info = "‚ùì Date invalide"
                    
                    st.markdown(f"""
                    **BC {appro['numero_document']}** - {appro['fournisseur_nom']}
                    - Responsable : {appro['responsable_nom']}
                    - Livraison pr√©vue : {appro['date_livraison_prevue']} - {date_info}
                    - Quantit√© : {appro.get('quantite_commandee', 'N/A')}
                    """)
                
                with col_statut:
                    # S√©lecteur de statut
                    nouveaux_statuts = ['EN_ATTENTE', 'CONFIRM√â', 'EN_PRODUCTION', 'EXP√âDI√â', 'LIVR√â', 'ANNUL√â']
                    statut_actuel = appro['statut_livraison']
                    
                    nouveau_statut = st.selectbox(
                        f"Statut", 
                        nouveaux_statuts,
                        index=nouveaux_statuts.index(statut_actuel) if statut_actuel in nouveaux_statuts else 0,
                        key=f"bc_statut_{appro['id']}"
                    )
                
                with col_actions:
                    # Bouton de mise √† jour
                    if st.button("üíæ Mettre √† jour", key=f"bc_update_{appro['id']}", use_container_width=True):
                        if mettre_a_jour_statut_livraison(gestionnaire, appro['id'], nouveau_statut):
                            st.success(f"‚úÖ Statut mis √† jour: {nouveau_statut}")
                            st.rerun()
                    
                    # Bouton de d√©tails
                    if st.button("üëÅÔ∏è D√©tails", key=f"bc_details_{appro['id']}", use_container_width=True):
                        st.session_state.selected_appro_details = appro['id']
                
                # Notes de livraison
                if appro.get('notes_livraison'):
                    st.text(f"üìù Notes: {appro['notes_livraison']}")
                
                st.markdown("---")
    
    # Section de mise √† jour rapide
    st.markdown("##### ‚ö° Mise √† Jour Rapide")
    
    col_rapid1, col_rapid2, col_rapid3 = st.columns(3)
    
    with col_rapid1:
        if st.button("üì¶ Marquer Plusieurs comme Exp√©di√©s", use_container_width=True, key="bc_marquer_expedies"):
            count = 0
            for appro in appros_filtres:
                if appro['statut_livraison'] == 'CONFIRM√â':
                    if mettre_a_jour_statut_livraison(gestionnaire, appro['id'], 'EXP√âDI√â'):
                        count += 1
            if count > 0:
                st.success(f"‚úÖ {count} livraison(s) marqu√©e(s) comme exp√©di√©es")
                st.rerun()
    
    with col_rapid2:
        if st.button("‚úÖ Marquer Arriv√©es Aujourd'hui", use_container_width=True, key="bc_marquer_arrives"):
            count = 0
            for appro in appros_filtres:
                try:
                    date_prevue = datetime.strptime(appro['date_livraison_prevue'], '%Y-%m-%d').date()
                    if date_prevue <= today and appro['statut_livraison'] == 'EXP√âDI√â':
                        if mettre_a_jour_statut_livraison(gestionnaire, appro['id'], 'LIVR√â'):
                            count += 1
                except:
                    continue
            if count > 0:
                st.success(f"‚úÖ {count} livraison(s) marqu√©e(s) comme livr√©es")
                st.rerun()
    
    with col_rapid3:
        if st.button("üìß Relancer Fournisseurs en Retard", use_container_width=True, key="bc_relancer_retards"):
            if retards:
                st.info(f"üìß Notifications envoy√©es pour {len(retards)} commande(s) en retard")
                # Ici on pourrait impl√©menter l'envoi d'emails automatiques

def render_reception_marchandises(gestionnaire):
    """Interface de r√©ception des marchandises avec mise √† jour inventaire"""
    st.markdown("#### üì• R√©ception des Marchandises")
    
    # R√©cup√©ration des BCs exp√©di√©s ou livr√©s
    try:
        query = """
            SELECT f.*, c.nom as fournisseur_nom, a.id as appro_id, a.statut_livraison,
                   a.date_livraison_prevue, a.quantite_commandee, a.quantite_livree
            FROM formulaires f
            JOIN companies c ON f.company_id = c.id
            LEFT JOIN approvisionnements a ON f.id = a.formulaire_id
            WHERE f.type_formulaire = 'BON_COMMANDE' 
            AND f.statut IN ('ENVOY√â', 'APPROUV√â')
            AND (a.statut_livraison IN ('EXP√âDI√â', 'LIVR√â') OR a.statut_livraison IS NULL)
            ORDER BY f.date_echeance ASC
        """
        
        livraisons_attendues = gestionnaire.db.execute_query(query)
        livraisons = [dict(row) for row in livraisons_attendues]
        
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration livraisons: {e}")
        livraisons = []
    
    if not livraisons:
        st.info("Aucune livraison en attente de r√©ception.")
        return
    
    # S√©lection de la livraison √† traiter
    st.markdown("##### üì¶ S√©lection de la Livraison")
    
    livraison_options = [
        (liv['id'], f"{liv['numero_document']} - {liv['fournisseur_nom']} - {liv.get('date_echeance', 'N/A')}")
        for liv in livraisons
    ]
    
    livraison_id = st.selectbox(
        "Livraison √† R√©ceptionner",
        options=[l[0] for l in livraison_options],
        format_func=lambda x: next((l[1] for l in livraison_options if l[0] == x), "")
    )
    
    if livraison_id:
        livraison_selectionnee = next((l for l in livraisons if l['id'] == livraison_id), None)
        
        if livraison_selectionnee:
            # Affichage des d√©tails de la livraison
            st.markdown("##### üìã D√©tails de la Livraison")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BC :** {livraison_selectionnee['numero_document']}
                **Fournisseur :** {livraison_selectionnee['fournisseur_nom']}
                **Date Pr√©vue :** {livraison_selectionnee.get('date_echeance', 'N/A')}
                **Montant :** {livraison_selectionnee.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut BC :** {livraison_selectionnee['statut']}
                **Statut Livraison :** {livraison_selectionnee.get('statut_livraison', 'N/A')}
                **Qt√© Command√©e :** {livraison_selectionnee.get('quantite_commandee', 'N/A')}
                **Qt√© D√©j√† Re√ßue :** {livraison_selectionnee.get('quantite_livree', 0)}
                """)
            
            # R√©cup√©ration des lignes du BC
            bc_details = gestionnaire.get_formulaire_details(livraison_id)
            lignes_bc = bc_details.get('lignes', [])
            
            if lignes_bc:
                st.markdown("##### üìù Articles √† R√©ceptionner")
                
                with st.form(f"reception_form_{livraison_id}"):
                    # En-t√™te du formulaire de r√©ception
                    col_form1, col_form2 = st.columns(2)
                    
                    with col_form1:
                        date_reception = st.date_input("Date de R√©ception", datetime.now().date())
                        numero_bon_livraison = st.text_input("N¬∞ Bon de Livraison",
                                                           placeholder="Num√©ro du transporteur")
                    
                    with col_form2:
                        responsable_reception = st.selectbox("Responsable R√©ception",
                            [e['id'] for e in get_employes_actifs()],
                            format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in get_employes_actifs() if e['id'] == x), ""))
                        
                        etat_emballage = st.selectbox("√âtat Emballage", 
                            ["Parfait", "L√©gers dommages", "Dommages importants", "Emballage d√©truit"])
                    
                    # Tableau de r√©ception des articles
                    st.markdown("**Articles Re√ßus :**")
                    
                    col_head1, col_head2, col_head3, col_head4, col_head5, col_head6 = st.columns([3, 1, 1, 1, 1, 2])
                    with col_head1:
                        st.markdown("**Article**")
                    with col_head2:
                        st.markdown("**Command√©**")
                    with col_head3:
                        st.markdown("**Re√ßu**")
                    with col_head4:
                        st.markdown("**√âtat**")
                    with col_head5:
                        st.markdown("**Conforme**")
                    with col_head6:
                        st.markdown("**Remarques**")
                    
                    articles_reception = []
                    
                    for i, ligne in enumerate(lignes_bc):
                        col1, col2, col3, col4, col5, col6 = st.columns([3, 1, 1, 1, 1, 2])
                        
                        with col1:
                            st.text(ligne['description'][:40] + "..." if len(ligne['description']) > 40 else ligne['description'])
                        
                        with col2:
                            st.text(f"{ligne['quantite']} {ligne['unite']}")
                        
                        with col3:
                            qte_recue = st.number_input("", min_value=0.0, max_value=float(ligne['quantite']),
                                                      value=float(ligne['quantite']), key=f"bc_qte_{i}",
                                                      format="%.2f", step=0.1)
                        
                        with col4:
                            etat_article = st.selectbox("", ["Parfait", "Acceptable", "D√©fectueux", "Manquant"],
                                                       key=f"bc_etat_{i}", index=0)
                        
                        with col5:
                            conforme = st.checkbox("", value=True, key=f"bc_conforme_{i}")
                        
                        with col6:
                            remarques = st.text_input("", placeholder="Remarques...", key=f"bc_rem_{i}")
                        
                        articles_reception.append({
                            'ligne_id': ligne['id'],
                            'description': ligne['description'],
                            'quantite_commandee': ligne['quantite'],
                            'quantite_recue': qte_recue,
                            'unite': ligne['unite'],
                            'etat_article': etat_article,
                            'conforme': conforme,
                            'remarques': remarques,
                            'prix_unitaire': ligne.get('prix_unitaire', 0)
                        })
                    
                    # Options de r√©ception
                    st.markdown("##### ‚öôÔ∏è Options de R√©ception")
                    
                    col_opt1, col_opt2 = st.columns(2)
                    with col_opt1:
                        reception_complete = st.checkbox("R√©ception Compl√®te", value=True)
                        mise_a_jour_inventaire = st.checkbox("Mettre √† Jour l'Inventaire", value=True)
                    
                    with col_opt2:
                        generer_rapport = st.checkbox("G√©n√©rer Rapport de R√©ception", value=True)
                        notifier_demandeur = st.checkbox("Notifier le Demandeur", value=True)
                    
                    # Notes g√©n√©rales de r√©ception
                    notes_reception = st.text_area("Notes de R√©ception",
                                                 placeholder="Observations g√©n√©rales, probl√®mes rencontr√©s...")
                    
                    # R√©capitulatif
                    total_commande = sum(art['quantite_commandee'] for art in articles_reception)
                    total_recu = sum(art['quantite_recue'] for art in articles_reception)
                    articles_conformes = sum(1 for art in articles_reception if art['conforme'])
                    
                    st.markdown(f"""
                    <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                        <h5 style='color:#1e40af;margin:0;'>üìä R√©capitulatif de R√©ception</h5>
                        <p style='margin:0.5rem 0 0 0;'>Articles command√©s : {len(lignes_bc)}</p>
                        <p style='margin:0;'>Quantit√© totale command√©e : {total_commande}</p>
                        <p style='margin:0;'>Quantit√© totale re√ßue : {total_recu}</p>
                        <p style='margin:0;'>Articles conformes : {articles_conformes}/{len(articles_reception)}</p>
                        <p style='margin:0;'><strong>Taux de r√©ception : {(total_recu/total_commande*100) if total_commande > 0 else 0:.1f}%</strong></p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Boutons de validation
                    col_submit1, col_submit2 = st.columns(2)
                    
                    with col_submit1:
                        submit_reception = st.form_submit_button("‚úÖ Valider la R√©ception", use_container_width=True, key="bc_valider_reception")
                    
                    with col_submit2:
                        submit_reception_partielle = st.form_submit_button("üì¶ R√©ception Partielle", use_container_width=True, key="bc_reception_partielle")
                    
                    # Traitement de la r√©ception
                    if submit_reception or submit_reception_partielle:
                        try:
                            # Mise √† jour du statut de livraison
                            if livraison_selectionnee.get('appro_id'):
                                nouveau_statut = 'LIVR√â' if submit_reception else 'PARTIELLEMENT_LIVR√â'
                                gestionnaire.db.update_approvisionnement_status(
                                    livraison_selectionnee['appro_id'], 
                                    nouveau_statut,
                                    f"R√©ception {date_reception.strftime('%d/%m/%Y')} - {notes_reception}"
                                )
                            
                            # Mise √† jour de l'inventaire si demand√©
                            if mise_a_jour_inventaire:
                                articles_maj_inventaire = 0
                                for article in articles_reception:
                                    if article['quantite_recue'] > 0 and article['conforme']:
                                        # Ici on pourrait faire le lien avec l'inventaire
                                        # En recherchant par description ou code_article
                                        articles_maj_inventaire += 1
                                
                                if articles_maj_inventaire > 0:
                                    st.info(f"üì¶ {articles_maj_inventaire} article(s) mis √† jour dans l'inventaire")
                            
                            # Mise √† jour du statut du BC
                            nouveau_statut_bc = 'TERMIN√â' if reception_complete else 'APPROUV√â'
                            gestionnaire.modifier_statut_formulaire(
                                livraison_id,
                                nouveau_statut_bc,
                                responsable_reception,
                                f"R√©ception marchandises - {notes_reception}"
                            )
                            
                            # Enregistrement de la r√©ception dans l'historique
                            recap_reception = f"""=== R√âCEPTION MARCHANDISES ===
Date : {date_reception.strftime('%d/%m/%Y')}
Responsable : {next((f"{e['prenom']} {e['nom']}" for e in get_employes_actifs() if e['id'] == responsable_reception), 'N/A')}
N¬∞ Bon livraison : {numero_bon_livraison}
√âtat emballage : {etat_emballage}

=== ARTICLES RE√áUS ===
{chr(10).join([f"- {art['description']} : {art['quantite_recue']}/{art['quantite_commandee']} {art['unite']} - {art['etat_article']} - {'Conforme' if art['conforme'] else 'Non conforme'}" for art in articles_reception])}

=== R√âCAPITULATIF ===
Total command√© : {total_commande}
Total re√ßu : {total_recu} 
Taux r√©ception : {(total_recu/total_commande*100) if total_commande > 0 else 0:.1f}%
Articles conformes : {articles_conformes}/{len(articles_reception)}

=== NOTES ===
{notes_reception}"""
                            
                            gestionnaire.enregistrer_validation(
                                livraison_id,
                                responsable_reception,
                                'RECEPTION_MARCHANDISES',
                                recap_reception
                            )
                            
                            # Message de succ√®s
                            st.success(f"""
                            ‚úÖ **R√©ception Valid√©e avec Succ√®s !**
                            
                            üì¶ **BC {livraison_selectionnee['numero_document']}** marqu√© comme {nouveau_statut_bc}
                            üìä **{total_recu}/{total_commande}** articles r√©ceptionn√©s
                            ‚úÖ **{articles_conformes}** article(s) conforme(s)
                            """)
                            
                            # Actions suivantes
                            col_next1, col_next2 = st.columns(2)
                            with col_next1:
                                if st.button("üìã Retour Liste BC", use_container_width=True, key="bc_retour_liste_reception"):
                                    st.session_state.form_action = "list_bon_commande"
                                    st.rerun()
                            with col_next2:
                                if st.button("üì• Autre R√©ception", use_container_width=True, key="bc_autre_reception"):
                                    st.rerun()
                                    
                        except Exception as e:
                            st.error(f"‚ùå Erreur lors de la r√©ception: {e}")

def render_bon_commande_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons de Commande"""
    st.markdown("#### üìä Statistiques Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
    montant_moyen = montant_total / len(bons_commande) if bons_commande else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_commande) * 100) if bons_commande else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Analyses de performance
    col_perf1, col_perf2 = st.columns(2)
    
    with col_perf1:
        # D√©lais de livraison
        st.markdown("##### ‚è±Ô∏è Performance Livraisons")
        
        try:
            # Calcul des d√©lais de livraison
            delais_info = []
            for bc in bons_commande:
                if bc.get('date_echeance') and bc['statut'] == 'TERMIN√â':
                    try:
                        date_commande = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
                        date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                        delai = (date_livraison - date_commande).days
                        delais_info.append(delai)
                    except:
                        continue
            
            if delais_info:
                delai_moyen = sum(delais_info) / len(delais_info)
                delai_min = min(delais_info)
                delai_max = max(delais_info)
                
                st.metric("D√©lai Moyen", f"{delai_moyen:.1f} jours")
                st.metric("D√©lai Min/Max", f"{delai_min} - {delai_max} jours")
            else:
                st.info("Pas assez de donn√©es pour calculer les d√©lais")
                
        except Exception as e:
            st.error(f"Erreur calcul d√©lais: {e}")
    
    with col_perf2:
        # Fournisseurs les plus fiables
        st.markdown("##### üèÜ Top Fournisseurs")
        
        fournisseur_stats = {}
        for bc in bons_commande:
            fournisseur = bc.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {
                    'count': 0, 
                    'montant': 0,
                    'termines': 0
                }
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += bc.get('montant_total', 0)
            if bc['statut'] == 'TERMIN√â':
                fournisseur_stats[fournisseur]['termines'] += 1
        
        # Calcul du taux de fiabilit√© et tri
        for fournisseur, stats in fournisseur_stats.items():
            stats['taux_fiabilite'] = (stats['termines'] / stats['count'] * 100) if stats['count'] > 0 else 0
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: (x[1]['taux_fiabilite'], x[1]['montant']), 
                                reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(
                f"{i}. {fournisseur[:15]}",
                f"{stats['taux_fiabilite']:.0f}% fiabilit√©",
                delta=f"{stats['count']} BCs - {stats['montant']:,.0f}$"
            )
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # R√©partition par statut
        statut_counts = {}
        statut_montants = {}
        for bc in bons_commande:
            statut = bc['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
            statut_montants[statut] = statut_montants.get(statut, 0) + bc.get('montant_total', 0)
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", 
                        color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True, height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # √âvolution mensuelle
        st.markdown("##### üìà √âvolution Mensuelle")
        
        evolution_mensuelle = {}
        for bc in bons_commande:
            try:
                mois = bc['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += bc.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre BCs': data['count'], 'Montant (k$)': data['montant']/1000}
                for mois, data in mois_sorted[-12:]  # 12 derniers mois
            ])
            
            fig = px.bar(df_evolution, x='Mois', y='Nombre BCs',
                        title="√âvolution Mensuelle des BCs",
                        hover_data=['Montant (k$)'])
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyse des montants
    col_montant1, col_montant2 = st.columns(2)
    
    with col_montant1:
        # R√©partition par tranches de montant
        st.markdown("##### üí∞ R√©partition par Montant")
        
        tranches = {
            '< 1k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True): 0,
            '1k$ - 5k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True): 0,
            '5k$ - 10k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True): 0,
            '10k$ - 50k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True): 0,
            '> 50k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True): 0
        }
        
        for bc in bons_commande:
            montant = bc.get('montant_total', 0)
            if montant < 1000:
                tranches['< 1k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)] += 1
            elif montant < 5000:
                tranches['1k$ - 5k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)] += 1
            elif montant < 10000:
                tranches['5k$ - 10k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)] += 1
            elif montant < 50000:
                tranches['10k$ - 50k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)] += 1
            else:
                tranches['> 50k
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)] += 1
        
        fig = px.bar(x=list(tranches.keys()), y=list(tranches.values()),
                    title="Nombre de BCs par Tranche de Montant")
        fig.update_layout(height=350)
        st.plotly_chart(fig, use_container_width=True)
    
    with col_montant2:
        # Analyse des priorit√©s
        st.markdown("##### üö® Analyse des Priorit√©s")
        
        priorite_stats = {}
        for bc in bons_commande:
            priorite = bc['priorite']
            if priorite not in priorite_stats:
                priorite_stats[priorite] = {
                    'count': 0,
                    'montant': 0,
                    'termines': 0,
                    'delai_moyen': 0
                }
            priorite_stats[priorite]['count'] += 1
            priorite_stats[priorite]['montant'] += bc.get('montant_total', 0)
            if bc['statut'] == 'TERMIN√â':
                priorite_stats[priorite]['termines'] += 1
        
        # Affichage des statistiques par priorit√©
        for priorite, stats in priorite_stats.items():
            taux_completion = (stats['termines'] / stats['count'] * 100) if stats['count'] > 0 else 0
            icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(priorite, '‚ö™')
            
            st.metric(
                f"{icon} {priorite}",
                f"{stats['count']} BCs",
                delta=f"{taux_completion:.0f}% termin√©s - {stats['montant']:,.0f}$"
            )
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BCs en retard
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        alerts.append(f"üî¥ {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison")
    
    # BCs critiques non trait√©s
    critiques_non_traites = [bc for bc in bons_commande 
                            if bc['priorite'] == 'CRITIQUE' and bc['statut'] in ['BROUILLON', 'VALID√â']]
    
    if critiques_non_traites:
        alerts.append(f"üü° {len(critiques_non_traites)} BC(s) critique(s) non envoy√©(s)")
    
    # Fournisseurs peu fiables
    fournisseurs_problematiques = []
    for fournisseur, stats in fournisseur_stats.items():
        if stats['count'] >= 3 and stats['taux_fiabilite'] < 80:
            fournisseurs_problematiques.append(fournisseur)
    
    if fournisseurs_problematiques:
        alerts.append(f"‚ö†Ô∏è {len(fournisseurs_problematiques)} fournisseur(s) avec taux de fiabilit√© < 80%")
    
    # Affichage des alertes
    if alerts:
        for alert in alerts:
            st.warning(alert)
        
        # Recommandations
        st.markdown("**Recommandations :**")
        if bcs_en_retard:
            st.markdown("‚Ä¢ Relancer les fournisseurs pour les livraisons en retard")
        if critiques_non_traites:
            st.markdown("‚Ä¢ Traiter en priorit√© les BCs critiques")
        if fournisseurs_problematiques:
            st.markdown("‚Ä¢ √âvaluer les performances des fournisseurs peu fiables")
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des commandes optimale")

def render_templates_bon_commande(gestionnaire):
    """Interface de gestion des templates de BC"""
    st.markdown("#### üìã Templates Bons de Commande")
    st.info("üöß Gestion des templates de BC - Fonctionnalit√© avanc√©e √† d√©velopper")
    
    # TODO: Interface pour cr√©er et g√©rer des templates de BC par industrie/type
    # - Templates standards par secteur (auto, a√©ro, construction)
    # - Clauses pr√©-d√©finies
    # - Conditions commerciales par d√©faut

def render_rapports_bon_commande(gestionnaire):
    """Interface de g√©n√©ration de rapports BC"""
    st.markdown("#### üìà Rapports Bons de Commande")
    st.info("üöß G√©n√©ration de rapports BC - Fonctionnalit√© avanc√©e √† d√©velopper")
    
    # TODO: G√©n√©ration de rapports avanc√©s
    # - Rapport mensuel des achats
    # - Performance fournisseurs
    # - Analyse des co√ªts
    # - Export Excel/PDF

# =============================================================================
# INTERFACES POUR LES AUTRES TYPES DE FORMULAIRES (STRUCTURE SIMILAIRE)
# =============================================================================

def render_demandes_prix_tab(gestionnaire):
    """Interface pour les Demandes de Prix"""
    st.markdown("### üí∞ Demandes de Prix")
    
    # Actions rapides
    col_action1, col_action2, col_action3 = st.columns(3)
    with col_action1:
        if st.button("‚ûï Nouvelle Demande Prix", use_container_width=True, key="dp_nouveau"):
            st.session_state.form_action = "create_demande_prix"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="dp_liste"):
            st.session_state.form_action = "list_demande_prix"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="dp_stats"):
            st.session_state.form_action = "stats_demande_prix"
    
    st.info("üöß Interface Demandes de Prix - En d√©veloppement")
    
    # TODO: RFQ vers multiples fournisseurs
    # Sp√©cificit√©s: Comparaison offres, n√©gociation, validation technique

def render_estimations_tab(gestionnaire):
    """Interface pour les Estimations"""
    st.markdown("### üìä Estimations")
    
    # Actions rapides
    col_action1, col_action2, col_action3 = st.columns(3)
    with col_action1:
        if st.button("‚ûï Nouvelle Estimation", use_container_width=True, key="est_nouveau"):
            st.session_state.form_action = "create_estimation"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="est_liste"):
            st.session_state.form_action = "list_estimation"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="est_stats"):
            st.session_state.form_action = "stats_estimation"
    
    st.info("üöß Interface Estimations - En d√©veloppement")
    
    # TODO: Devis clients professionnels
    # Sp√©cificit√©s: Calculs automatiques, templates, conversion en projets

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def get_projets_actifs():
    """R√©cup√®re la liste des projets actifs"""
    try:
        query = "SELECT id, nom_projet FROM projects WHERE statut NOT IN ('TERMIN√â', 'ANNUL√â') ORDER BY nom_projet"
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except:
        return []

def get_employes_actifs():
    """R√©cup√®re la liste des employ√©s actifs"""
    try:
        query = "SELECT id, prenom, nom, poste FROM employees WHERE statut = 'ACTIF' ORDER BY prenom, nom"
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except:
        return []

def get_operations_projet(projet_id):
    """R√©cup√®re les op√©rations d'un projet"""
    try:
        query = "SELECT id, sequence_number as sequence, description FROM operations WHERE project_id = ? ORDER BY sequence_number"
        rows = st.session_state.erp_db.execute_query(query, (projet_id,))
        return [dict(row) for row in rows]
    except:
        return []

# =============================================================================
# FONCTIONS UTILITAIRES SP√âCIFIQUES AUX BONS D'ACHATS
# =============================================================================

def get_fournisseurs_actifs():
    """R√©cup√®re la liste des fournisseurs depuis le CRM"""
    try:
        # Dans le syst√®me ERP, les fournisseurs sont des companies avec un secteur sp√©cifique
        # ou peuvent √™tre identifi√©s par un type dans les m√©tadonn√©es
        query = """
            SELECT id, nom, secteur, adresse 
            FROM companies 
            WHERE secteur LIKE '%FOURNISSEUR%' 
               OR secteur LIKE '%DISTRIBUTION%' 
               OR secteur LIKE '%COMMERCE%'
               OR id IN (
                   SELECT DISTINCT company_id 
                   FROM formulaires 
                   WHERE type_formulaire = 'BON_ACHAT'
               )
            ORDER BY nom
        """
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration fournisseurs: {e}")
        return []

def get_articles_inventaire_critique():
    """R√©cup√®re les articles avec stock critique n√©cessitant r√©approvisionnement"""
    try:
        query = """
            SELECT id, nom, type_produit, quantite_imperial, limite_minimale_imperial, statut
            FROM inventory_items 
            WHERE statut IN ('CRITIQUE', 'FAIBLE', '√âPUIS√â')
            ORDER BY 
                CASE statut 
                    WHEN '√âPUIS√â' THEN 1
                    WHEN 'CRITIQUE' THEN 2 
                    WHEN 'FAIBLE' THEN 3
                END, nom
        """
        rows = st.session_state.erp_db.execute_query(query)
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur r√©cup√©ration stocks critiques: {e}")
        return []

def search_articles_inventaire(search_term):
    """Recherche dans l'inventaire par nom ou type"""
    try:
        if not search_term:
            return []
        
        query = """
            SELECT id, nom, type_produit, quantite_imperial, statut
            FROM inventory_items 
            WHERE LOWER(nom) LIKE LOWER(?) 
               OR LOWER(type_produit) LIKE LOWER(?)
            ORDER BY nom
            LIMIT 10
        """
        search_pattern = f"%{search_term}%"
        rows = st.session_state.erp_db.execute_query(query, (search_pattern, search_pattern))
        return [dict(row) for row in rows]
    except Exception as e:
        st.error(f"Erreur recherche inventaire: {e}")
        return []

def calculer_quantite_recommandee(article):
    """Calcule la quantit√© recommand√©e pour un r√©approvisionnement"""
    try:
        # Logique simple : 2x le stock minimum ou 10 unit√©s minimum
        stock_min_str = article.get('limite_minimale_imperial', '0\' 0"')
        
        # Pour simplifier, on retourne une valeur par d√©faut
        # Dans un vrai syst√®me, il faudrait parser la cha√Æne imp√©riale
        if 'CRITIQUE' in article.get('statut', ''):
            return 20
        elif 'FAIBLE' in article.get('statut', ''):
            return 15
        else:
            return 10
            
    except Exception:
        return 10

def convertir_ba_vers_bc(gestionnaire, ba_id):
    """Conversion rapide BA ‚Üí BC avec param√®tres par d√©faut"""
    try:
        ba_details = gestionnaire.get_formulaire_details(ba_id)
        if not ba_details:
            return None
        
        # Num√©ro BC automatique
        numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
        
        # M√©tadonn√©es BC minimales
        metadonnees_bc = {
            'ba_source_id': ba_id,
            'ba_source_numero': ba_details['numero_document'],
            'conversion_automatique': True,
            'conditions_paiement': '30 jours net'
        }
        
        # Notes de conversion automatique
        notes_bc = f"""=== CONVERSION AUTOMATIQUE ===
Bon de Commande g√©n√©r√© automatiquement depuis {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== NOTES BA SOURCE ===
{ba_details.get('notes', '')}"""
        
        # Donn√©es du BC
        data_bc = {
            'type_formulaire': 'BON_COMMANDE',
            'numero_document': numero_bc,
            'project_id': ba_details.get('project_id'),
            'company_id': ba_details.get('company_id'),
            'employee_id': ba_details.get('employee_id'),
            'statut': 'VALID√â',
            'priorite': ba_details.get('priorite'),
            'date_creation': datetime.now().date(),
            'date_echeance': datetime.now().date() + timedelta(days=14),
            'montant_total': ba_details.get('montant_total', 0),
            'notes': notes_bc,
            'metadonnees_json': json.dumps(metadonnees_bc),
            'lignes': ba_details.get('lignes', [])
        }
        
        # Cr√©ation du BC
        bc_id = gestionnaire.creer_formulaire(data_bc)
        
        if bc_id:
            # Mise √† jour du BA original
            gestionnaire.modifier_statut_formulaire(ba_id, 'TERMIN√â', 
                                                   ba_details.get('employee_id'), 
                                                   f"Converti automatiquement en BC {numero_bc}")
            return numero_bc
        
        return None
        
    except Exception as e:
        st.error(f"Erreur conversion BA‚ÜíBC: {e}")
        return None

# =============================================================================
# FONCTIONS UTILITAIRES SP√âCIFIQUES AUX BONS DE COMMANDE
# =============================================================================

def mettre_a_jour_statut_livraison(gestionnaire, appro_id, nouveau_statut):
    """Met √† jour le statut d'une livraison"""
    try:
        return gestionnaire.db.update_approvisionnement_status(appro_id, nouveau_statut)
    except Exception as e:
        st.error(f"Erreur mise √† jour statut: {e}")
        return False

def marquer_bc_recu(gestionnaire, bc_id):
    """Marque un BC comme re√ßu rapidement"""
    try:
        # Mise √† jour du statut du BC
        gestionnaire.modifier_statut_formulaire(bc_id, 'TERMIN√â', 1, "Marqu√© comme re√ßu - Traitement rapide")
        
        # Mise √† jour de l'approvisionnement si il existe
        try:
            query = "SELECT id FROM approvisionnements WHERE formulaire_id = ?"
            result = gestionnaire.db.execute_query(query, (bc_id,))
            if result:
                appro_id = result[0]['id']
                gestionnaire.db.update_approvisionnement_status(appro_id, 'LIVR√â', "R√©ception rapide valid√©e")
        except:
            pass
        
        return True
    except Exception as e:
        st.error(f"Erreur marquage r√©ception: {e}")
        return False
        
        # Actions sur s√©lection
        if st.button("üìÑ Voir D√©tails S√©lectionn√©", key="bt_voir_details"):
            # Interface pour s√©lectionner et voir d√©tails
            pass
    else:
        st.info("Aucun Bon de Travail ne correspond aux filtres.")

def render_bon_travail_stats(gestionnaire):
    """Statistiques des Bons de Travail"""
    st.markdown("#### üìä Statistiques Bons de Travail")
    
    bons_travail = gestionnaire.get_formulaires('BON_TRAVAIL')
    
    if not bons_travail:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Bons", len(bons_travail))
    with col2:
        en_cours = len([bt for bt in bons_travail if bt['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("En Cours", en_cours)
    with col3:
        termines = len([bt for bt in bons_travail if bt['statut'] == 'TERMIN√â'])
        st.metric("Termin√©s", termines)
    with col4:
        montant_total = sum(bt.get('montant_total', 0) for bt in bons_travail)
        st.metric("Montant Total", f"{montant_total:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for bt in bons_travail:
            statut = bt['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="R√©partition par Statut")
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        for bt in bons_travail:
            priorite = bt['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
        
        if priorite_counts:
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="R√©partition par Priorit√©")
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# BONS D'ACHATS - INTERFACE COMPL√àTE
# =============================================================================

def render_bons_achats_tab(gestionnaire):
    """Interface compl√®te pour les Bons d'Achats"""
    st.markdown("### üõí Bons d'Achats")
    
    # D√©tection automatique des stocks critiques
    stocks_critiques = get_articles_inventaire_critique()
    if stocks_critiques:
        st.warning(f"‚ö†Ô∏è {len(stocks_critiques)} article(s) en stock critique n√©cessitent un r√©approvisionnement")
        if st.button("üì¶ Cr√©er BA Automatique", help="Cr√©er un Bon d'Achats pour les stocks critiques", key="ba_auto_stocks"):
            st.session_state.form_action = "create_bon_achat_auto"
            st.session_state.articles_critiques = stocks_critiques
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon d'Achats", use_container_width=True, key="ba_nouveau"):
            st.session_state.form_action = "create_bon_achat"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="ba_liste"):
            st.session_state.form_action = "list_bon_achat"
    with col_action3:
        if st.button("üìä Statistiques", use_container_width=True, key="ba_stats"):
            st.session_state.form_action = "stats_bon_achat"
    with col_action4:
        if st.button("üîÑ Convertir vers BC", use_container_width=True, key="ba_convertir"):
            st.session_state.form_action = "convert_ba_to_bc"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_achat')
    
    if action == "create_bon_achat":
        render_bon_achat_form(gestionnaire)
    elif action == "create_bon_achat_auto":
        render_bon_achat_form_auto(gestionnaire)
    elif action == "list_bon_achat":
        render_bon_achat_list(gestionnaire)
    elif action == "stats_bon_achat":
        render_bon_achat_stats(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)

def render_bon_achat_form(gestionnaire):
    """Formulaire de cr√©ation de Bon d'Achats"""
    st.markdown("#### ‚ûï Nouveau Bon d'Achats")
    
    with st.form("bon_achat_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            st.text_input("N¬∞ Bon d'Achats", value=numero_ba, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Cr√©ation", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© demandeur
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un demandeur")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Demandeur *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_echeance = st.date_input("Date Souhait√©e", datetime.now().date() + timedelta(days=14))
        
        # Description du besoin
        description = st.text_area("Description du Besoin *", height=100, 
                                  placeholder="D√©crivez le contexte et la raison de cet achat...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # Articles √† commander avec recherche inventaire
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="ba_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:  # Limiter √† 5 r√©sultats
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"ba_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes (logique √† impl√©menter)
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie manuelle des articles :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit. Estim√©**")
        with col_ref:
            st.markdown("**Ref. Inv.**")
        
        articles_lines = []
        for i in range(6):  # 6 lignes par d√©faut
            col_desc, col_qty, col_unit, col_price, col_ref = st.columns([3, 1, 1, 1.5, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"ba_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"ba_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"ba_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"ba_art_price_{i}", format="%.2f", step=0.01)
            with col_ref:
                ref_inv = st.text_input("", key=f"ba_art_ref_{i}", placeholder="ID")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'code_article': ref_inv or desc[:10].upper(),
                    'reference_materiau': None  # Peut √™tre li√© √† l'inventaire plus tard
                })
        
        # Justification de l'achat
        justification = st.text_area("Justification de l'Achat *", height=80,
                                   placeholder="Expliquez pourquoi cet achat est n√©cessaire...")
        
        # Conditions sp√©ciales
        st.markdown("##### üìã Conditions et Notes")
        
        col_cond1, col_cond2 = st.columns(2)
        with col_cond1:
            livraison_souhaitee = st.text_input("Lieu de Livraison", 
                                              placeholder="Adresse de livraison si diff√©rente")
            contact_livraison = st.text_input("Contact Livraison", 
                                            placeholder="Nom et t√©l√©phone")
        with col_cond2:
            mode_paiement = st.selectbox("Mode de Paiement Souhait√©", 
                                       ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                        "Virement", "Ch√®que", "√Ä d√©finir"])
            urgence_motif = st.text_input("Motif si Urgent", 
                                        placeholder="Raison de l'urgence")
        
        notes_speciales = st.text_area("Notes Sp√©ciales", height=60,
                                     placeholder="Instructions particuli√®res pour le fournisseur...")
        
        # Approbation budg√©taire
        st.markdown("##### üí∞ Budget et Approbation")
        col_budget1, col_budget2 = st.columns(2)
        with col_budget1:
            budget_estime = st.number_input("Budget Estim√© Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        with col_budget2:
            approbation_requise = st.checkbox("Approbation Manag√©riale Requise", 
                                            value=budget_estime > 5000)
            manager_approb = st.selectbox("Manager Approbateur", 
                                        options=[("", "S√©lectionner...")] + [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes if e.get('poste', '').upper() in ['MANAGER', 'DIRECTEUR', 'RESPONSABLE']],
                                        format_func=lambda x: next((e[1] for e_id, e in [(e['id'], f"{e['prenom']} {e['nom']}") for e in employes] if e_id == x), ""))
        
        # R√©capitulatif des montants
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total Estim√© : {montant_total_calcule:,.2f}$ CAD</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="ba_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="ba_submit_valide")
        with col_submit3:
            submit_urgent = st.form_submit_button("üö® Urgent - Validation Imm√©diate", use_container_width=True, key="ba_submit_urgent")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_urgent:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Demandeur obligatoire") 
            if not description:
                erreurs.append("Description du besoin obligatoire")
            if not justification:
                erreurs.append("Justification obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if submit_urgent and priorite != 'CRITIQUE':
                erreurs.append("Les demandes urgentes doivent avoir la priorit√© CRITIQUE")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_urgent:
                    statut = 'VALID√â'
                    priorite = 'CRITIQUE'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== DESCRIPTION DU BESOIN ===
{description}

=== JUSTIFICATION ===
{justification}

=== CONDITIONS DE LIVRAISON ===
Lieu: {livraison_souhaitee or 'Adresse standard'}
Contact: {contact_livraison or '√Ä d√©finir'}
Mode paiement: {mode_paiement}

=== INFORMATIONS BUDG√âTAIRES ===
Centre de co√ªt: {centre_cout or '√Ä d√©finir'}
Budget estim√©: {budget_estime:,.2f}$ CAD
Approbation requise: {'Oui' if approbation_requise else 'Non'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}

=== URGENCE ===
{urgence_motif or 'Non urgent'}"""
                
                # M√©tadonn√©es JSON pour informations structur√©es
                metadonnees = {
                    'fournisseur_id': fournisseur_id,
                    'livraison_lieu': livraison_souhaitee,
                    'livraison_contact': contact_livraison,
                    'mode_paiement': mode_paiement,
                    'centre_cout': centre_cout,
                    'approbation_requise': approbation_requise,
                    'manager_approbateur': manager_approb if approbation_requise else None,
                    'urgence_motif': urgence_motif,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_ACHAT',
                    'numero_document': numero_ba,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,  # Le fournisseur est dans la table companies
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_echeance,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Messages de succ√®s personnalis√©s
                    if submit_urgent:
                        st.success(f"üö® Bon d'Achats URGENT {numero_ba} cr√©√© et marqu√© pour traitement prioritaire!")
                        st.info("üìß Une notification a √©t√© envoy√©e au service achats pour traitement imm√©diat.")
                    else:
                        st.success(f"‚úÖ Bon d'Achats {numero_ba} cr√©√© avec succ√®s!")
                    
                    # Proposer actions suivantes
                    col_next1, col_next2 = st.columns(2)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="ba_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_achat"
                            st.rerun()
                    with col_next2:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="ba_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon d'Achats")

def render_bon_achat_form_auto(gestionnaire):
    """Formulaire de cr√©ation automatique depuis stocks critiques"""
    st.markdown("#### üì¶ Bon d'Achats Automatique - R√©approvisionnement")
    
    stocks_critiques = st.session_state.get('articles_critiques', [])
    
    if not stocks_critiques:
        st.error("Aucun article critique d√©tect√©.")
        return
    
    st.info(f"Cr√©ation automatique d'un Bon d'Achats pour {len(stocks_critiques)} article(s) en stock critique")
    
    # Affichage des articles critiques
    st.markdown("##### üìã Articles N√©cessitant un R√©approvisionnement")
    for article in stocks_critiques:
        with st.expander(f"üî¥ {article['nom']} - Stock Critique"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Stock Actuel", article.get('quantite_imperial', 'N/A'))
            with col2:
                st.metric("Stock Minimum", article.get('limite_minimale_imperial', 'N/A'))
            with col3:
                st.metric("√Ä Commander", "√Ä d√©finir")
    
    with st.form("bon_achat_auto_form"):
        # Fournisseur unique pour tous les articles
        fournisseurs = get_fournisseurs_actifs()
        fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
        fournisseur_id = st.selectbox(
            "Fournisseur pour R√©approvisionnement *",
            options=[f[0] for f in fournisseur_options],
            format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
        )
        
        # Employ√© demandeur
        employes = get_employes_actifs()
        employe_id = st.selectbox("Demandeur", [e['id'] for e in employes], 
                                format_func=lambda x: next((f"{e['prenom']} {e['nom']}" for e in employes if e['id'] == x), ""))
        
        # Quantit√©s √† commander pour chaque article
        st.markdown("##### üìä Quantit√©s √† Commander")
        articles_commande = []
        
        for article in stocks_critiques:
            col_art, col_qty, col_price = st.columns([2, 1, 1])
            
            with col_art:
                st.write(f"**{article['nom']}** ({article['type_produit']})")
            with col_qty:
                qty_recommandee = calculer_quantite_recommandee(article)
                qty = st.number_input(f"Qt√©", min_value=1, value=qty_recommandee, 
                                    key=f"ba_auto_qty_{article['id']}")
            with col_price:
                prix_estime = st.number_input(f"Prix Unit.", min_value=0.01, value=50.0, 
                                            key=f"ba_auto_price_{article['id']}", format="%.2f")
            
            articles_commande.append({
                'description': f"{article['nom']} - R√©approvisionnement stock critique",
                'quantite': qty,
                'unite': 'UN',  # √Ä adapter selon l'article
                'prix_unitaire': prix_estime,
                'code_article': f"INV-{article['id']}",
                'reference_materiau': article['id']
            })
        
        notes_auto = st.text_area("Notes sur le R√©approvisionnement", 
                                value=f"R√©approvisionnement automatique de {len(stocks_critiques)} article(s) en stock critique d√©tect√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
        
        montant_total = sum(art['quantite'] * art['prix_unitaire'] for art in articles_commande)
        st.metric("üí∞ Montant Total Estim√©", f"{montant_total:,.2f}$ CAD")
        
        submit_auto = st.form_submit_button("üöÄ Cr√©er Bon d'Achats Automatique", use_container_width=True, key="ba_submit_auto")
        
        if submit_auto and fournisseur_id:
            numero_ba = gestionnaire.generer_numero_document('BON_ACHAT')
            
            data = {
                'type_formulaire': 'BON_ACHAT',
                'numero_document': numero_ba,
                'company_id': fournisseur_id,
                'employee_id': employe_id,
                'statut': 'VALID√â',
                'priorite': 'URGENT',
                'date_creation': datetime.now().date(),
                'date_echeance': datetime.now().date() + timedelta(days=7),
                'montant_total': montant_total,
                'notes': f"=== R√âAPPROVISIONNEMENT AUTOMATIQUE ===\n{notes_auto}",
                'metadonnees_json': json.dumps({'auto_generated': True, 'articles_critiques': [a['id'] for a in stocks_critiques]}),
                'lignes': articles_commande
            }
            
            formulaire_id = gestionnaire.creer_formulaire(data)
            
            if formulaire_id:
                st.success(f"‚úÖ Bon d'Achats automatique {numero_ba} cr√©√© pour r√©approvisionnement!")
                st.session_state.form_action = "list_bon_achat"
                st.rerun()

def render_bon_achat_list(gestionnaire):
    """Liste des Bons d'Achats avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucun Bon d'Achats cr√©√©. Cr√©ez votre premier BA pour commencer!")
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    with col_m1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col_m2:
        en_attente = len([ba for ba in bons_achats if ba['statut'] in ['BROUILLON', 'VALID√â']])
        st.metric("‚è≥ En Attente", en_attente)
    with col_m3:
        montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m4:
        urgents = len([ba for ba in bons_achats if ba['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([ba.get('company_nom', 'N/A') for ba in bons_achats if ba.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par p√©riode
            filtre_periode = st.selectbox("P√©riode", ["Toutes", "Cette semaine", "Ce mois", "3 derniers mois"])
        
        col_search, col_montant = st.columns(2)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
    
    # Application des filtres
    bons_filtres = []
    for ba in bons_achats:
        # Filtre statut
        if ba['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if ba['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and ba.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if ba.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(ba.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre p√©riode
        if filtre_periode != "Toutes":
            date_creation = datetime.strptime(ba['date_creation'][:10], '%Y-%m-%d').date()
            today = datetime.now().date()
            
            if filtre_periode == "Cette semaine" and (today - date_creation).days > 7:
                continue
            elif filtre_periode == "Ce mois" and (today - date_creation).days > 30:
                continue
            elif filtre_periode == "3 derniers mois" and (today - date_creation).days > 90:
                continue
        
        bons_filtres.append(ba)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) d'Achats trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√©
        df_data = []
        for ba in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(ba['priorite'], '‚ö™')
            statut_icon = {'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'}.get(ba['statut'], '‚ùì')
            
            df_data.append({
                'N¬∞ Document': ba['numero_document'],
                'Fournisseur': ba.get('company_nom', 'N/A'),
                'Demandeur': ba.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {ba['statut']}",
                'Priorit√©': f"{priorite_icon} {ba['priorite']}",
                'Date Cr√©ation': ba['date_creation'][:10] if ba['date_creation'] else 'N/A',
                'Date √âch√©ance': ba.get('date_echeance', 'N/A'),
                'Montant': f"{ba.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
        
        # Actions en lot
        st.markdown("---")
        st.markdown("##### ‚ö° Actions Rapides")
        
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            ba_selectionne = st.selectbox("S√©lectionner un BA", 
                                        options=[ba['id'] for ba in bons_filtres],
                                        format_func=lambda x: next((ba['numero_document'] for ba in bons_filtres if ba['id'] == x), ""))
        
        with col_action2:
            if st.button("üëÅÔ∏è Voir D√©tails", use_container_width=True, key="ba_voir_details"):
                if ba_selectionne:
                    st.session_state.selected_formulaire_id = ba_selectionne
                    st.session_state.show_formulaire_modal = True
        
        with col_action3:
            if st.button("üìù Modifier", use_container_width=True, key="ba_modifier"):
                if ba_selectionne:
                    st.session_state.form_action = "edit_bon_achat"
                    st.session_state.edit_formulaire_id = ba_selectionne
        
        with col_action4:
            if st.button("üîÑ Convertir ‚Üí BC", use_container_width=True, key="ba_convertir_action"):
                if ba_selectionne:
                    result = convertir_ba_vers_bc(gestionnaire, ba_selectionne)
                    if result:
                        st.success(f"‚úÖ BA converti en Bon de Commande {result}")
                        st.rerun()
    else:
        st.info("Aucun Bon d'Achats ne correspond aux crit√®res de recherche.")

def render_bon_achat_stats(gestionnaire):
    """Statistiques d√©taill√©es des Bons d'Achats"""
    st.markdown("#### üìä Statistiques Bons d'Achats")
    
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    
    if not bons_achats:
        st.info("Aucune donn√©e pour les statistiques.")
        return
    
    # Calculs statistiques
    montant_total = sum(ba.get('montant_total', 0) for ba in bons_achats)
    montant_moyen = montant_total / len(bons_achats) if bons_achats else 0
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Total BAs", len(bons_achats))
    with col2:
        en_cours = len([ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col3:
        termines = len([ba for ba in bons_achats if ba['statut'] == 'TERMIN√â'])
        taux_completion = (termines / len(bons_achats) * 100) if bons_achats else 0
        st.metric("‚úÖ Termin√©s", termines, delta=f"{taux_completion:.1f}%")
    with col4:
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$ CAD")
    with col5:
        st.metric("üìä Montant Moyen", f"{montant_moyen:,.0f}$ CAD")
    
    # Graphiques
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # Par statut
        statut_counts = {}
        for ba in bons_achats:
            statut = ba['statut']
            statut_counts[statut] = statut_counts.get(statut, 0) + 1
        
        if statut_counts:
            colors_statut = {
                'BROUILLON': '#f59e0b', 'VALID√â': '#3b82f6', 'ENVOY√â': '#8b5cf6',
                'APPROUV√â': '#10b981', 'TERMIN√â': '#059669', 'ANNUL√â': '#ef4444'
            }
            fig = px.pie(values=list(statut_counts.values()), names=list(statut_counts.keys()),
                        title="üìä R√©partition par Statut", color_discrete_map=colors_statut)
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
    
    with col_g2:
        # Par priorit√©
        priorite_counts = {}
        priorite_montants = {}
        for ba in bons_achats:
            priorite = ba['priorite']
            priorite_counts[priorite] = priorite_counts.get(priorite, 0) + 1
            priorite_montants[priorite] = priorite_montants.get(priorite, 0) + ba.get('montant_total', 0)
        
        if priorite_counts:
            colors_priorite = {'NORMAL': '#10b981', 'URGENT': '#f59e0b', 'CRITIQUE': '#ef4444'}
            fig = px.bar(x=list(priorite_counts.keys()), y=list(priorite_counts.values()),
                        title="üìà R√©partition par Priorit√©", color=list(priorite_counts.keys()),
                        color_discrete_map=colors_priorite)
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Analyses avanc√©es
    col_a1, col_a2 = st.columns(2)
    
    with col_a1:
        # Top fournisseurs
        st.markdown("##### üèÜ Top Fournisseurs")
        fournisseur_stats = {}
        for ba in bons_achats:
            fournisseur = ba.get('company_nom', 'N/A')
            if fournisseur not in fournisseur_stats:
                fournisseur_stats[fournisseur] = {'count': 0, 'montant': 0}
            fournisseur_stats[fournisseur]['count'] += 1
            fournisseur_stats[fournisseur]['montant'] += ba.get('montant_total', 0)
        
        top_fournisseurs = sorted(fournisseur_stats.items(), 
                                key=lambda x: x[1]['montant'], reverse=True)[:5]
        
        for i, (fournisseur, stats) in enumerate(top_fournisseurs, 1):
            st.metric(f"{i}. {fournisseur[:20]}", 
                     f"{stats['count']} BAs", 
                     delta=f"{stats['montant']:,.0f}$ CAD")
    
    with col_a2:
        # √âvolution temporelle
        st.markdown("##### üìà √âvolution Mensuelle")
        evolution_mensuelle = {}
        for ba in bons_achats:
            try:
                mois = ba['date_creation'][:7]  # YYYY-MM
                if mois not in evolution_mensuelle:
                    evolution_mensuelle[mois] = {'count': 0, 'montant': 0}
                evolution_mensuelle[mois]['count'] += 1
                evolution_mensuelle[mois]['montant'] += ba.get('montant_total', 0)
            except:
                continue
        
        if evolution_mensuelle:
            mois_sorted = sorted(evolution_mensuelle.items())
            df_evolution = pd.DataFrame([
                {'Mois': mois, 'Nombre': data['count'], 'Montant': data['montant']}
                for mois, data in mois_sorted
            ])
            
            fig = px.line(df_evolution, x='Mois', y='Nombre',
                         title="√âvolution du Nombre de BAs")
            st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et recommandations
    st.markdown("---")
    st.markdown("##### üö® Alertes et Recommandations")
    
    alerts = []
    
    # BAs en retard
    bos_en_retard = [ba for ba in bons_achats 
                     if ba.get('date_echeance') and 
                     datetime.strptime(ba['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     ba['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bos_en_retard:
        alerts.append(f"üî¥ {len(bos_en_retard)} Bon(s) d'Achats en retard")
    
    # BAs urgents non trait√©s
    urgents_non_traites = [ba for ba in bons_achats 
                          if ba['priorite'] == 'CRITIQUE' and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if urgents_non_traites:
        alerts.append(f"üü° {len(urgents_non_traites)} BA(s) urgent(s) en attente")
    
    # Montants √©lev√©s en attente
    montants_eleves = [ba for ba in bons_achats 
                      if ba.get('montant_total', 0) > 10000 and ba['statut'] in ['BROUILLON', 'VALID√â']]
    
    if montants_eleves:
        alerts.append(f"üí∞ {len(montants_eleves)} BA(s) √† montant √©lev√© (>10k$) en attente")
    
    if alerts:
        for alert in alerts:
            st.warning(alert)
    else:
        st.success("‚úÖ Aucune alerte d√©tect√©e - Gestion des achats optimale")

def render_conversion_ba_bc(gestionnaire):
    """Interface de conversion Bon d'Achats ‚Üí Bon de Commande"""
    st.markdown("#### üîÑ Conversion BA ‚Üí Bon de Commande")
    
    # S√©lection du BA √† convertir
    bons_achats = gestionnaire.get_formulaires('BON_ACHAT')
    bas_convertibles = [ba for ba in bons_achats if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    
    if not bas_convertibles:
        st.warning("Aucun Bon d'Achats valid√© disponible pour conversion.")
        return
    
    ba_options = [(ba['id'], f"{ba['numero_document']} - {ba.get('company_nom', 'N/A')} - {ba.get('montant_total', 0):,.0f}$ CAD") for ba in bas_convertibles]
    ba_selectionne = st.selectbox("S√©lectionner le BA √† convertir", 
                                options=[ba[0] for ba in ba_options],
                                format_func=lambda x: next((ba[1] for ba in ba_options if ba[0] == x), ""))
    
    if ba_selectionne:
        ba_details = next((ba for ba in bas_convertibles if ba['id'] == ba_selectionne), None)
        
        if ba_details:
            # Affichage des d√©tails du BA
            st.markdown("##### üìã D√©tails du Bon d'Achats S√©lectionn√©")
            
            col_det1, col_det2 = st.columns(2)
            with col_det1:
                st.info(f"""
                **N¬∞ BA :** {ba_details['numero_document']}
                **Fournisseur :** {ba_details.get('company_nom', 'N/A')}
                **Demandeur :** {ba_details.get('employee_nom', 'N/A')}
                **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                """)
            with col_det2:
                st.info(f"""
                **Statut :** {ba_details['statut']}
                **Priorit√© :** {ba_details['priorite']}
                **Date Cr√©ation :** {ba_details['date_creation'][:10] if ba_details['date_creation'] else 'N/A'}
                **Date √âch√©ance :** {ba_details.get('date_echeance', 'N/A')}
                """)
            
            # Formulaire de conversion
            with st.form("conversion_ba_bc_form"):
                st.markdown("##### üîß Param√®tres de Conversion")
                
                col_conv1, col_conv2 = st.columns(2)
                
                with col_conv1:
                    # Le num√©ro BC sera g√©n√©r√© automatiquement
                    numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
                    st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
                    
                    date_commande = st.date_input("Date de Commande", datetime.now().date())
                    date_livraison_souhaitee = st.date_input("Date Livraison Souhait√©e", 
                                                           datetime.now().date() + timedelta(days=14))
                
                with col_conv2:
                    conditions_paiement = st.selectbox("Conditions de Paiement", 
                                                     ["30 jours net", "15 jours net", "√Ä r√©ception", 
                                                      "Virement imm√©diat", "60 jours net"])
                    
                    contact_fournisseur = st.text_input("Contact Fournisseur", 
                                                       placeholder="Nom et t√©l√©phone du contact")
                
                # Informations de livraison
                st.markdown("##### üöö Informations de Livraison")
                col_liv1, col_liv2 = st.columns(2)
                
                with col_liv1:
                    adresse_livraison = st.text_area("Adresse de Livraison", 
                                                   value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
                    instructions_livraison = st.text_area("Instructions Livraison",
                                                        placeholder="Instructions sp√©ciales pour la livraison...")
                
                with col_liv2:
                    contact_reception = st.text_input("Contact R√©ception", 
                                                    placeholder="Responsable r√©ception des marchandises")
                    horaires_livraison = st.text_input("Horaires de Livraison",
                                                     value="Lundi-Vendredi 8h-16h")
                
                # Conditions commerciales
                st.markdown("##### üíº Conditions Commerciales")
                col_comm1, col_comm2 = st.columns(2)
                
                with col_comm1:
                    garantie_demandee = st.text_input("Garantie Demand√©e", 
                                                    placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
                    penalites_retard = st.text_input("P√©nalit√©s de Retard",
                                                   placeholder="Ex: 0.5% par jour de retard")
                
                with col_comm2:
                    certification_requise = st.text_input("Certifications Requises",
                                                        placeholder="Ex: ISO 9001, CE, CSA...")
                    clause_revision = st.checkbox("Clause de R√©vision Prix", value=False)
                
                # Notes de conversion
                notes_conversion = st.text_area("Notes sur la Conversion",
                                              value=f"Bon de Commande g√©n√©r√© automatiquement depuis le Bon d'Achats {ba_details['numero_document']}")
                
                # Validation finale
                st.markdown("---")
                confirmation = st.checkbox("Je confirme la conversion de ce Bon d'Achats en Bon de Commande officiel")
                
                col_submit1, col_submit2 = st.columns(2)
                with col_submit1:
                    submit_conversion = st.form_submit_button("üîÑ Convertir en BC", use_container_width=True, key="conversion_submit")
                with col_submit2:
                    submit_annuler = st.form_submit_button("‚ùå Annuler", use_container_width=True, key="conversion_annuler")
                
                if submit_conversion and confirmation:
                    # R√©cup√©ration des lignes du BA original
                    ba_complet = gestionnaire.get_formulaire_details(ba_selectionne)
                    
                    # Construction des m√©tadonn√©es BC
                    metadonnees_bc = {
                        'ba_source_id': ba_selectionne,
                        'ba_source_numero': ba_details['numero_document'],
                        'conditions_paiement': conditions_paiement,
                        'contact_fournisseur': contact_fournisseur,
                        'adresse_livraison': adresse_livraison,
                        'contact_reception': contact_reception,
                        'horaires_livraison': horaires_livraison,
                        'instructions_livraison': instructions_livraison,
                        'garantie_demandee': garantie_demandee,
                        'penalites_retard': penalites_retard,
                        'certification_requise': certification_requise,
                        'clause_revision': clause_revision
                    }
                    
                    # Construction des notes compl√®tes
                    notes_bc = f"""=== BON DE COMMANDE OFFICIEL ===
G√©n√©r√© depuis : {ba_details['numero_document']}
Date conversion : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Contact fournisseur : {contact_fournisseur}
Garantie : {garantie_demandee}
P√©nalit√©s retard : {penalites_retard}
Certifications : {certification_requise}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Instructions : {instructions_livraison}

=== NOTES CONVERSION ===
{notes_conversion}

=== HISTORIQUE BA SOURCE ===
{ba_details.get('notes', '')}"""
                    
                    # Donn√©es du nouveau BC
                    data_bc = {
                        'type_formulaire': 'BON_COMMANDE',
                        'numero_document': numero_bc,
                        'project_id': ba_details.get('project_id'),
                        'company_id': ba_details.get('company_id'),
                        'employee_id': ba_details.get('employee_id'),
                        'statut': 'VALID√â',
                        'priorite': ba_details.get('priorite'),
                        'date_creation': date_commande,
                        'date_echeance': date_livraison_souhaitee,
                        'montant_total': ba_details.get('montant_total', 0),
                        'notes': notes_bc,
                        'metadonnees_json': json.dumps(metadonnees_bc),
                        'lignes': ba_complet.get('lignes', [])
                    }
                    
                    # Cr√©ation du BC
                    bc_id = gestionnaire.creer_formulaire(data_bc)
                    
                    if bc_id:
                        # Mise √† jour du statut du BA original
                        gestionnaire.modifier_statut_formulaire(ba_selectionne, 'TERMIN√â', 
                                                               ba_details.get('employee_id'), 
                                                               f"Converti en Bon de Commande {numero_bc}")
                        
                        st.success(f"""
                        ‚úÖ **Conversion R√©ussie !**
                        
                        üõí **Bon d'Achats** {ba_details['numero_document']} ‚Üí Statut : TERMIN√â
                        üì¶ **Bon de Commande** {numero_bc} ‚Üí Cr√©√© et pr√™t √† envoyer
                        
                        üí∞ **Montant :** {ba_details.get('montant_total', 0):,.2f}$ CAD
                        üìÖ **Livraison pr√©vue :** {date_livraison_souhaitee.strftime('%d/%m/%Y')}
                        """)
                        
                        # Actions suivantes
                        col_next1, col_next2 = st.columns(2)
                        with col_next1:
                            if st.button("üìã Voir Tous les BCs", use_container_width=True, key="conversion_voir_bcs"):
                                st.session_state.form_action = "list_bon_commande"
                                st.rerun()
                        with col_next2:
                            if st.button("üìÑ Voir le BC Cr√©√©", use_container_width=True, key="conversion_voir_bc_cree"):
                                st.session_state.selected_formulaire_id = bc_id
                                st.session_state.show_formulaire_modal = True
                                st.rerun()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")
                
                elif submit_annuler:
                    st.session_state.form_action = "list_bon_achat"
                    st.rerun()

# =============================================================================
# BONS DE COMMANDE - INTERFACE COMPL√àTE NOUVELLE
# =============================================================================

def render_bons_commande_tab(gestionnaire):
    """Interface compl√®te pour les Bons de Commande"""
    st.markdown("### üì¶ Bons de Commande")
    
    # Alerte pour les BA pr√™ts √† √™tre convertis
    bas_convertibles = [ba for ba in gestionnaire.get_formulaires('BON_ACHAT') if ba['statut'] in ['VALID√â', 'APPROUV√â']]
    if bas_convertibles:
        st.info(f"üí° {len(bas_convertibles)} Bon(s) d'Achats pr√™t(s) √† √™tre convertis en Bons de Commande")
    
    # Actions rapides
    col_action1, col_action2, col_action3, col_action4 = st.columns(4)
    with col_action1:
        if st.button("‚ûï Nouveau Bon de Commande", use_container_width=True, key="bc_nouveau"):
            st.session_state.form_action = "create_bon_commande"
    with col_action2:
        if st.button("üìã Liste Compl√®te", use_container_width=True, key="bc_liste"):
            st.session_state.form_action = "list_bon_commande"
    with col_action3:
        if st.button("üîÑ Depuis BA", use_container_width=True, key="bc_depuis_ba"):
            st.session_state.form_action = "convert_ba_to_bc"  # D√©j√† impl√©ment√© !
    with col_action4:
        if st.button("üìä Suivi Livraisons", use_container_width=True, key="bc_suivi"):
            st.session_state.form_action = "track_deliveries"
    
    # Actions secondaires
    col_action5, col_action6, col_action7, col_action8 = st.columns(4)
    with col_action5:
        if st.button("üìä Statistiques", use_container_width=True, key="bc_stats"):
            st.session_state.form_action = "stats_bon_commande"
    with col_action6:
        if st.button("üì• R√©ception Marchandises", use_container_width=True, key="bc_reception"):
            st.session_state.form_action = "reception_marchandises"
    with col_action7:
        if st.button("üìã Templates BC", use_container_width=True, key="bc_templates"):
            st.session_state.form_action = "templates_bon_commande"
    with col_action8:
        if st.button("üìà Rapports", use_container_width=True, key="bc_rapports"):
            st.session_state.form_action = "rapports_bon_commande"
    
    # Affichage selon l'action
    action = st.session_state.get('form_action', 'list_bon_commande')
    
    if action == "create_bon_commande":
        render_bon_commande_form(gestionnaire)
    elif action == "list_bon_commande":
        render_bon_commande_list(gestionnaire)
    elif action == "convert_ba_to_bc":
        render_conversion_ba_bc(gestionnaire)  # D√âJ√Ä IMPL√âMENT√â !
    elif action == "track_deliveries":
        render_delivery_tracking(gestionnaire)
    elif action == "stats_bon_commande":
        render_bon_commande_stats(gestionnaire)
    elif action == "reception_marchandises":
        render_reception_marchandises(gestionnaire)
    elif action == "templates_bon_commande":
        render_templates_bon_commande(gestionnaire)
    elif action == "rapports_bon_commande":
        render_rapports_bon_commande(gestionnaire)

def render_bon_commande_form(gestionnaire):
    """Formulaire de cr√©ation de Bon de Commande"""
    st.markdown("#### ‚ûï Nouveau Bon de Commande")
    
    with st.form("bon_commande_form", clear_on_submit=True):
        # En-t√™te du formulaire
        col1, col2 = st.columns(2)
        
        with col1:
            numero_bc = gestionnaire.generer_numero_document('BON_COMMANDE')
            st.text_input("N¬∞ Bon de Commande", value=numero_bc, disabled=True)
            
            # S√©lection fournisseur depuis CRM
            fournisseurs = get_fournisseurs_actifs()
            fournisseur_options = [("", "S√©lectionner un fournisseur")] + [(f['id'], f"{f['nom']} - {f['secteur']}") for f in fournisseurs]
            fournisseur_id = st.selectbox(
                "Fournisseur *",
                options=[f[0] for f in fournisseur_options],
                format_func=lambda x: next((f[1] for f in fournisseur_options if f[0] == x), "")
            )
            
            date_creation = st.date_input("Date de Commande", datetime.now().date())
        
        with col2:
            priorite = st.selectbox("Priorit√©", gestionnaire.priorites, index=0)
            
            # Employ√© responsable
            employes = get_employes_actifs()
            employe_options = [("", "S√©lectionner un responsable")] + [(e['id'], f"{e['prenom']} {e['nom']} - {e['poste']}") for e in employes]
            employe_id = st.selectbox(
                "Responsable Commande *",
                options=[e[0] for e in employe_options],
                format_func=lambda x: next((e[1] for e in employe_options if e[0] == x), "")
            )
            
            date_livraison_prevue = st.date_input("Date Livraison Pr√©vue", datetime.now().date() + timedelta(days=14))
        
        # Informations de commande
        description = st.text_area("Description de la Commande *", height=100, 
                                  placeholder="D√©crivez l'objet de cette commande...")
        
        # Projet associ√© (optionnel)
        projets = get_projets_actifs()
        if projets:
            projet_options = [("", "Aucun projet associ√©")] + [(p['id'], f"#{p['id']} - {p['nom_projet']}") for p in projets]
            projet_id = st.selectbox(
                "Projet Associ√© (optionnel)",
                options=[p[0] for p in projet_options],
                format_func=lambda x: next((p[1] for p in projet_options if p[0] == x), "")
            )
        else:
            projet_id = None
        
        # CONDITIONS COMMERCIALES SP√âCIFIQUES BC
        st.markdown("##### üíº Conditions Commerciales")
        col_comm1, col_comm2 = st.columns(2)
        
        with col_comm1:
            conditions_paiement = st.selectbox("Conditions Paiement *", 
                ["30 jours net", "15 jours net", "√Ä r√©ception", "60 jours net", "Comptant"])
            garantie_exigee = st.text_input("Garantie Exig√©e",
                placeholder="Ex: 12 mois pi√®ces et main d'≈ìuvre")
            contact_fournisseur = st.text_input("Contact Fournisseur",
                placeholder="Nom et t√©l√©phone du contact")
        
        with col_comm2:
            penalites_retard = st.text_input("P√©nalit√©s Retard",
                placeholder="Ex: 0.5% par jour de retard")
            delai_livraison_max = st.number_input("D√©lai Max (jours)", min_value=1, value=14)
            certification_requise = st.text_input("Certifications Requises",
                placeholder="Ex: ISO 9001, CE, CSA...")
        
        # INFORMATIONS LIVRAISON (OBLIGATOIRES POUR BC)
        st.markdown("##### üöö Livraison Obligatoire")
        col_liv1, col_liv2 = st.columns(2)
        
        with col_liv1:
            adresse_livraison = st.text_area("Adresse de Livraison *", 
                                           value="DG Inc.\n123 Rue Industrielle\nMontr√©al, QC H1A 1A1")
            contact_reception = st.text_input("Contact R√©ception *", 
                                            placeholder="Responsable r√©ception des marchandises")
        
        with col_liv2:
            horaires_livraison = st.text_input("Horaires de Livraison *",
                                             value="Lundi-Vendredi 8h-16h")
            instructions_livraison = st.text_area("Instructions Livraison",
                                                placeholder="Instructions sp√©ciales pour la livraison...")
            transporteur_prefere = st.text_input("Transporteur Pr√©f√©r√©",
                                                placeholder="Ex: Purolator, UPS, Camion du fournisseur")
        
        # Articles √† commander
        st.markdown("##### üì¶ Articles √† Commander")
        
        # Interface pour recherche dans l'inventaire
        col_search, col_add = st.columns([3, 1])
        with col_search:
            search_inventaire = st.text_input("üîç Rechercher dans l'inventaire", 
                                            placeholder="Nom d'article, type...")
        with col_add:
            if st.form_submit_button("üîç Rechercher", use_container_width=True, key="bc_search_inv"):
                st.session_state.inventaire_search_results = search_articles_inventaire(search_inventaire)
        
        # Affichage des r√©sultats de recherche
        if st.session_state.get('inventaire_search_results'):
            st.markdown("**R√©sultats de recherche :**")
            for article in st.session_state.inventaire_search_results[:5]:
                col_art, col_stock, col_btn = st.columns([3, 1, 1])
                with col_art:
                    st.text(f"{article['nom']} ({article['type_produit']})")
                with col_stock:
                    st.text(f"Stock: {article.get('quantite_imperial', 'N/A')}")
                with col_btn:
                    if st.form_submit_button("‚ûï", key=f"bc_add_art_{article['id']}"):
                        # Ajouter l'article aux lignes
                        pass
        
        # Interface pour saisie manuelle des articles
        st.markdown("**Saisie des articles √† commander :**")
        
        # Headers
        col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
        with col_desc:
            st.markdown("**Description**")
        with col_qty:
            st.markdown("**Quantit√©**")
        with col_unit:
            st.markdown("**Unit√©**")
        with col_price:
            st.markdown("**Prix Unit.**")
        with col_del:
            st.markdown("**D√©lai**")
        with col_ref:
            st.markdown("**Ref.**")
        
        articles_lines = []
        for i in range(8):  # 8 lignes pour BC
            col_desc, col_qty, col_unit, col_price, col_del, col_ref = st.columns([3, 1, 1, 1.5, 1, 1])
            
            with col_desc:
                desc = st.text_input("", key=f"bc_art_desc_{i}", placeholder="Description de l'article")
            with col_qty:
                qty = st.number_input("", min_value=0.0, key=f"bc_art_qty_{i}", format="%.2f", step=1.0)
            with col_unit:
                unite = st.selectbox("", ["UN", "KG", "M", "M¬≤", "M¬≥", "L", "T", "BO√éTE", "SAC"], 
                                   key=f"bc_art_unit_{i}", index=0)
            with col_price:
                prix = st.number_input("", min_value=0.0, key=f"bc_art_price_{i}", format="%.2f", step=0.01)
            with col_del:
                delai = st.number_input("", min_value=0, key=f"bc_art_delai_{i}", value=14, step=1)
            with col_ref:
                ref_art = st.text_input("", key=f"bc_art_ref_{i}", placeholder="R√©f.")
            
            if desc and qty > 0:
                articles_lines.append({
                    'description': desc,
                    'quantite': qty,
                    'unite': unite,
                    'prix_unitaire': prix,
                    'delai_livraison': delai,
                    'code_article': ref_art or desc[:10].upper(),
                    'reference_materiau': None
                })
        
        # CONDITIONS SP√âCIALES ET CLAUSES
        st.markdown("##### üìã Conditions Sp√©ciales")
        
        col_spec1, col_spec2 = st.columns(2)
        with col_spec1:
            clause_force_majeure = st.checkbox("Clause Force Majeure", value=True)
            clause_confidentialite = st.checkbox("Clause de Confidentialit√©")
            acceptation_partielle = st.checkbox("Livraisons Partielles Accept√©es", value=True)
        
        with col_spec2:
            inspection_reception = st.checkbox("Inspection √† R√©ception", value=True)
            emballage_special = st.text_input("Exigences Emballage",
                                            placeholder="Ex: Emballage anti-corrosion")
            assurance_transport = st.checkbox("Assurance Transport Requise", value=True)
        
        # Validit√© et r√©vision
        st.markdown("##### ‚è∞ Validit√© de l'Offre")
        col_valid1, col_valid2 = st.columns(2)
        
        with col_valid1:
            validite_offre = st.number_input("Validit√© Offre (jours)", min_value=1, value=30)
            clause_revision = st.checkbox("Clause de R√©vision Prix")
        
        with col_valid2:
            devise = st.selectbox("Devise", ["CAD", "USD", "EUR"], index=0)
            taux_change_fixe = st.checkbox("Taux de Change Fix√©")
        
        # Notes et instructions
        notes_speciales = st.text_area("Notes et Instructions Sp√©ciales", height=80,
                                     placeholder="Instructions particuli√®res, notes techniques...")
        
        # Approbations et signatures
        st.markdown("##### ‚úÖ Approbations")
        col_approb1, col_approb2 = st.columns(2)
        
        with col_approb1:
            budget_estime = st.number_input("Budget Total ($)", min_value=0.0, 
                                          value=sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines),
                                          format="%.2f")
            centre_cout = st.text_input("Centre de Co√ªt", placeholder="Code centre de co√ªt")
        
        with col_approb2:
            approbation_requise = st.checkbox("Approbation Direction", value=budget_estime > 10000)
            signature_electronique = st.checkbox("Signature √âlectronique Requise")
        
        # R√©capitulatif financier
        montant_total_calcule = sum(art['quantite'] * art['prix_unitaire'] for art in articles_lines)
        if montant_total_calcule > 0:
            st.markdown(f"""
            <div style='background:#f0f9ff;padding:1rem;border-radius:8px;border-left:4px solid #3b82f6;'>
                <h5 style='color:#1e40af;margin:0;'>üí∞ R√©capitulatif Financier</h5>
                <p style='margin:0.5rem 0 0 0;'><strong>Montant Total : {montant_total_calcule:,.2f} {devise}</strong></p>
                <p style='margin:0;font-size:0.9em;'>Nombre d'articles : {len(articles_lines)}</p>
                <p style='margin:0;font-size:0.9em;'>Conditions : {conditions_paiement}</p>
                <p style='margin:0;font-size:0.9em;'>Livraison pr√©vue : {date_livraison_prevue.strftime('%d/%m/%Y')}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Boutons de soumission
        st.markdown("---")
        col_submit1, col_submit2, col_submit3 = st.columns(3)
        with col_submit1:
            submit_brouillon = st.form_submit_button("üíæ Sauver comme Brouillon", use_container_width=True, key="bc_submit_brouillon")
        with col_submit2:
            submit_valide = st.form_submit_button("‚úÖ Cr√©er et Valider", use_container_width=True, key="bc_submit_valide")
        with col_submit3:
            submit_envoyer = st.form_submit_button("üì§ Cr√©er et Envoyer", use_container_width=True, key="bc_submit_envoyer")
        
        # Traitement de la soumission
        if submit_brouillon or submit_valide or submit_envoyer:
            # Validation des champs obligatoires
            erreurs = []
            
            if not fournisseur_id:
                erreurs.append("Fournisseur obligatoire")
            if not employe_id:
                erreurs.append("Responsable obligatoire") 
            if not description:
                erreurs.append("Description obligatoire")
            if not articles_lines:
                erreurs.append("Au moins un article doit √™tre ajout√©")
            if not adresse_livraison:
                erreurs.append("Adresse de livraison obligatoire")
            if not contact_reception:
                erreurs.append("Contact r√©ception obligatoire")
            if not horaires_livraison:
                erreurs.append("Horaires de livraison obligatoires")
            
            if erreurs:
                st.error("‚ùå Erreurs de validation :")
                for erreur in erreurs:
                    st.error(f"‚Ä¢ {erreur}")
            else:
                # D√©terminer le statut selon le bouton
                if submit_brouillon:
                    statut = 'BROUILLON'
                elif submit_envoyer:
                    statut = 'ENVOY√â'
                else:
                    statut = 'VALID√â'
                
                # Construction des notes compl√®tes
                notes_completes = f"""=== BON DE COMMANDE OFFICIEL ===
{description}

=== CONDITIONS COMMERCIALES ===
Paiement : {conditions_paiement}
Garantie : {garantie_exigee or 'Standard'}
Contact fournisseur : {contact_fournisseur}
P√©nalit√©s retard : {penalites_retard or 'Selon contrat'}
D√©lai maximum : {delai_livraison_max} jours
Certifications : {certification_requise or 'Standard'}

=== LIVRAISON ===
Adresse : {adresse_livraison.replace(chr(10), ' - ')}
Contact r√©ception : {contact_reception}
Horaires : {horaires_livraison}
Transporteur pr√©f√©r√© : {transporteur_prefere or 'Au choix fournisseur'}
Instructions : {instructions_livraison or 'Aucune'}

=== CONDITIONS SP√âCIALES ===
Clause force majeure : {'Oui' if clause_force_majeure else 'Non'}
Confidentialit√© : {'Oui' if clause_confidentialite else 'Non'}
Livraisons partielles : {'Accept√©es' if acceptation_partielle else 'Refus√©es'}
Inspection r√©ception : {'Obligatoire' if inspection_reception else 'Standard'}
Emballage : {emballage_special or 'Standard'}
Assurance transport : {'Requise' if assurance_transport else 'Standard'}

=== VALIDIT√â ET DEVISE ===
Validit√© offre : {validite_offre} jours
Devise : {devise}
R√©vision prix : {'Autoris√©e' if clause_revision else 'Interdite'}
Taux change : {'Fix√©' if taux_change_fixe else 'Variable'}

=== BUDGET ET APPROBATIONS ===
Centre de co√ªt : {centre_cout or '√Ä d√©finir'}
Budget total : {budget_estime:,.2f} {devise}
Approbation direction : {'Requise' if approbation_requise else 'Non requise'}

=== NOTES SP√âCIALES ===
{notes_speciales or 'Aucune'}"""
                
                # M√©tadonn√©es JSON pour BC
                metadonnees = {
                    'conditions_paiement': conditions_paiement,
                    'garantie_exigee': garantie_exigee,
                    'contact_fournisseur': contact_fournisseur,
                    'penalites_retard': penalites_retard,
                    'delai_livraison_max': delai_livraison_max,
                    'certification_requise': certification_requise,
                    'adresse_livraison': adresse_livraison,
                    'contact_reception': contact_reception,
                    'horaires_livraison': horaires_livraison,
                    'transporteur_prefere': transporteur_prefere,
                    'instructions_livraison': instructions_livraison,
                    'clauses': {
                        'force_majeure': clause_force_majeure,
                        'confidentialite': clause_confidentialite,
                        'acceptation_partielle': acceptation_partielle,
                        'inspection_reception': inspection_reception,
                        'assurance_transport': assurance_transport
                    },
                    'validite': {
                        'validite_offre': validite_offre,
                        'devise': devise,
                        'clause_revision': clause_revision,
                        'taux_change_fixe': taux_change_fixe
                    },
                    'budget': {
                        'centre_cout': centre_cout,
                        'approbation_requise': approbation_requise,
                        'signature_electronique': signature_electronique
                    },
                    'emballage_special': emballage_special,
                    'projet_associe': projet_id
                }
                
                # Pr√©paration des donn√©es
                data = {
                    'type_formulaire': 'BON_COMMANDE',
                    'numero_document': numero_bc,
                    'project_id': projet_id,
                    'company_id': fournisseur_id,
                    'employee_id': employe_id,
                    'statut': statut,
                    'priorite': priorite,
                    'date_creation': date_creation,
                    'date_echeance': date_livraison_prevue,
                    'montant_total': montant_total_calcule,
                    'notes': notes_completes,
                    'metadonnees_json': json.dumps(metadonnees),
                    'lignes': articles_lines
                }
                
                # Cr√©ation du formulaire
                formulaire_id = gestionnaire.creer_formulaire(data)
                
                if formulaire_id:
                    # Cr√©ation automatique de l'approvisionnement
                    try:
                        # Rechercher le fournisseur dans la table fournisseurs
                        fournisseur_data = gestionnaire.db.execute_query(
                            "SELECT f.id FROM fournisseurs f WHERE f.company_id = ?", 
                            (fournisseur_id,)
                        )
                        
                        if fournisseur_data:
                            fournisseur_ref_id = fournisseur_data[0]['id']
                        else:
                            # Cr√©er l'entr√©e fournisseur si elle n'existe pas
                            fournisseur_ref_id = gestionnaire.db.execute_insert(
                                "INSERT INTO fournisseurs (company_id, code_fournisseur, delai_livraison_moyen, conditions_paiement) VALUES (?, ?, ?, ?)",
                                (fournisseur_id, f"FOUR-{fournisseur_id}", delai_livraison_max, conditions_paiement)
                            )
                        
                        # Cr√©er l'approvisionnement
                        appro_data = {
                            'statut_livraison': 'EN_ATTENTE' if statut == 'ENVOY√â' else 'CONFIRM√â',
                            'date_commande': date_creation,
                            'date_livraison_prevue': date_livraison_prevue,
                            'quantite_commandee': sum(art['quantite'] for art in articles_lines),
                            'notes_livraison': f"BC {numero_bc} - {len(articles_lines)} article(s)"
                        }
                        
                        appro_id = gestionnaire.db.create_approvisionnement(formulaire_id, fournisseur_ref_id, appro_data)
                    except Exception as e:
                        st.warning(f"BC cr√©√© mais erreur approvisionnement: {e}")
                    
                    # Messages de succ√®s personnalis√©s
                    if submit_envoyer:
                        st.success(f"üì§ Bon de Commande {numero_bc} cr√©√© et envoy√© au fournisseur!")
                        st.info("üìß Le BC a √©t√© marqu√© comme ENVOY√â et un suivi de livraison a √©t√© initialis√©.")
                    else:
                        st.success(f"‚úÖ Bon de Commande {numero_bc} cr√©√© avec succ√®s!")
                    
                    # Affichage du r√©capitulatif
                    st.markdown(f"""
                    ### üìã R√©capitulatif du Bon de Commande
                    
                    **N¬∞ BC :** {numero_bc}  
                    **Fournisseur :** {next((f[1] for f in fournisseur_options if f[0] == fournisseur_id), 'N/A')}  
                    **Montant :** {montant_total_calcule:,.2f} {devise}  
                    **Livraison pr√©vue :** {date_livraison_prevue.strftime('%d/%m/%Y')}  
                    **Articles :** {len(articles_lines)}  
                    **Statut :** {statut}
                    """)
                    
                    # Proposer actions suivantes
                    col_next1, col_next2, col_next3 = st.columns(3)
                    with col_next1:
                        if st.button("üìã Voir la Liste", use_container_width=True, key="bc_voir_liste_apres_creation"):
                            st.session_state.form_action = "list_bon_commande"
                            st.rerun()
                    with col_next2:
                        if st.button("üöö Suivi Livraison", use_container_width=True, key="bc_suivi_apres_creation"):
                            st.session_state.form_action = "track_deliveries"
                            st.rerun()
                    with col_next3:
                        if st.button("‚ûï Cr√©er un Autre", use_container_width=True, key="bc_creer_autre"):
                            st.rerun()
                else:
                    st.error("‚ùå Erreur lors de la cr√©ation du Bon de Commande")

def render_bon_commande_list(gestionnaire):
    """Liste des Bons de Commande avec filtres avanc√©s"""
    st.markdown("#### üìã Liste des Bons de Commande")
    
    bons_commande = gestionnaire.get_formulaires('BON_COMMANDE')
    
    if not bons_commande:
        st.info("Aucun Bon de Commande cr√©√©. Cr√©ez votre premier BC ou convertissez un Bon d'Achats!")
        
        # Proposer actions de d√©marrage
        col_start1, col_start2 = st.columns(2)
        with col_start1:
            if st.button("‚ûï Cr√©er Premier BC", use_container_width=True, key="bc_premier"):
                st.session_state.form_action = "create_bon_commande"
                st.rerun()
        with col_start2:
            if st.button("üîÑ Convertir depuis BA", use_container_width=True, key="bc_convert_start"):
                st.session_state.form_action = "convert_ba_to_bc"
                st.rerun()
        return
    
    # M√©triques rapides
    col_m1, col_m2, col_m3, col_m4, col_m5 = st.columns(5)
    with col_m1:
        st.metric("üì¶ Total BCs", len(bons_commande))
    with col_m2:
        en_cours = len([bc for bc in bons_commande if bc['statut'] in ['VALID√â', 'ENVOY√â']])
        st.metric("üîÑ En Cours", en_cours)
    with col_m3:
        livres = len([bc for bc in bons_commande if bc['statut'] == 'TERMIN√â'])
        st.metric("‚úÖ Livr√©s", livres)
    with col_m4:
        montant_total = sum(bc.get('montant_total', 0) for bc in bons_commande)
        st.metric("üí∞ Montant Total", f"{montant_total:,.0f}$")
    with col_m5:
        urgents = len([bc for bc in bons_commande if bc['priorite'] == 'CRITIQUE'])
        st.metric("üö® Urgents", urgents)
    
    # Alertes de livraison
    bcs_en_retard = [bc for bc in bons_commande 
                     if bc.get('date_echeance') and 
                     datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date() < datetime.now().date() and
                     bc['statut'] not in ['TERMIN√â', 'ANNUL√â']]
    
    if bcs_en_retard:
        st.error(f"üö® {len(bcs_en_retard)} Bon(s) de Commande en retard de livraison!")
    
    # Filtres avanc√©s
    with st.expander("üîç Filtres et Recherche", expanded=False):
        col_f1, col_f2, col_f3, col_f4 = st.columns(4)
        
        with col_f1:
            filtre_statut = st.multiselect("Statut", gestionnaire.statuts, default=gestionnaire.statuts)
        with col_f2:
            filtre_priorite = st.multiselect("Priorit√©", gestionnaire.priorites, default=gestionnaire.priorites)
        with col_f3:
            # Filtre par fournisseur
            fournisseurs_liste = list(set([bc.get('company_nom', 'N/A') for bc in bons_commande if bc.get('company_nom')]))
            filtre_fournisseur = st.multiselect("Fournisseur", ['Tous'] + fournisseurs_liste, default=['Tous'])
        with col_f4:
            # Filtre par statut livraison
            filtre_livraison = st.selectbox("Statut Livraison", 
                ["Tous", "En attente", "Confirm√©", "Exp√©di√©", "Livr√©", "En retard"])
        
        col_search, col_montant, col_date = st.columns(3)
        with col_search:
            recherche = st.text_input("üîç Rechercher", placeholder="Num√©ro, fournisseur, description...")
        with col_montant:
            montant_min = st.number_input("Montant minimum ($)", min_value=0.0, value=0.0)
        with col_date:
            date_depuis = st.date_input("Commandes depuis", value=datetime.now().date() - timedelta(days=90))
    
    # Application des filtres
    bons_filtres = []
    for bc in bons_commande:
        # Filtre statut
        if bc['statut'] not in filtre_statut:
            continue
        
        # Filtre priorit√©
        if bc['priorite'] not in filtre_priorite:
            continue
        
        # Filtre fournisseur
        if 'Tous' not in filtre_fournisseur and bc.get('company_nom', 'N/A') not in filtre_fournisseur:
            continue
        
        # Filtre montant
        if bc.get('montant_total', 0) < montant_min:
            continue
        
        # Filtre date
        try:
            date_bc = datetime.strptime(bc['date_creation'][:10], '%Y-%m-%d').date()
            if date_bc < date_depuis:
                continue
        except:
            pass
        
        # Filtre recherche
        if recherche:
            terme = recherche.lower()
            if not any(terme in str(bc.get(field, '')).lower() for field in ['numero_document', 'company_nom', 'notes', 'employee_nom']):
                continue
        
        # Filtre statut livraison
        if filtre_livraison != "Tous":
            # Ici on pourrait ajouter la logique de statut livraison depuis la table approvisionnements
            pass
        
        bons_filtres.append(bc)
    
    # Affichage r√©sultats
    st.markdown(f"**{len(bons_filtres)} Bon(s) de Commande trouv√©(s)**")
    
    if bons_filtres:
        # Tri
        col_sort1, col_sort2 = st.columns(2)
        with col_sort1:
            tri_par = st.selectbox("Trier par", ["Date cr√©ation", "Date livraison", "Montant", "Priorit√©", "Statut"])
        with col_sort2:
            tri_ordre = st.selectbox("Ordre", ["D√©croissant", "Croissant"])
        
        # Application du tri
        if tri_par == "Date cr√©ation":
            bons_filtres.sort(key=lambda x: x.get('date_creation', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Date livraison":
            bons_filtres.sort(key=lambda x: x.get('date_echeance', ''), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Montant":
            bons_filtres.sort(key=lambda x: x.get('montant_total', 0), reverse=(tri_ordre == "D√©croissant"))
        elif tri_par == "Priorit√©":
            ordre_priorite = {'CRITIQUE': 3, 'URGENT': 2, 'NORMAL': 1}
            bons_filtres.sort(key=lambda x: ordre_priorite.get(x.get('priorite', 'NORMAL'), 1), reverse=(tri_ordre == "D√©croissant"))
        
        # Tableau d√©taill√© avec indicateurs visuels
        df_data = []
        for bc in bons_filtres:
            # Indicateurs visuels
            priorite_icon = {'CRITIQUE': 'üî¥', 'URGENT': 'üü°', 'NORMAL': 'üü¢'}.get(bc['priorite'], '‚ö™')
            statut_icon = {
                'BROUILLON': 'üìù', 'VALID√â': '‚úÖ', 'ENVOY√â': 'üì§', 
                'APPROUV√â': 'üëç', 'TERMIN√â': '‚úîÔ∏è', 'ANNUL√â': '‚ùå'
            }.get(bc['statut'], '‚ùì')
            
            # Calcul du statut livraison
            try:
                date_livraison = datetime.strptime(bc['date_echeance'], '%Y-%m-%d').date()
                today = datetime.now().date()
                if bc['statut'] == 'TERMIN√â':
                    livraison_status = "‚úÖ Livr√©"
                elif date_livraison < today:
                    livraison_status = "üî¥ En retard"
                elif (date_livraison - today).days <= 3:
                    livraison_status = "üü° Imminent"
                else:
                    livraison_status = "üü¢ Dans les temps"
            except:
                livraison_status = "‚ùì Non d√©fini"
            
            df_data.append({
                'N¬∞ BC': bc['numero_document'],
                'Fournisseur': bc.get('company_nom', 'N/A'),
                'Responsable': bc.get('employee_nom', 'N/A'),
                'Statut': f"{statut_icon} {bc['statut']}",
                'Priorit√©': f"{priorite_icon} {bc['priorite']}",
                'Date Commande': bc['date_creation'][:10] if bc['date_creation'] else 'N/A',
                'Livraison Pr√©vue': bc.get('date_echeance', 'N/A'),
                'Statut Livraison': livraison_status,
                'Montant': f"{bc.get('montant_total', 0):,.2f}$ CAD"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True)
