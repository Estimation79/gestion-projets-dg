# formulaires/__init__.py
# Module Formulaires ERP Production DG Inc. - Version 2.0 FINALE COMPLÃˆTE

"""
Module Formulaires ERP Production DG Inc.
Architecture modulaire complÃ¨te avec TOUS les gestionnaires opÃ©rationnels.
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

# Import de la classe principale
from .core.base_gestionnaire import GestionnaireFormulaires

# âœ… TOUS LES 5 GESTIONNAIRES SPÃ‰CIALISÃ‰S OPÃ‰RATIONNELS - VERSION FINALE
from .bons_travail import GestionnaireBonsTravail, render_bons_travail_tab
from .bons_achats import GestionnaireBonsAchats, render_bons_achats_tab
from .bons_commande import GestionnaireBonsCommande, render_bons_commande_tab
from .demandes_prix import GestionnaireDemandesPrix, render_demandes_prix_tab
from .estimations import GestionnaireEstimations, render_estimations_tab  # ðŸŽ‰ AJOUTÃ‰

# Import des utilitaires (dÃ©jÃ  complets)
from .utils.helpers import formater_montant, formater_delai
from .core.types_formulaires import TYPES_FORMULAIRES


def show_formulaires_page():
    """
    Page principale du module Formulaires - VERSION FINALE COMPLÃˆTE.
    
    ðŸŽ‰ TOUS LES 5 MODULES MAINTENANT OPÃ‰RATIONNELS !
    """
    st.markdown("## ðŸ“‘ Gestion des Formulaires - DG Inc.")
    st.caption("*Architecture modulaire v2.0 - 5/5 MODULES OPÃ‰RATIONNELS*")
    
    # Initialisation du gestionnaire principal
    if 'gestionnaire_formulaires' not in st.session_state:
        st.session_state.gestionnaire_formulaires = GestionnaireFormulaires(st.session_state.erp_db)
    
    gestionnaire = st.session_state.gestionnaire_formulaires
    
    # Statistiques globales
    show_formulaires_dashboard(gestionnaire)
    
    # âœ… TOUS LES 5 MODULES MAINTENANT OPÃ‰RATIONNELS
    tab_bt, tab_ba, tab_bc, tab_dp, tab_est = st.tabs([
        "ðŸ”§ Bons de Travail",
        "ðŸ›’ Bons d'Achats", 
        "ðŸ“¦ Bons de Commande",
        "ðŸ’° Demandes de Prix",
        "ðŸ“Š Estimations"
    ])
    
    # âœ… Module BT - OPÃ‰RATIONNEL
    with tab_bt:
        render_bons_travail_tab(gestionnaire)
    
    # âœ… Module BA - OPÃ‰RATIONNEL
    with tab_ba:
        render_bons_achats_tab(gestionnaire)
    
    # âœ… Module BC - OPÃ‰RATIONNEL
    with tab_bc:
        render_bons_commande_tab(gestionnaire)
    
    # âœ… Module DP - OPÃ‰RATIONNEL
    with tab_dp:
        render_demandes_prix_tab(gestionnaire)
    
    # ðŸŽ‰ Module EST - MAINTENANT OPÃ‰RATIONNEL !
    with tab_est:
        render_estimations_tab(gestionnaire)


def show_formulaires_dashboard(gestionnaire):
    """Dashboard des formulaires avec mÃ©triques globales - VERSION FINALE."""
    st.markdown("### ðŸ“Š Dashboard Formulaires")
    
    stats = gestionnaire.get_statistiques_formulaires()
    
    if not any(stats.values()):
        st.info("Aucun formulaire crÃ©Ã©. Commencez par crÃ©er votre premier document.")
        return
    
    # MÃ©triques principales avec TOUS les modules - VERSION FINALE
    col1, col2, col3, col4, col5 = st.columns(5)
    
    modules_status = {
        'BON_TRAVAIL': {'icon': 'ðŸ”§', 'status': 'âœ…', 'nom': 'Bons Travail'},
        'BON_ACHAT': {'icon': 'ðŸ›’', 'status': 'âœ…', 'nom': 'Bons Achats'},
        'BON_COMMANDE': {'icon': 'ðŸ“¦', 'status': 'âœ…', 'nom': 'Bons Commande'},
        'DEMANDE_PRIX': {'icon': 'ðŸ’°', 'status': 'âœ…', 'nom': 'Demandes Prix'},
        'ESTIMATION': {'icon': 'ðŸ“Š', 'status': 'âœ…', 'nom': 'Estimations'}  # ðŸŽ‰ MAINTENANT OPÃ‰RATIONNEL
    }
    
    for i, (type_form, config) in enumerate(modules_status.items()):
        with [col1, col2, col3, col4, col5][i]:
            type_stats = stats.get(type_form, {})
            total = type_stats.get('total', 0)
            montant = type_stats.get('montant_total', 0)
            
            st.metric(
                f"{config['status']} {config['icon']} {config['nom']}",
                total,
                delta=formater_montant(montant) if montant else None,
                help="Module opÃ©rationnel complet"
            )
    
    # Message de statut - VERSION FINALE
    st.success("ðŸŽ‰ **TOUS LES MODULES OPÃ‰RATIONNELS !** BT âœ… + BA âœ… + BC âœ… + DP âœ… + EST âœ…")
    st.info("ðŸš€ **Architecture modulaire complÃ¨te** : Gestion intÃ©grale des documents DG Inc.")
    
    # Graphiques optimisÃ©s
    col_g1, col_g2 = st.columns(2)
    
    with col_g1:
        # RÃ©partition par type avec statut complet
        types_data = []
        for type_form, config in modules_status.items():
            total = stats.get(type_form, {}).get('total', 0)
            if total > 0:
                status_icon = config['status']
                nom_affichage = f"{config['nom']} {status_icon}"
                types_data.append({'Type': nom_affichage, 'Nombre': total})
        
        if types_data:
            df_types = pd.DataFrame(types_data)
            fig = px.pie(df_types, values='Nombre', names='Type', 
                        title="ðŸ“Š RÃ©partition par Type (âœ…=OpÃ©rationnel)")
            fig.update_layout(showlegend=True, height=400)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("CrÃ©ez vos premiers documents pour voir les statistiques.")
    
    with col_g2:
        # Ã‰volution avec indicateurs de performance
        evolution_data = []
        for type_form, type_stats in stats.items():
            if type_form in modules_status:
                config = modules_status[type_form]
                for statut, count in type_stats.get('par_statut', {}).items():
                    evolution_data.append({
                        'Statut': statut,
                        'Nombre': count,
                        'Type': config['nom']
                    })
        
        if evolution_data:
            df_statuts = pd.DataFrame(evolution_data)
            fig = px.bar(df_statuts, x='Statut', y='Nombre', color='Type',
                        title="ðŸ“ˆ Documents par Statut")
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("DonnÃ©es des statuts disponibles aprÃ¨s crÃ©ation de documents.")
    
    # NOUVEAU : MÃ©triques avancÃ©es avec tous les modules
    if any(stats.values()):
        st.markdown("---")
        st.markdown("### ðŸ’¼ MÃ©triques AvancÃ©es")
        
        col_av1, col_av2, col_av3, col_av4 = st.columns(4)
        
        with col_av1:
            # Total CA tous types
            ca_total = sum(
                type_stats.get('montant_total', 0) 
                for type_stats in stats.values() 
                if isinstance(type_stats, dict)
            )
            st.metric("ðŸ’° CA Total Documents", f"{ca_total:,.0f}$ CAD")
        
        with col_av2:
            # Documents en cours
            docs_actifs = sum(
                len(type_stats.get('par_statut', {}).get('VALIDÃ‰', [])) + 
                len(type_stats.get('par_statut', {}).get('ENVOYÃ‰', []))
                for type_stats in stats.values() 
                if isinstance(type_stats, dict)
            )
            st.metric("ðŸ“„ Documents Actifs", docs_actifs)
        
        with col_av3:
            # Taux de completion globale
            total_docs = sum(
                type_stats.get('total', 0) 
                for type_stats in stats.values() 
                if isinstance(type_stats, dict)
            )
            docs_termines = sum(
                len(type_stats.get('par_statut', {}).get('TERMINÃ‰', []))
                for type_stats in stats.values() 
                if isinstance(type_stats, dict)
            )
            taux_completion = (docs_termines / total_docs * 100) if total_docs > 0 else 0
            st.metric("ðŸ“ˆ Taux Completion", f"{taux_completion:.1f}%")
        
        with col_av4:
            # EfficacitÃ© module (documents par module actif)
            modules_actifs = sum(1 for config in modules_status.values() if config['status'] == 'âœ…')
            efficacite = total_docs / modules_actifs if modules_actifs > 0 else 0
            st.metric("âš¡ EfficacitÃ© Modules", f"{efficacite:.1f} docs/module")


# Exports principaux - VERSION FINALE COMPLÃˆTE
__all__ = [
    # Fonction principale
    'show_formulaires_page',
    
    # Gestionnaire principal
    'GestionnaireFormulaires',
    
    # âœ… TOUS LES 5 GESTIONNAIRES SPÃ‰CIALISÃ‰S OPÃ‰RATIONNELS
    'GestionnaireBonsTravail',
    'GestionnaireBonsAchats',
    'GestionnaireBonsCommande',
    'GestionnaireDemandesPrix',
    'GestionnaireEstimations',      # ðŸŽ‰ AJOUTÃ‰
    
    # âœ… TOUTES LES 5 INTERFACES OPÃ‰RATIONNELLES
    'render_bons_travail_tab',
    'render_bons_achats_tab',
    'render_bons_commande_tab',
    'render_demandes_prix_tab',
    'render_estimations_tab',       # ðŸŽ‰ AJOUTÃ‰
    
    # Utilitaires
    'formater_montant',
    'formater_delai',
    'TYPES_FORMULAIRES'
]

# MÃ©tadonnÃ©es du module principal - VERSION FINALE
__version__ = "2.0.0"
__author__ = "DG Inc. ERP Team"
__description__ = "Module Formulaires ERP - 5/5 modules opÃ©rationnels - ARCHITECTURE COMPLÃˆTE"
