# formulaires/bons_travail/gestionnaire_bt.py
# Gestionnaire sp√©cialis√© pour les Bons de Travail - VERSION CORRIG√âE BASE DE DONN√âES

"""
Gestionnaire sp√©cialis√© pour les Bons de Travail (BT).
VERSION CORRIG√âE : Utilise pleinement la base de donn√©es SQLite avec vraies donn√©es
"""

import streamlit as st
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import json

from ..core.base_gestionnaire import GestionnaireFormulaires
from ..utils.validations import valider_bon_travail
from ..utils.helpers import (
    get_projets_actifs,
    get_employes_actifs,
    get_operations_projet,
    get_materiaux_projet,
    get_work_centers_actifs
)


class GestionnaireBonsTravail:
    """
    Gestionnaire sp√©cialis√© pour les Bons de Travail - VERSION CORRIG√âE BASE DE DONN√âES
    
    Utilise compl√®tement les tables SQLite avec vraies donn√©es :
    - formulaires (table principale)
    - formulaire_lignes (d√©tails des mat√©riaux)
    - bt_assignations (√©quipe assign√©e)
    - bt_reservations_postes (postes r√©serv√©s)
    - bt_avancement (suivi des op√©rations)
    - operations (op√©rations du projet)
    - materials (mat√©riaux du projet)
    - work_centers (postes de travail)
    - employees (employ√©s r√©els)
    - projects (projets r√©els)
    """
    
    def __init__(self, gestionnaire_base: GestionnaireFormulaires):
        """
        Initialise le gestionnaire sp√©cialis√© avec infrastructure compl√®te
        
        Args:
            gestionnaire_base: Instance du gestionnaire de base
        """
        self.base = gestionnaire_base
        self.db = gestionnaire_base.db
        
        # V√©rifier et cr√©er l'infrastructure BT compl√®te
        self._ensure_bt_infrastructure()
    
    def _ensure_bt_infrastructure(self):
        """
        S'assurer que toute l'infrastructure BT est en place avec robustesse
        """
        try:
            print("üîß V√©rification infrastructure BT...")
            
            # 1. V√©rifier et corriger les colonnes projects
            self._check_and_fix_projects_columns()
            
            # 2. Cr√©er les tables BT sp√©cialis√©es si manquantes
            self._create_bt_tables()
            
            # 3. V√©rifier l'int√©grit√© des donn√©es
            self._verify_bt_data_integrity()
            
            print("‚úÖ Infrastructure BT v√©rifi√©e et configur√©e")
            
        except Exception as e:
            st.warning(f"Avertissement infrastructure BT: {e}")
            print(f"‚ö†Ô∏è Erreur infrastructure BT: {e}")
    
    def _check_and_fix_projects_columns(self):
        """
        V√©rifier et ajouter les colonnes manquantes dans la table projects
        """
        try:
            # V√©rifier les colonnes existantes
            schema_query = "PRAGMA table_info(projects)"
            columns = self.db.execute_query(schema_query)
            existing_columns = [col['name'] for col in columns]
            
            columns_added = False
            
            # Ajouter date_debut_reel si manquante
            if 'date_debut_reel' not in existing_columns:
                self.db.execute_update("ALTER TABLE projects ADD COLUMN date_debut_reel DATE")
                print("‚úÖ Colonne date_debut_reel ajout√©e √† projects")
                columns_added = True
            
            # Ajouter date_fin_reel si manquante
            if 'date_fin_reel' not in existing_columns:
                self.db.execute_update("ALTER TABLE projects ADD COLUMN date_fin_reel DATE")
                print("‚úÖ Colonne date_fin_reel ajout√©e √† projects")
                columns_added = True
            
            if columns_added:
                st.info("üîß Colonnes de dates r√©elles ajout√©es √† la table projects")
                
        except Exception as e:
            print(f"‚ùå Erreur v√©rification colonnes projects: {e}")
            # Continuer sans bloquer
    
    def _create_bt_tables(self):
        """
        Cr√©er les tables sp√©cifiques aux BT si elles n'existent pas
        """
        try:
            # Table des assignations d'employ√©s aux BT
            self.db.execute_update("""
                CREATE TABLE IF NOT EXISTS bt_assignations (
                    id INTEGER PRIMARY KEY,
                    bt_id INTEGER NOT NULL,
                    employe_id INTEGER NOT NULL,
                    date_assignation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    statut TEXT DEFAULT 'ASSIGN√â',
                    role_bt TEXT DEFAULT 'MEMBRE_√âQUIPE',
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (bt_id) REFERENCES formulaires(id) ON DELETE CASCADE,
                    FOREIGN KEY (employe_id) REFERENCES employees(id)
                )
            """)
            
            # Table des r√©servations de postes de travail
            self.db.execute_update("""
                CREATE TABLE IF NOT EXISTS bt_reservations_postes (
                    id INTEGER PRIMARY KEY,
                    bt_id INTEGER NOT NULL,
                    work_center_id INTEGER NOT NULL,
                    date_reservation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    date_prevue DATE,
                    date_liberation TIMESTAMP,
                    statut TEXT DEFAULT 'R√âSERV√â',
                    priorite TEXT DEFAULT 'NORMAL',
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (bt_id) REFERENCES formulaires(id) ON DELETE CASCADE,
                    FOREIGN KEY (work_center_id) REFERENCES work_centers(id)
                )
            """)
            
            # Table de suivi de l'avancement des BT
            self.db.execute_update("""
                CREATE TABLE IF NOT EXISTS bt_avancement (
                    id INTEGER PRIMARY KEY,
                    bt_id INTEGER NOT NULL,
                    operation_id INTEGER,
                    pourcentage_realise REAL DEFAULT 0.0,
                    temps_reel REAL DEFAULT 0.0,
                    date_debut_reel TIMESTAMP,
                    date_fin_reel TIMESTAMP,
                    notes_avancement TEXT,
                    updated_by INTEGER,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (bt_id) REFERENCES formulaires(id) ON DELETE CASCADE,
                    FOREIGN KEY (operation_id) REFERENCES operations(id),
                    FOREIGN KEY (updated_by) REFERENCES employees(id)
                )
            """)
            
            # Index pour optimisation des requ√™tes BT
            self.db.execute_update("CREATE INDEX IF NOT EXISTS idx_bt_assignations_bt ON bt_assignations(bt_id)")
            self.db.execute_update("CREATE INDEX IF NOT EXISTS idx_bt_assignations_employe ON bt_assignations(employe_id)")
            self.db.execute_update("CREATE INDEX IF NOT EXISTS idx_bt_reservations_bt ON bt_reservations_postes(bt_id)")
            self.db.execute_update("CREATE INDEX IF NOT EXISTS idx_bt_reservations_poste ON bt_reservations_postes(work_center_id)")
            self.db.execute_update("CREATE INDEX IF NOT EXISTS idx_bt_avancement_bt ON bt_avancement(bt_id)")
            
            print("‚úÖ Tables BT cr√©√©es/v√©rifi√©es avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation tables BT: {e}")
            # Continuer sans bloquer
    
    def _verify_bt_data_integrity(self):
        """
        V√©rifier l'int√©grit√© des donn√©es BT
        """
        try:
            # V√©rifier que les formulaires BT existent
            bt_count = self.db.execute_query(
                "SELECT COUNT(*) as count FROM formulaires WHERE type_formulaire = 'BON_TRAVAIL'"
            )
            
            if bt_count and bt_count[0]['count'] > 0:
                print(f"‚úÖ {bt_count[0]['count']} Bon(s) de Travail trouv√©(s) en base")
            else:
                print("‚ÑπÔ∏è Aucun BT existant - base pr√™te pour nouveaux BT")
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification int√©grit√© BT: {e}")
    
    def creer_bon_travail(self, data: Dict) -> Optional[int]:
        """
        Cr√©e un nouveau Bon de Travail en utilisant pleinement la base de donn√©es
        
        Args:
            data: Donn√©es du bon de travail avec vrais IDs de la base
            
        Returns:
            int: ID du BT cr√©√© ou None si erreur
        """
        try:
            # Validation sp√©cifique BT
            is_valid, erreurs = valider_bon_travail(data)
            if not is_valid:
                for erreur in erreurs:
                    st.error(f"‚ùå {erreur}")
                return None
            
            # Enrichissement des donn√©es BT avec vraies donn√©es de la base
            data['type_formulaire'] = 'BON_TRAVAIL'
            
            # M√©tadonn√©es avec vraies r√©f√©rences BD
            metadonnees_bt = {
                'operations_selectionnees': data.get('operations_selectionnees', []),
                'materiaux_selectionnes': data.get('materiaux_selectionnes', []), 
                'employes_assignes': data.get('employes_assignes', []),
                'work_centers_utilises': data.get('work_centers_utilises', []),
                'projet_source': data.get('project_id'),
                'temps_estime_total': data.get('temps_estime_total', 0),
                'cout_materiaux_estime': data.get('cout_materiaux_estime', 0),
                'cout_main_oeuvre_estime': data.get('cout_main_oeuvre_estime', 0),
                'date_creation_bt': datetime.now().isoformat(),
                'version_bt': '2.1_database'
            }
            
            data['metadonnees_json'] = json.dumps(metadonnees_bt)
            
            # Cr√©ation via le gestionnaire de base
            bt_id = self.base.creer_formulaire(data)
            
            if bt_id:
                # Actions post-cr√©ation sp√©cifiques BT avec vraies donn√©es BD
                self._post_creation_bt_database(bt_id, data)
                
                st.success(f"‚úÖ Bon de Travail #{bt_id} cr√©√© avec succ√®s!")
                print(f"‚úÖ BT #{bt_id} cr√©√© avec succ√®s - {data.get('numero_document', 'N/A')}")
            
            return bt_id
            
        except Exception as e:
            st.error(f"Erreur cr√©ation BT: {e}")
            print(f"‚ùå Erreur d√©taill√©e cr√©ation BT: {e}")
            return None
    
    def _post_creation_bt_database(self, bt_id: int, data: Dict) -> None:
        """
        Actions post-cr√©ation utilisant les vraies donn√©es de la base
        
        Args:
            bt_id: ID du BT cr√©√©
            data: Donn√©es originales avec vrais IDs
        """
        try:
            # 1. Assignation des employ√©s r√©els depuis la base
            employes_assignes = data.get('employes_assignes', [])
            if employes_assignes:
                self._assigner_employes_reels(bt_id, employes_assignes)
            
            # 2. R√©servation des postes de travail r√©els
            work_centers = data.get('work_centers_utilises', [])
            if work_centers:
                self._reserver_postes_reels(bt_id, work_centers, data.get('date_echeance'))
            
            # 3. Initialisation du suivi pour les vraies op√©rations
            operations_selectionnees = data.get('operations_selectionnees', [])
            if operations_selectionnees:
                self._initialiser_avancement_operations_reelles(bt_id, operations_selectionnees)
            
            # 4. Cr√©ation des lignes de formulaire pour les vrais mat√©riaux
            materiaux_selectionnes = data.get('materiaux_selectionnes', [])
            if materiaux_selectionnes:
                self._creer_lignes_materiaux_reels(bt_id, materiaux_selectionnes)
            
            # 5. Mise √† jour du statut du projet
            if data.get('project_id'):
                self._mettre_a_jour_statut_projet(data['project_id'], bt_id)
            
            print(f"‚úÖ Actions post-cr√©ation BT #{bt_id} avec vraies donn√©es BD termin√©es")
                
        except Exception as e:
            st.warning(f"Actions post-cr√©ation BT partiellement √©chou√©es: {e}")
            print(f"‚ö†Ô∏è Erreur post-cr√©ation BT: {e}")
    
    def _assigner_employes_reels(self, bt_id: int, employes_ids: List[int]) -> None:
        """
        Assigne des employ√©s r√©els de la base au BT
        
        Args:
            bt_id: ID du BT
            employes_ids: Liste des vrais IDs employ√©s depuis la table employees
        """
        try:
            assignations_creees = 0
            
            for employe_id in employes_ids:
                # V√©rifier que l'employ√© existe vraiment dans la base
                employe_exists = self.db.execute_query(
                    "SELECT prenom, nom, poste FROM employees WHERE id = ? AND statut = 'ACTIF'",
                    (employe_id,)
                )
                
                if employe_exists:
                    employe_info = employe_exists[0]
                    query = """
                        INSERT INTO bt_assignations (bt_id, employe_id, date_assignation, statut, role_bt)
                        VALUES (?, ?, CURRENT_TIMESTAMP, 'ASSIGN√â', 'MEMBRE_√âQUIPE')
                    """
                    self.db.execute_insert(query, (bt_id, employe_id))
                    assignations_creees += 1
                    print(f"‚úÖ Employ√© {employe_info['prenom']} {employe_info['nom']} assign√© au BT #{bt_id}")
                else:
                    st.warning(f"Employ√© ID {employe_id} non trouv√© ou inactif")
            
            if assignations_creees > 0:
                print(f"‚úÖ {assignations_creees} employ√©(s) r√©el(s) assign√©(s) au BT #{bt_id}")
                
        except Exception as e:
            st.warning(f"Erreur assignation employ√©s r√©els: {e}")
            print(f"‚ùå Erreur assignation employ√©s BT: {e}")
    
    def _reserver_postes_reels(self, bt_id: int, work_centers_ids: List[int], 
                              date_prevue: Optional[str]) -> None:
        """
        R√©serve des postes de travail r√©els pour le BT
        
        Args:
            bt_id: ID du BT
            work_centers_ids: Liste des vrais IDs postes depuis work_centers
            date_prevue: Date pr√©vue d'utilisation
        """
        try:
            reservations_creees = 0
            
            for wc_id in work_centers_ids:
                # V√©rifier que le poste existe vraiment
                poste_exists = self.db.execute_query(
                    "SELECT nom, departement FROM work_centers WHERE id = ? AND statut = 'ACTIF'",
                    (wc_id,)
                )
                
                if poste_exists:
                    poste_info = poste_exists[0]
                    query = """
                        INSERT INTO bt_reservations_postes 
                        (bt_id, work_center_id, date_reservation, date_prevue, statut)
                        VALUES (?, ?, CURRENT_TIMESTAMP, ?, 'R√âSERV√â')
                    """
                    self.db.execute_insert(query, (bt_id, wc_id, date_prevue))
                    reservations_creees += 1
                    print(f"‚úÖ Poste {poste_info['nom']} ({poste_info['departement']}) r√©serv√© pour BT #{bt_id}")
                else:
                    st.warning(f"Poste de travail ID {wc_id} non trouv√© ou inactif")
            
            if reservations_creees > 0:
                print(f"‚úÖ {reservations_creees} poste(s) r√©el(s) r√©serv√©(s) pour BT #{bt_id}")
                
        except Exception as e:
            st.warning(f"Erreur r√©servation postes r√©els: {e}")
            print(f"‚ùå Erreur r√©servation postes BT: {e}")
    
    def _initialiser_avancement_operations_reelles(self, bt_id: int, operations_ids: List[int]) -> None:
        """
        Initialise le suivi d'avancement pour les vraies op√©rations du projet
        
        Args:
            bt_id: ID du BT
            operations_ids: Liste des vrais IDs op√©rations depuis operations
        """
        try:
            avancements_crees = 0
            
            for operation_id in operations_ids:
                # V√©rifier que l'op√©ration existe vraiment
                operation_exists = self.db.execute_query(
                    "SELECT description, temps_estime, sequence_number FROM operations WHERE id = ?",
                    (operation_id,)
                )
                
                if operation_exists:
                    operation_info = operation_exists[0]
                    query = """
                        INSERT INTO bt_avancement 
                        (bt_id, operation_id, pourcentage_realise, temps_reel)
                        VALUES (?, ?, 0.0, 0.0)
                    """
                    self.db.execute_insert(query, (bt_id, operation_id))
                    avancements_crees += 1
                    print(f"‚úÖ Suivi initialis√© pour op√©ration: {operation_info['description'][:50]}")
            
            if avancements_crees > 0:
                print(f"‚úÖ Suivi avancement initialis√© pour {avancements_crees} op√©ration(s) r√©elle(s)")
                
        except Exception as e:
            print(f"‚ùå Erreur initialisation avancement op√©rations r√©elles: {e}")
    
    def _creer_lignes_materiaux_reels(self, bt_id: int, materiaux_ids: List[int]) -> None:
        """
        Cr√©e les lignes de formulaire pour les vrais mat√©riaux s√©lectionn√©s
        
        Args:
            bt_id: ID du BT
            materiaux_ids: Liste des vrais IDs mat√©riaux depuis materials
        """
        try:
            lignes_creees = 0
            
            for materiau_id in materiaux_ids:
                # R√©cup√©rer les vraies donn√©es du mat√©riau
                materiau_data = self.db.execute_query(
                    "SELECT designation, quantite, unite, prix_unitaire FROM materials WHERE id = ?",
                    (materiau_id,)
                )
                
                if materiau_data:
                    mat = materiau_data[0]
                    
                    # Cr√©er la ligne de formulaire avec r√©f√©rence au vrai mat√©riau
                    sequence = lignes_creees + 1
                    montant_ligne = (mat['quantite'] or 0) * (mat['prix_unitaire'] or 0)
                    
                    # V√©rifier si la colonne reference_materiau existe
                    try:
                        query = """
                            INSERT INTO formulaire_lignes 
                            (formulaire_id, sequence_ligne, description, quantite, unite, 
                             prix_unitaire, montant_ligne, reference_materiau)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        """
                        
                        self.db.execute_insert(query, (
                            bt_id,
                            sequence,
                            mat['designation'],
                            mat['quantite'],
                            mat['unite'],
                            mat['prix_unitaire'],
                            montant_ligne,
                            materiau_id
                        ))
                    except Exception as e_col:
                        if "no such column" in str(e_col).lower():
                            # Fallback sans reference_materiau
                            query_fallback = """
                                INSERT INTO formulaire_lignes 
                                (formulaire_id, sequence_ligne, description, quantite, unite, 
                                 prix_unitaire, montant_ligne)
                                VALUES (?, ?, ?, ?, ?, ?, ?)
                            """
                            
                            self.db.execute_insert(query_fallback, (
                                bt_id,
                                sequence,
                                f"{mat['designation']} (R√©f: {materiau_id})",
                                mat['quantite'],
                                mat['unite'],
                                mat['prix_unitaire'],
                                montant_ligne
                            ))
                        else:
                            raise e_col
                    
                    lignes_creees += 1
                    print(f"‚úÖ Ligne cr√©√©e pour mat√©riau: {mat['designation'][:50]}")
            
            if lignes_creees > 0:
                print(f"‚úÖ {lignes_creees} ligne(s) de mat√©riaux r√©els cr√©√©e(s)")
                
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation lignes mat√©riaux r√©els: {e}")
    
    def _mettre_a_jour_statut_projet(self, project_id: int, bt_id: int) -> None:
        """
        Met √† jour le statut du projet associ√© de mani√®re robuste
        
        Args:
            project_id: ID du projet
            bt_id: ID du BT cr√©√©
        """
        try:
            # V√©rifier si c'est le premier BT du projet
            query = """
                SELECT COUNT(*) as count FROM formulaires 
                WHERE project_id = ? AND type_formulaire = 'BON_TRAVAIL'
            """
            result = self.db.execute_query(query, (project_id,))
            
            if result and result[0]['count'] == 1:  # Premier BT
                try:
                    # Tenter mise √† jour avec colonnes compl√®tes
                    query_update = """
                        UPDATE projects 
                        SET statut = 'EN COURS', 
                            date_debut_reel = CURRENT_DATE,
                            updated_at = CURRENT_TIMESTAMP
                        WHERE id = ? AND statut = '√Ä FAIRE'
                    """
                    affected = self.db.execute_update(query_update, (project_id,))
                    
                    if affected > 0:
                        st.info(f"‚úÖ Projet #{project_id} automatiquement d√©marr√© (EN COURS)")
                        print(f"‚úÖ Projet #{project_id} mis √† jour: √Ä FAIRE ‚Üí EN COURS")
                    else:
                        print(f"‚ÑπÔ∏è Projet #{project_id} d√©j√† en cours ou statut diff√©rent")
                        
                except Exception as e_col:
                    # Si erreur avec les nouvelles colonnes, essayer mise √† jour basique
                    if "no such column" in str(e_col).lower():
                        print("‚ö†Ô∏è Colonnes date_debut_reel manquantes - mise √† jour basique")
                        
                        query_update_basic = """
                            UPDATE projects 
                            SET statut = 'EN COURS', updated_at = CURRENT_TIMESTAMP
                            WHERE id = ? AND statut = '√Ä FAIRE'
                        """
                        affected = self.db.execute_update(query_update_basic, (project_id,))
                        
                        if affected > 0:
                            st.info(f"‚úÖ Projet #{project_id} marqu√© EN COURS")
                            print(f"‚úÖ Projet #{project_id} mis √† jour (basique): √Ä FAIRE ‚Üí EN COURS")
                    else:
                        raise e_col
            else:
                print(f"‚ÑπÔ∏è BT #{bt_id} n'est pas le premier du projet #{project_id}")
                        
        except Exception as e:
            st.warning(f"Erreur mise √† jour projet: {e}")
            print(f"‚ùå Erreur mise √† jour projet #{project_id}: {e}")
            # Continuer sans bloquer la cr√©ation du BT
    
    def get_bons_travail(self, **filters) -> List[Dict]:
        """
        R√©cup√®re les Bons de Travail avec enrichissement depuis la vraie base
        
        Args:
            **filters: Filtres optionnels (project_id, employe_id, statut, etc.)
            
        Returns:
            List[Dict]: Liste des BT enrichis avec vraies donn√©es BD
        """
        try:
            # R√©cup√©ration des BT de base
            bts = self.base.get_formulaires('BON_TRAVAIL', **filters)
            
            # Enrichissement avec vraies donn√©es de la base
            for bt in bts:
                try:
                    # Enrichir avec vraies donn√©es projet
                    if bt.get('project_id'):
                        bt.update(self._get_vraies_donnees_projet(bt['project_id']))
                    
                    # Enrichir avec vraies assignations
                    bt['assignations'] = self._get_vraies_assignations_bt(bt['id'])
                    
                    # Enrichir avec vraies r√©servations postes
                    bt['reservations_postes'] = self._get_vraies_reservations_postes_bt(bt['id'])
                    
                    # Calcul avancement bas√© sur vraies op√©rations
                    bt['avancement'] = self._calculer_avancement_reel_bt(bt['id'])
                    
                    # Parse m√©tadonn√©es
                    bt['metadata_parsed'] = self._parse_metadata_bt(bt.get('metadonnees_json', '{}'))
                    
                except Exception as e_enrich:
                    print(f"‚ö†Ô∏è Erreur enrichissement BT #{bt['id']}: {e_enrich}")
                    bt['assignations'] = []
                    bt['reservations_postes'] = []
                    bt['avancement'] = {'pourcentage': 0, 'operations_terminees': 0, 'operations_totales': 0}
                    bt['metadata_parsed'] = {}
            
            print(f"‚úÖ {len(bts)} BT r√©cup√©r√©(s) avec enrichissement depuis vraie base")
            return bts
            
        except Exception as e:
            st.error(f"Erreur r√©cup√©ration BT: {e}")
            print(f"‚ùå Erreur r√©cup√©ration BT: {e}")
            return []
    
    def _get_vraies_donnees_projet(self, project_id: int) -> Dict:
        """
        R√©cup√®re les vraies donn√©es du projet depuis la base
        
        Args:
            project_id: ID du projet
            
        Returns:
            Dict: Vraies donn√©es du projet
        """
        try:
            query = """
                SELECT p.nom_projet, p.statut as project_statut, p.priorite as project_priorite,
                       p.prix_estime, p.date_soumis, p.date_prevu, p.date_debut_reel, p.date_fin_reel,
                       c.nom as client_nom
                FROM projects p
                LEFT JOIN companies c ON p.client_company_id = c.id
                WHERE p.id = ?
            """
            
            result = self.db.execute_query(query, (project_id,))
            return dict(result[0]) if result else {}
            
        except Exception as e:
            print(f"‚ùå Erreur donn√©es projet #{project_id}: {e}")
            return {}
    
    def _get_vraies_assignations_bt(self, bt_id: int) -> List[Dict]:
        """
        R√©cup√®re les vraies assignations depuis bt_assignations
        
        Args:
            bt_id: ID du BT
            
        Returns:
            List[Dict]: Vraies assignations avec infos employ√©s
        """
        try:
            query = """
                SELECT 
                    a.*,
                    e.prenom || ' ' || e.nom as employe_nom,
                    e.poste,
                    e.departement,
                    e.email,
                    e.statut as employe_statut
                FROM bt_assignations a
                JOIN employees e ON a.employe_id = e.id
                WHERE a.bt_id = ?
                ORDER BY a.date_assignation
            """
            rows = self.db.execute_query(query, (bt_id,))
            return [dict(row) for row in rows]
            
        except Exception as e:
            print(f"‚ùå Erreur assignations BT #{bt_id}: {e}")
            return []
    
    def _get_vraies_reservations_postes_bt(self, bt_id: int) -> List[Dict]:
        """
        R√©cup√®re les vraies r√©servations depuis bt_reservations_postes
        
        Args:
            bt_id: ID du BT
            
        Returns:
            List[Dict]: Vraies r√©servations avec infos postes
        """
        try:
            query = """
                SELECT 
                    r.*,
                    w.nom as poste_nom,
                    w.departement,
                    w.categorie,
                    w.type_machine,
                    w.capacite_theorique,
                    w.statut as poste_statut
                FROM bt_reservations_postes r
                JOIN work_centers w ON r.work_center_id = w.id
                WHERE r.bt_id = ?
                ORDER BY r.date_prevue
            """
            rows = self.db.execute_query(query, (bt_id,))
            return [dict(row) for row in rows]
            
        except Exception as e:
            print(f"‚ùå Erreur r√©servations BT #{bt_id}: {e}")
            return []
    
    def _calculer_avancement_reel_bt(self, bt_id: int) -> Dict:
        """
        Calcule l'avancement bas√© sur les vraies op√©rations et bt_avancement
        
        Args:
            bt_id: ID du BT
            
        Returns:
            Dict: Avancement calcul√© depuis vraies donn√©es
        """
        try:
            # R√©cup√©rer l'avancement r√©el depuis bt_avancement
            query = """
                SELECT 
                    COUNT(*) as operations_totales,
                    COUNT(CASE WHEN pourcentage_realise >= 100 THEN 1 END) as operations_terminees,
                    AVG(pourcentage_realise) as pourcentage_moyen,
                    SUM(temps_reel) as temps_total_reel,
                    MIN(date_debut_reel) as debut_reel,
                    MAX(date_fin_reel) as fin_reel
                FROM bt_avancement
                WHERE bt_id = ?
            """
            result = self.db.execute_query(query, (bt_id,))
            
            if result and result[0]['operations_totales'] > 0:
                row = result[0]
                return {
                    'pourcentage': round(row['pourcentage_moyen'] or 0, 1),
                    'operations_terminees': row['operations_terminees'],
                    'operations_totales': row['operations_totales'],
                    'temps_total_reel': row['temps_total_reel'] or 0,
                    'date_debut_reel': row['debut_reel'],
                    'date_fin_reel': row['fin_reel'],
                    'mode_calcul': 'vraies_donnees_bt_avancement'
                }
            
            # Fallback : calculer depuis les m√©tadonn√©es si pas de suivi d√©taill√©
            bt_details = self.base.get_formulaire_details(bt_id)
            if bt_details:
                try:
                    metadonnees = json.loads(bt_details.get('metadonnees_json', '{}'))
                    operations_ids = metadonnees.get('operations_selectionnees', [])
                    
                    if operations_ids:
                        # V√©rifier statut des vraies op√©rations
                        operations_terminees = 0
                        for op_id in operations_ids:
                            query_op = "SELECT statut FROM operations WHERE id = ?"
                            result_op = self.db.execute_query(query_op, (op_id,))
                            if result_op and result_op[0]['statut'] == 'TERMIN√â':
                                operations_terminees += 1
                        
                        pourcentage = (operations_terminees / len(operations_ids) * 100) if operations_ids else 0
                        
                        return {
                            'pourcentage': round(pourcentage, 1),
                            'operations_terminees': operations_terminees,
                            'operations_totales': len(operations_ids),
                            'mode_calcul': 'statut_vraies_operations'
                        }
                except:
                    pass
            
            return {'pourcentage': 0, 'operations_terminees': 0, 'operations_totales': 0, 'mode_calcul': 'aucune_donnee'}
            
        except Exception as e:
            print(f"‚ùå Erreur calcul avancement BT #{bt_id}: {e}")
            return {'pourcentage': 0, 'operations_terminees': 0, 'operations_totales': 0, 'erreur': str(e)}
    
    def _parse_metadata_bt(self, metadonnees_json: str) -> Dict:
        """
        Parse les m√©tadonn√©es JSON du BT de mani√®re s√©curis√©e
        
        Args:
            metadonnees_json: M√©tadonn√©es JSON du BT
            
        Returns:
            Dict: M√©tadonn√©es pars√©es
        """
        try:
            if not metadonnees_json:
                return {}
            return json.loads(metadonnees_json)
        except (json.JSONDecodeError, TypeError):
            return {}
    
    def mettre_a_jour_avancement_operation_reelle(self, bt_id: int, operation_id: int, 
                                                 pourcentage: float, temps_reel: float = 0, 
                                                 notes: str = "", employe_id: int = None) -> bool:
        """
        Met √† jour l'avancement d'une vraie op√©ration du BT dans bt_avancement
        
        Args:
            bt_id: ID du BT
            operation_id: ID de la vraie op√©ration depuis operations
            pourcentage: Pourcentage de r√©alisation (0-100)
            temps_reel: Temps r√©el pass√©
            notes: Notes sur l'avancement
            employe_id: ID de l'employ√© qui fait la mise √† jour
            
        Returns:
            bool: True si succ√®s
        """
        try:
            # Validation
            if not (0 <= pourcentage <= 100):
                st.error("Le pourcentage doit √™tre entre 0 et 100")
                return False
            
            # V√©rifier que l'op√©ration existe vraiment
            operation_exists = self.db.execute_query(
                "SELECT description FROM operations WHERE id = ?",
                (operation_id,)
            )
            
            if not operation_exists:
                st.error(f"Op√©ration #{operation_id} non trouv√©e")
                return False
            
            # V√©rifier si l'enregistrement existe d√©j√†
            existing = self.db.execute_query(
                "SELECT id FROM bt_avancement WHERE bt_id = ? AND operation_id = ?",
                (bt_id, operation_id)
            )
            
            if existing:
                # Mise √† jour
                query = """
                    UPDATE bt_avancement 
                    SET pourcentage_realise = ?, 
                        temps_reel = ?, 
                        notes_avancement = ?,
                        updated_by = ?,
                        updated_at = CURRENT_TIMESTAMP,
                        date_fin_reel = CASE WHEN ? >= 100 THEN CURRENT_TIMESTAMP ELSE date_fin_reel END
                    WHERE bt_id = ? AND operation_id = ?
                """
                params = (pourcentage, temps_reel, notes, employe_id, pourcentage, bt_id, operation_id)
            else:
                # Cr√©ation
                query = """
                    INSERT INTO bt_avancement 
                    (bt_id, operation_id, pourcentage_realise, temps_reel, notes_avancement, 
                     updated_by, date_debut_reel, date_fin_reel)
                    VALUES (?, ?, ?, ?, ?, ?, 
                            CASE WHEN ? > 0 THEN CURRENT_TIMESTAMP ELSE NULL END,
                            CASE WHEN ? >= 100 THEN CURRENT_TIMESTAMP ELSE NULL END)
                """
                params = (bt_id, operation_id, pourcentage, temps_reel, notes, employe_id, pourcentage, pourcentage)
            
            affected = self.db.execute_update(query, params)
            
            if affected > 0:
                st.success(f"‚úÖ Avancement op√©ration mis √† jour: {pourcentage}%")
                print(f"‚úÖ Avancement op√©ration #{operation_id} mis √† jour: {pourcentage}%")
                
                # Marquer l'op√©ration comme termin√©e si 100%
                if pourcentage >= 100:
                    self._marquer_vraie_operation_terminee(operation_id)
                
                return True
            
            return False
            
        except Exception as e:
            st.error(f"Erreur mise √† jour avancement: {e}")
            print(f"‚ùå Erreur avancement op√©ration #{operation_id}: {e}")
            return False
    
    def _marquer_vraie_operation_terminee(self, operation_id: int) -> None:
        """
        Marque une vraie op√©ration comme termin√©e dans la table operations
        
        Args:
            operation_id: ID de la vraie op√©ration
        """
        try:
            query = """
                UPDATE operations 
                SET statut = 'TERMIN√â'
                WHERE id = ? AND statut != 'TERMIN√â'
            """
            affected = self.db.execute_update(query, (operation_id,))
            
            if affected > 0:
                print(f"‚úÖ Vraie op√©ration #{operation_id} marqu√©e termin√©e")
                
        except Exception as e:
            print(f"‚ùå Erreur marquage vraie op√©ration termin√©e #{operation_id}: {e}")
    
    def marquer_bt_termine(self, bt_id: int, employe_id: int, 
                          commentaires: str = "") -> bool:
        """
        Marque un BT comme termin√© avec validations et tra√ßabilit√© compl√®te
        
        Args:
            bt_id: ID du BT
            employe_id: ID de l'employ√© qui termine
            commentaires: Commentaires de fin
            
        Returns:
            bool: True si succ√®s
        """
        try:
            # Validation : v√©rifier que l'employ√© est autoris√©
            if not self._employe_peut_terminer_bt(bt_id, employe_id):
                st.error("Seuls les employ√©s assign√©s ou responsables peuvent terminer ce BT")
                return False
            
            # Marquer le BT comme termin√©
            success = self.base.modifier_statut_formulaire(
                bt_id, 'TERMIN√â', employe_id,
                f"BT termin√© par employ√© #{employe_id}. {commentaires}"
            )
            
            if success:
                # Actions de finalisation
                self._finaliser_bt_termine(bt_id)
                
                # V√©rifier si tous les BT du projet sont termin√©s
                self._verifier_completion_projet(bt_id)
                
                st.success(f"‚úÖ Bon de Travail #{bt_id} marqu√© comme termin√©!")
                print(f"‚úÖ BT #{bt_id} marqu√© termin√© par employ√© #{employe_id}")
            
            return success
            
        except Exception as e:
            st.error(f"Erreur fin BT: {e}")
            print(f"‚ùå Erreur fin BT #{bt_id}: {e}")
            return False
    
    def _employe_peut_terminer_bt(self, bt_id: int, employe_id: int) -> bool:
        """
        V√©rifie si un employ√© peut terminer le BT
        
        Args:
            bt_id: ID du BT
            employe_id: ID de l'employ√©
            
        Returns:
            bool: True si autoris√©
        """
        try:
            # 1. V√©rifier si c'est le responsable du BT
            bt_details = self.base.get_formulaire_details(bt_id)
            if bt_details and bt_details.get('employee_id') == employe_id:
                return True
            
            # 2. V√©rifier si c'est un employ√© assign√©
            assignations = self._get_vraies_assignations_bt(bt_id)
            employes_assignes = [a['employe_id'] for a in assignations if a.get('statut') == 'ASSIGN√â']
            
            if employe_id in employes_assignes:
                return True
            
            # 3. V√©rifier les permissions sp√©ciales (ex: superviseur)
            # TODO: Impl√©menter syst√®me de permissions plus avanc√©
            
            return False
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification permissions BT #{bt_id}: {e}")
            return False
    
    def _finaliser_bt_termine(self, bt_id: int) -> None:
        """
        Actions de finalisation quand un BT est termin√©
        
        Args:
            bt_id: ID du BT termin√©
        """
        try:
            # 1. Lib√©rer les r√©servations de postes
            self._liberer_reservations_postes(bt_id)
            
            # 2. Mettre √† jour les assignations
            self._finaliser_assignations_bt(bt_id)
            
            # 3. Compl√©ter l'avancement √† 100%
            self._completer_avancement_bt(bt_id)
            
            print(f"‚úÖ Finalisation BT #{bt_id} termin√©e")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur finalisation BT #{bt_id}: {e}")
    
    def _liberer_reservations_postes(self, bt_id: int) -> None:
        """
        Lib√®re les r√©servations de postes d'un BT termin√©
        
        Args:
            bt_id: ID du BT termin√©
        """
        try:
            query = """
                UPDATE bt_reservations_postes 
                SET statut = 'LIB√âR√â', 
                    date_liberation = CURRENT_TIMESTAMP,
                    notes = COALESCE(notes, '') || ' - Lib√©r√© automatiquement (BT termin√©)'
                WHERE bt_id = ? AND statut = 'R√âSERV√â'
            """
            affected = self.db.execute_update(query, (bt_id,))
            
            if affected > 0:
                print(f"‚úÖ {affected} r√©servation(s) de postes lib√©r√©e(s) pour BT #{bt_id}")
                
        except Exception as e:
            st.warning(f"Erreur lib√©ration postes: {e}")
            print(f"‚ùå Erreur lib√©ration postes BT #{bt_id}: {e}")
    
    def _finaliser_assignations_bt(self, bt_id: int) -> None:
        """
        Finalise les assignations d'employ√©s d'un BT termin√©
        
        Args:
            bt_id: ID du BT termin√©
        """
        try:
            query = """
                UPDATE bt_assignations 
                SET statut = 'TERMIN√â',
                    notes = COALESCE(notes, '') || ' - BT termin√©'
                WHERE bt_id = ? AND statut = 'ASSIGN√â'
            """
            affected = self.db.execute_update(query, (bt_id,))
            
            if affected > 0:
                print(f"‚úÖ {affected} assignation(s) finalis√©e(s) pour BT #{bt_id}")
                
        except Exception as e:
            print(f"‚ùå Erreur finalisation assignations BT #{bt_id}: {e}")
    
    def _completer_avancement_bt(self, bt_id: int) -> None:
        """
        Marque toutes les op√©rations du BT comme termin√©es √† 100%
        
        Args:
            bt_id: ID du BT termin√©
        """
        try:
            query = """
                UPDATE bt_avancement 
                SET pourcentage_realise = 100.0,
                    date_fin_reel = CURRENT_TIMESTAMP,
                    notes_avancement = COALESCE(notes_avancement, '') || ' - Compl√©t√© automatiquement (BT termin√©)'
                WHERE bt_id = ? AND pourcentage_realise < 100.0
            """
            affected = self.db.execute_update(query, (bt_id,))
            
            if affected > 0:
                print(f"‚úÖ {affected} op√©ration(s) marqu√©e(s) termin√©e(s) pour BT #{bt_id}")
                
        except Exception as e:
            print(f"‚ùå Erreur completion avancement BT #{bt_id}: {e}")
    
    def _verifier_completion_projet(self, bt_id: int) -> None:
        """
        V√©rifie si le projet est compl√®tement termin√© et met √† jour son statut
        
        Args:
            bt_id: ID du BT qui vient d'√™tre termin√©
        """
        try:
            bt_details = self.base.get_formulaire_details(bt_id)
            project_id = bt_details.get('project_id')
            
            if not project_id:
                print(f"‚ÑπÔ∏è BT #{bt_id} n'est pas li√© √† un projet")
                return
            
            # Compter les BT non termin√©s du projet
            query = """
                SELECT COUNT(*) as count FROM formulaires 
                WHERE project_id = ? AND type_formulaire = 'BON_TRAVAIL' 
                AND statut NOT IN ('TERMIN√â', 'ANNUL√â')
            """
            result = self.db.execute_query(query, (project_id,))
            
            if result and result[0]['count'] == 0:
                # Tous les BT sont termin√©s, marquer le projet comme termin√©
                try:
                    # Tenter avec toutes les colonnes
                    query_update = """
                        UPDATE projects 
                        SET statut = 'TERMIN√â', 
                            date_fin_reel = CURRENT_DATE,
                            updated_at = CURRENT_TIMESTAMP
                        WHERE id = ?
                    """
                    affected = self.db.execute_update(query_update, (project_id,))
                    
                    if affected > 0:
                        st.success(f"üéâ Projet #{project_id} automatiquement marqu√© comme termin√©!")
                        print(f"üéâ Projet #{project_id} compl√©t√© automatiquement")
                    
                except Exception as e_col:
                    # Si erreur colonne, mise √† jour basique
                    if "no such column" in str(e_col).lower():
                        print("‚ö†Ô∏è Colonnes date_fin_reel manquantes - mise √† jour basique")
                        
                        query_update_basic = """
                            UPDATE projects 
                            SET statut = 'TERMIN√â', updated_at = CURRENT_TIMESTAMP
                            WHERE id = ?
                        """
                        affected = self.db.execute_update(query_update_basic, (project_id,))
                        
                        if affected > 0:
                            st.success(f"üéâ Projet #{project_id} marqu√© termin√©!")
                            print(f"üéâ Projet #{project_id} compl√©t√© (mise √† jour basique)")
                    else:
                        raise e_col
            else:
                bt_restants = result[0]['count']
                print(f"‚ÑπÔ∏è Projet #{project_id} a encore {bt_restants} BT en cours")
                
        except Exception as e:
            st.warning(f"Erreur v√©rification projet: {e}")
            print(f"‚ùå Erreur v√©rification completion projet: {e}")
    
    def get_statistiques_bt(self) -> Dict:
        """
        Calcule les statistiques des BT depuis la vraie base
        
        Returns:
            Dict: Statistiques enrichies depuis vraies donn√©es
        """
        try:
            # Statistiques de base
            stats_base = self.base.get_statistiques_formulaires().get('BON_TRAVAIL', {})
            
            # Enrichissement avec vraies donn√©es BT
            try:
                query = """
                    SELECT 
                        f.statut,
                        COUNT(*) as count,
                        AVG(julianday('now') - julianday(f.date_creation)) as duree_moyenne,
                        SUM(f.montant_total) as montant_total,
                        COUNT(DISTINCT f.project_id) as projets_concernes,
                        COUNT(DISTINCT f.employee_id) as employes_impliques
                    FROM formulaires f
                    WHERE f.type_formulaire = 'BON_TRAVAIL'
                    GROUP BY f.statut
                """
                
                rows = self.db.execute_query(query)
                
                stats_enrichies = {}
                total_bt = 0
                
                for row in rows:
                    statut = row['statut']
                    count = row['count']
                    total_bt += count
                    
                    stats_enrichies[f'{statut.lower()}'] = count
                    stats_enrichies['duree_moyenne'] = row['duree_moyenne'] or 0
                    stats_enrichies['montant_total'] = row['montant_total'] or 0
                    stats_enrichies['projets_concernes'] = row['projets_concernes'] or 0
                    stats_enrichies['employes_impliques'] = row['employes_impliques'] or 0
                
                # Calculer taux de completion
                termines = stats_enrichies.get('termin√©', 0)
                if total_bt > 0:
                    stats_enrichies['taux_completion'] = (termines / total_bt) * 100
                else:
                    stats_enrichies['taux_completion'] = 0
                
                # Ajouter aux stats de base
                stats_base.update(stats_enrichies)
                
                print(f"‚úÖ Statistiques BT calcul√©es depuis vraie base: {total_bt} BT")
                
            except Exception as e:
                st.warning(f"Erreur statistiques enrichies BT: {e}")
                print(f"‚ö†Ô∏è Erreur stats enrichies BT: {e}")
            
            # Ajouter statistiques assignations/r√©servations r√©elles
            try:
                stats_assignations = self._get_vraies_statistiques_assignations()
                stats_reservations = self._get_vraies_statistiques_reservations()
                
                stats_base.update(stats_assignations)
                stats_base.update(stats_reservations)
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur stats assignations/r√©servations: {e}")
            
            return stats_base
            
        except Exception as e:
            st.error(f"Erreur stats BT: {e}")
            print(f"‚ùå Erreur statistiques BT: {e}")
            return {}
    
    def _get_vraies_statistiques_assignations(self) -> Dict:
        """
        Calcule les vraies statistiques des assignations depuis bt_assignations
        
        Returns:
            Dict: Statistiques assignations r√©elles
        """
        try:
            query = """
                SELECT 
                    COUNT(*) as total_assignations,
                    COUNT(DISTINCT employe_id) as employes_assignes_uniques,
                    COUNT(DISTINCT bt_id) as bt_avec_assignations
                FROM bt_assignations
                WHERE statut = 'ASSIGN√â'
            """
            
            result = self.db.execute_query(query)
            if result:
                row = result[0]
                return {
                    'assignations_actives_reelles': row['total_assignations'],
                    'employes_assignes_bt_reels': row['employes_assignes_uniques'],
                    'bt_avec_equipe_reelle': row['bt_avec_assignations']
                }
            
            return {}
            
        except Exception as e:
            print(f"‚ùå Erreur stats assignations r√©elles: {e}")
            return {}
    
    def _get_vraies_statistiques_reservations(self) -> Dict:
        """
        Calcule les vraies statistiques des r√©servations depuis bt_reservations_postes
        
        Returns:
            Dict: Statistiques r√©servations r√©elles
        """
        try:
            query = """
                SELECT 
                    COUNT(*) as total_reservations,
                    COUNT(DISTINCT work_center_id) as postes_reserves_uniques,
                    COUNT(CASE WHEN statut = 'R√âSERV√â' THEN 1 END) as reservations_actives
                FROM bt_reservations_postes
            """
            
            result = self.db.execute_query(query)
            if result:
                row = result[0]
                return {
                    'reservations_postes_total_reelles': row['total_reservations'],
                    'postes_utilises_bt_reels': row['postes_reserves_uniques'],
                    'reservations_actives_reelles': row['reservations_actives']
                }
            
            return {}
            
        except Exception as e:
            print(f"‚ùå Erreur stats r√©servations r√©elles: {e}")
            return {}
    
    def generer_rapport_productivite(self, periode_jours: int = 30) -> Dict:
        """
        G√©n√®re un rapport de productivit√© bas√© sur les vraies donn√©es
        
        Args:
            periode_jours: P√©riode d'analyse en jours
            
        Returns:
            Dict: Rapport bas√© sur vraies donn√©es BD
        """
        try:
            date_debut = datetime.now() - timedelta(days=periode_jours)
            
            # Requ√™te avec vraies donn√©es employ√©s et projets
            query = """
                SELECT 
                    e.prenom || ' ' || e.nom as employe_nom,
                    e.poste,
                    e.departement,
                    COUNT(f.id) as nb_bt_termines,
                    AVG(julianday(f.updated_at) - julianday(f.date_creation)) as duree_moyenne,
                    SUM(f.montant_total) as montant_total_travaux,
                    MIN(f.date_creation) as premier_bt_periode,
                    MAX(f.updated_at) as dernier_bt_termine,
                    COUNT(DISTINCT f.project_id) as projets_touches
                FROM formulaires f
                JOIN employees e ON f.employee_id = e.id
                WHERE f.type_formulaire = 'BON_TRAVAIL'
                AND f.statut = 'TERMIN√â'
                AND f.updated_at >= ?
                GROUP BY f.employee_id, e.prenom, e.nom, e.poste, e.departement
                ORDER BY nb_bt_termines DESC
            """
            
            rows = self.db.execute_query(query, (date_debut.isoformat(),))
            
            # Statistiques globales vraies
            query_global = """
                SELECT 
                    COUNT(*) as total_bt_crees,
                    COUNT(CASE WHEN statut = 'TERMIN√â' THEN 1 END) as total_bt_termines,
                    AVG(montant_total) as montant_moyen,
                    SUM(montant_total) as montant_total_periode,
                    COUNT(DISTINCT project_id) as projets_impactes
                FROM formulaires
                WHERE type_formulaire = 'BON_TRAVAIL'
                AND date_creation >= ?
            """
            
            result_global = self.db.execute_query(query_global, (date_debut.isoformat(),))
            
            # Construction du rapport avec vraies donn√©es
            rapport = {
                'periode': f"{periode_jours} derniers jours",
                'date_generation': datetime.now().isoformat(),
                'date_debut_analyse': date_debut.isoformat(),
                'employes': [dict(row) for row in rows],
                'statistiques_globales': dict(result_global[0]) if result_global else {},
                'analyse': {},
                'source_donnees': 'vraie_base_sqlite'
            }
            
            # Calculs d'analyse enrichis
            if rapport['employes']:
                rapport['total_bt_termines'] = sum(emp['nb_bt_termines'] for emp in rapport['employes'])
                rapport['duree_moyenne_globale'] = sum(emp['duree_moyenne'] or 0 for emp in rapport['employes']) / len(rapport['employes'])
                
                # Analyses enrichies
                rapport['analyse']['top_performer'] = max(rapport['employes'], key=lambda x: x['nb_bt_termines'])
                rapport['analyse']['plus_efficace'] = min(rapport['employes'], key=lambda x: x['duree_moyenne'] or float('inf'))
                rapport['analyse']['plus_rentable'] = max(rapport['employes'], key=lambda x: x['montant_total_travaux'] or 0)
                rapport['analyse']['plus_polyvalent'] = max(rapport['employes'], key=lambda x: x['projets_touches'] or 0)
            else:
                rapport['total_bt_termines'] = 0
                rapport['duree_moyenne_globale'] = 0
                rapport['analyse'] = {'message': 'Aucune donn√©e disponible pour la p√©riode depuis la vraie base'}
            
            # Recommandations bas√©es sur vraies donn√©es
            rapport['recommandations'] = self._generer_recommandations_productivite_reelles(rapport)
            
            print(f"‚úÖ Rapport productivit√© g√©n√©r√© depuis vraie base pour {periode_jours} jours")
            return rapport
            
        except Exception as e:
            st.error(f"Erreur rapport productivit√©: {e}")
            print(f"‚ùå Erreur rapport productivit√©: {e}")
            return {}
    
    def _generer_recommandations_productivite_reelles(self, rapport: Dict) -> List[str]:
        """
        G√©n√®re des recommandations bas√©es sur l'analyse des vraies donn√©es
        
        Args:
            rapport: Donn√©es du rapport depuis vraie base
            
        Returns:
            List[str]: Recommandations bas√©es sur vraies donn√©es
        """
        recommandations = []
        
        try:
            employes = rapport.get('employes', [])
            if not employes:
                return ["Aucune donn√©e suffisante depuis la vraie base pour g√©n√©rer des recommandations"]
            
            # Analyses bas√©es sur vraies donn√©es
            nb_bt_values = [emp['nb_bt_termines'] for emp in employes]
            durees = [emp['duree_moyenne'] for emp in employes if emp['duree_moyenne']]
            projets_values = [emp['projets_touches'] for emp in employes]
            
            if nb_bt_values:
                nb_bt_max = max(nb_bt_values)
                nb_bt_min = min(nb_bt_values)
                
                if nb_bt_max - nb_bt_min > 3:
                    recommandations.append("üìä √âquilibrer la charge de travail BT entre les employ√©s")
            
            if durees:
                duree_max = max(durees)
                duree_moyenne = sum(durees) / len(durees)
                
                if duree_max > duree_moyenne * 1.5:
                    recommandations.append("‚è±Ô∏è Identifier les causes des retards sur certains BT")
            
            if projets_values:
                projets_max = max(projets_values)
                if projets_max > 5:
                    recommandations.append("üéØ Consid√©rer la sp√©cialisation par type de projet")
            
            # Analyse par d√©partement (vraies donn√©es)
            depts = {}
            for emp in employes:
                dept = emp.get('departement', 'N/A')
                if dept not in depts:
                    depts[dept] = []
                depts[dept].append(emp['nb_bt_termines'])
            
            if len(depts) > 1:
                recommandations.append("üè¢ Analyser les diff√©rences de performance entre d√©partements r√©els")
            
            # Recommandations sp√©cifiques
            if len(employes) < 3:
                recommandations.append("üë• Consid√©rer l'augmentation de l'√©quipe pour les BT")
            
            # Recommandations sp√©cifiques DG Inc.
            recommandations.append("üîß Optimiser l'utilisation des postes de travail DG Inc.")
            recommandations.append("üìã Am√©liorer la d√©finition des op√©rations dans les projets")
            
            if not recommandations:
                recommandations.append("‚úÖ Performance globale satisfaisante selon les vraies donn√©es")
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration recommandations r√©elles: {e}")
            recommandations.append("‚ö†Ô∏è Erreur dans l'analyse des vraies donn√©es")
        
        return recommandations
    
    def get_bt_details_complets(self, bt_id: int) -> Optional[Dict]:
        """
        R√©cup√®re tous les d√©tails complets d'un BT sp√©cifique avec vraies donn√©es
        
        Args:
            bt_id: ID du BT
            
        Returns:
            Optional[Dict]: D√©tails complets du BT enrichis
        """
        try:
            # D√©tails de base
            bt_details = self.base.get_formulaire_details(bt_id)
            if not bt_details:
                return None
            
            # Enrichissement complet avec vraies donn√©es
            bt_details['assignations'] = self._get_vraies_assignations_bt(bt_id)
            bt_details['reservations_postes'] = self._get_vraies_reservations_postes_bt(bt_id)
            bt_details['avancement_detaille'] = self._get_avancement_detaille_bt(bt_id)
            bt_details['lignes_materiaux'] = self._get_lignes_materiaux_bt(bt_id)
            bt_details['historique_modifications'] = self._get_historique_bt(bt_id)
            bt_details['metadata_parsed'] = self._parse_metadata_bt(bt_details.get('metadonnees_json', '{}'))
            
            # Enrichir avec donn√©es projet si disponible
            if bt_details.get('project_id'):
                bt_details.update(self._get_vraies_donnees_projet(bt_details['project_id']))
            
            print(f"‚úÖ D√©tails complets r√©cup√©r√©s pour BT #{bt_id}")
            return bt_details
            
        except Exception as e:
            st.error(f"Erreur r√©cup√©ration d√©tails BT: {e}")
            print(f"‚ùå Erreur d√©tails BT #{bt_id}: {e}")
            return None
    
    def _get_avancement_detaille_bt(self, bt_id: int) -> List[Dict]:
        """
        R√©cup√®re l'avancement d√©taill√© de toutes les op√©rations du BT
        
        Args:
            bt_id: ID du BT
            
        Returns:
            List[Dict]: Avancement d√©taill√© par op√©ration
        """
        try:
            query = """
                SELECT 
                    a.*,
                    o.sequence_number,
                    o.description as operation_description,
                    o.temps_estime,
                    o.statut as operation_statut,
                    e.prenom || ' ' || e.nom as updated_by_nom
                FROM bt_avancement a
                LEFT JOIN operations o ON a.operation_id = o.id
                LEFT JOIN employees e ON a.updated_by = e.id
                WHERE a.bt_id = ?
                ORDER BY o.sequence_number
            """
            
            rows = self.db.execute_query(query, (bt_id,))
            return [dict(row) for row in rows]
            
        except Exception as e:
            print(f"‚ùå Erreur avancement d√©taill√© BT #{bt_id}: {e}")
            return []
    
    def _get_lignes_materiaux_bt(self, bt_id: int) -> List[Dict]:
        """
        R√©cup√®re les lignes de mat√©riaux du BT
        
        Args:
            bt_id: ID du BT
            
        Returns:
            List[Dict]: Lignes de mat√©riaux
        """
        try:
            query = """
                SELECT 
                    fl.*,
                    m.designation as materiau_designation,
                    m.stock_actuel
                FROM formulaire_lignes fl
                LEFT JOIN materials m ON fl.reference_materiau = m.id
                WHERE fl.formulaire_id = ?
                ORDER BY fl.sequence_ligne
            """
            
            rows = self.db.execute_query(query, (bt_id,))
            return [dict(row) for row in rows]
            
        except Exception as e:
            print(f"‚ùå Erreur lignes mat√©riaux BT #{bt_id}: {e}")
            return []
    
    def _get_historique_bt(self, bt_id: int) -> List[Dict]:
        """
        R√©cup√®re l'historique des modifications du BT
        
        Args:
            bt_id: ID du BT
            
        Returns:
            List[Dict]: Historique des modifications
        """
        try:
            # R√©cup√©rer depuis l'historique des validations du gestionnaire de base
            query = """
                SELECT 
                    fv.*,
                    e.prenom || ' ' || e.nom as employee_nom
                FROM formulaire_validations fv
                LEFT JOIN employees e ON fv.employee_id = e.id
                WHERE fv.formulaire_id = ?
                ORDER BY fv.date_validation DESC
            """
            
            rows = self.db.execute_query(query, (bt_id,))
            return [dict(row) for row in rows]
            
        except Exception as e:
            print(f"‚ùå Erreur historique BT #{bt_id}: {e}")
            return []
